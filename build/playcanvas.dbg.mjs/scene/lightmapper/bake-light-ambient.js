/**
 * @license
 * PlayCanvas Engine v1.57.1 revision 256dd83c2 (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { Vec3 } from '../../math/vec3.js';
import { random } from '../../math/random.js';
import { Color } from '../../math/color.js';
import { Entity } from '../../framework/entity.js';
import { SHADOW_PCF3 } from '../constants.js';
import { BakeLight } from './bake-light.js';

const _tempPoint = new Vec3();

class BakeLightAmbient extends BakeLight {
  constructor(scene) {
    const lightEntity = new Entity('AmbientLight');
    lightEntity.addComponent('light', {
      type: 'directional',
      affectDynamic: true,
      affectLightmapped: false,
      bake: true,
      bakeNumSamples: scene.ambientBakeNumSamples,
      castShadows: true,
      normalOffsetBias: 0.05,
      shadowBias: 0.2,
      shadowDistance: 1,
      shadowResolution: 2048,
      shadowType: SHADOW_PCF3,
      color: Color.WHITE,
      intensity: 1,
      bakeDir: false
    });
    super(scene, lightEntity.light.light);
  }

  get numVirtualLights() {
    return this.light.bakeNumSamples;
  }

  prepareVirtualLight(index, numVirtualLights) {
    random.spherePointDeterministic(_tempPoint, index, numVirtualLights, 0, this.scene.ambientBakeSpherePart);

    this.light._node.lookAt(_tempPoint.mulScalar(-1));

    this.light._node.rotateLocal(90, 0, 0);

    const gamma = this.scene.gammaCorrection ? 2.2 : 1;
    const fullIntensity = 2 * Math.PI * this.scene.ambientBakeSpherePart;
    const linearIntensity = Math.pow(fullIntensity, gamma);
    this.light.intensity = Math.pow(linearIntensity / numVirtualLights, 1 / gamma);
  }

}

export { BakeLightAmbient };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFrZS1saWdodC1hbWJpZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvc2NlbmUvbGlnaHRtYXBwZXIvYmFrZS1saWdodC1hbWJpZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZlYzMgfSBmcm9tICcuLi8uLi9tYXRoL3ZlYzMuanMnO1xuaW1wb3J0IHsgcmFuZG9tIH0gZnJvbSAnLi4vLi4vbWF0aC9yYW5kb20uanMnO1xuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi8uLi9tYXRoL2NvbG9yLmpzJztcbmltcG9ydCB7IEVudGl0eSB9IGZyb20gJy4uLy4uL2ZyYW1ld29yay9lbnRpdHkuanMnO1xuaW1wb3J0IHsgU0hBRE9XX1BDRjMgfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgQmFrZUxpZ2h0IH0gZnJvbSAnLi9iYWtlLWxpZ2h0LmpzJztcblxuY29uc3QgX3RlbXBQb2ludCA9IG5ldyBWZWMzKCk7XG5cbi8vIGJha2UgbGlnaHQgcmVwcmVzZW50aW5nIGFuIGFtYmllbnQgbGlnaHQgKGN1YmVtYXAgb3IgY29uc3RhbnQpXG5jbGFzcyBCYWtlTGlnaHRBbWJpZW50IGV4dGVuZHMgQmFrZUxpZ2h0IHtcbiAgICBjb25zdHJ1Y3RvcihzY2VuZSkge1xuXG4gICAgICAgIGNvbnN0IGxpZ2h0RW50aXR5ID0gbmV3IEVudGl0eSgnQW1iaWVudExpZ2h0Jyk7XG4gICAgICAgIGxpZ2h0RW50aXR5LmFkZENvbXBvbmVudCgnbGlnaHQnLCB7XG4gICAgICAgICAgICB0eXBlOiAnZGlyZWN0aW9uYWwnLFxuICAgICAgICAgICAgYWZmZWN0RHluYW1pYzogdHJ1ZSxcbiAgICAgICAgICAgIGFmZmVjdExpZ2h0bWFwcGVkOiBmYWxzZSxcbiAgICAgICAgICAgIGJha2U6IHRydWUsXG4gICAgICAgICAgICBiYWtlTnVtU2FtcGxlczogc2NlbmUuYW1iaWVudEJha2VOdW1TYW1wbGVzLFxuICAgICAgICAgICAgY2FzdFNoYWRvd3M6IHRydWUsXG4gICAgICAgICAgICBub3JtYWxPZmZzZXRCaWFzOiAwLjA1LFxuICAgICAgICAgICAgc2hhZG93QmlhczogMC4yLFxuICAgICAgICAgICAgc2hhZG93RGlzdGFuY2U6IDEsICAvLyB0aGlzIGlzIHVwZGF0ZWQgZHVyaW5nIHNoYWRvdyBtYXAgcmVuZGVyaW5nXG4gICAgICAgICAgICBzaGFkb3dSZXNvbHV0aW9uOiAyMDQ4LFxuICAgICAgICAgICAgc2hhZG93VHlwZTogU0hBRE9XX1BDRjMsXG4gICAgICAgICAgICBjb2xvcjogQ29sb3IuV0hJVEUsXG4gICAgICAgICAgICBpbnRlbnNpdHk6IDEsXG4gICAgICAgICAgICBiYWtlRGlyOiBmYWxzZVxuICAgICAgICB9KTtcblxuICAgICAgICBzdXBlcihzY2VuZSwgbGlnaHRFbnRpdHkubGlnaHQubGlnaHQpO1xuICAgIH1cblxuICAgIGdldCBudW1WaXJ0dWFsTGlnaHRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5saWdodC5iYWtlTnVtU2FtcGxlcztcbiAgICB9XG5cbiAgICBwcmVwYXJlVmlydHVhbExpZ2h0KGluZGV4LCBudW1WaXJ0dWFsTGlnaHRzKSB7XG5cbiAgICAgICAgLy8gZGlyZWN0aW9uYWwgcG9pbnRzIGRvd24gdGhlIG5lZ2F0aXZlIFktYXhpc1xuICAgICAgICByYW5kb20uc3BoZXJlUG9pbnREZXRlcm1pbmlzdGljKF90ZW1wUG9pbnQsIGluZGV4LCBudW1WaXJ0dWFsTGlnaHRzLCAwLCB0aGlzLnNjZW5lLmFtYmllbnRCYWtlU3BoZXJlUGFydCk7XG4gICAgICAgIHRoaXMubGlnaHQuX25vZGUubG9va0F0KF90ZW1wUG9pbnQubXVsU2NhbGFyKC0xKSk7XG4gICAgICAgIHRoaXMubGlnaHQuX25vZGUucm90YXRlTG9jYWwoOTAsIDAsIDApO1xuXG4gICAgICAgIC8vIGludGVuc2l0eSBvZiB0aGUgdmlydHVhbCBsaWdodCBkZXBlbmRzIG9uIHRoZSBzcGhlcmUgcGFydCB1c2VkLCBhbmQgYWxzbyBuZWVkcyB0byB0YWtlIGludG8gYWNjb3VudFxuICAgICAgICAvLyB0aGUgZmFjdCBOIGRvdCBMIHVzZWQgdG8gYmFrZSBpdCBsb3dlcnMgdG90YWwgaW50ZW5zaXR5XG4gICAgICAgIGNvbnN0IGdhbW1hID0gdGhpcy5zY2VuZS5nYW1tYUNvcnJlY3Rpb24gPyAyLjIgOiAxO1xuICAgICAgICBjb25zdCBmdWxsSW50ZW5zaXR5ID0gMiAqIE1hdGguUEkgKiB0aGlzLnNjZW5lLmFtYmllbnRCYWtlU3BoZXJlUGFydDtcbiAgICAgICAgY29uc3QgbGluZWFySW50ZW5zaXR5ID0gTWF0aC5wb3coZnVsbEludGVuc2l0eSwgZ2FtbWEpO1xuICAgICAgICB0aGlzLmxpZ2h0LmludGVuc2l0eSA9IE1hdGgucG93KGxpbmVhckludGVuc2l0eSAvIG51bVZpcnR1YWxMaWdodHMsIDEgLyBnYW1tYSk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBCYWtlTGlnaHRBbWJpZW50IH07XG4iXSwibmFtZXMiOlsiX3RlbXBQb2ludCIsIlZlYzMiLCJCYWtlTGlnaHRBbWJpZW50IiwiQmFrZUxpZ2h0IiwiY29uc3RydWN0b3IiLCJzY2VuZSIsImxpZ2h0RW50aXR5IiwiRW50aXR5IiwiYWRkQ29tcG9uZW50IiwidHlwZSIsImFmZmVjdER5bmFtaWMiLCJhZmZlY3RMaWdodG1hcHBlZCIsImJha2UiLCJiYWtlTnVtU2FtcGxlcyIsImFtYmllbnRCYWtlTnVtU2FtcGxlcyIsImNhc3RTaGFkb3dzIiwibm9ybWFsT2Zmc2V0QmlhcyIsInNoYWRvd0JpYXMiLCJzaGFkb3dEaXN0YW5jZSIsInNoYWRvd1Jlc29sdXRpb24iLCJzaGFkb3dUeXBlIiwiU0hBRE9XX1BDRjMiLCJjb2xvciIsIkNvbG9yIiwiV0hJVEUiLCJpbnRlbnNpdHkiLCJiYWtlRGlyIiwibGlnaHQiLCJudW1WaXJ0dWFsTGlnaHRzIiwicHJlcGFyZVZpcnR1YWxMaWdodCIsImluZGV4IiwicmFuZG9tIiwic3BoZXJlUG9pbnREZXRlcm1pbmlzdGljIiwiYW1iaWVudEJha2VTcGhlcmVQYXJ0IiwiX25vZGUiLCJsb29rQXQiLCJtdWxTY2FsYXIiLCJyb3RhdGVMb2NhbCIsImdhbW1hIiwiZ2FtbWFDb3JyZWN0aW9uIiwiZnVsbEludGVuc2l0eSIsIk1hdGgiLCJQSSIsImxpbmVhckludGVuc2l0eSIsInBvdyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBT0EsTUFBTUEsVUFBVSxHQUFHLElBQUlDLElBQUosRUFBbkIsQ0FBQTs7QUFHQSxNQUFNQyxnQkFBTixTQUErQkMsU0FBL0IsQ0FBeUM7RUFDckNDLFdBQVcsQ0FBQ0MsS0FBRCxFQUFRO0FBRWYsSUFBQSxNQUFNQyxXQUFXLEdBQUcsSUFBSUMsTUFBSixDQUFXLGNBQVgsQ0FBcEIsQ0FBQTtBQUNBRCxJQUFBQSxXQUFXLENBQUNFLFlBQVosQ0FBeUIsT0FBekIsRUFBa0M7QUFDOUJDLE1BQUFBLElBQUksRUFBRSxhQUR3QjtBQUU5QkMsTUFBQUEsYUFBYSxFQUFFLElBRmU7QUFHOUJDLE1BQUFBLGlCQUFpQixFQUFFLEtBSFc7QUFJOUJDLE1BQUFBLElBQUksRUFBRSxJQUp3QjtNQUs5QkMsY0FBYyxFQUFFUixLQUFLLENBQUNTLHFCQUxRO0FBTTlCQyxNQUFBQSxXQUFXLEVBQUUsSUFOaUI7QUFPOUJDLE1BQUFBLGdCQUFnQixFQUFFLElBUFk7QUFROUJDLE1BQUFBLFVBQVUsRUFBRSxHQVJrQjtBQVM5QkMsTUFBQUEsY0FBYyxFQUFFLENBVGM7QUFVOUJDLE1BQUFBLGdCQUFnQixFQUFFLElBVlk7QUFXOUJDLE1BQUFBLFVBQVUsRUFBRUMsV0FYa0I7TUFZOUJDLEtBQUssRUFBRUMsS0FBSyxDQUFDQyxLQVppQjtBQWE5QkMsTUFBQUEsU0FBUyxFQUFFLENBYm1CO0FBYzlCQyxNQUFBQSxPQUFPLEVBQUUsS0FBQTtLQWRiLENBQUEsQ0FBQTtBQWlCQSxJQUFBLEtBQUEsQ0FBTXJCLEtBQU4sRUFBYUMsV0FBVyxDQUFDcUIsS0FBWixDQUFrQkEsS0FBL0IsQ0FBQSxDQUFBO0FBQ0gsR0FBQTs7QUFFbUIsRUFBQSxJQUFoQkMsZ0JBQWdCLEdBQUc7SUFDbkIsT0FBTyxJQUFBLENBQUtELEtBQUwsQ0FBV2QsY0FBbEIsQ0FBQTtBQUNILEdBQUE7O0FBRURnQixFQUFBQSxtQkFBbUIsQ0FBQ0MsS0FBRCxFQUFRRixnQkFBUixFQUEwQjtBQUd6Q0csSUFBQUEsTUFBTSxDQUFDQyx3QkFBUCxDQUFnQ2hDLFVBQWhDLEVBQTRDOEIsS0FBNUMsRUFBbURGLGdCQUFuRCxFQUFxRSxDQUFyRSxFQUF3RSxJQUFLdkIsQ0FBQUEsS0FBTCxDQUFXNEIscUJBQW5GLENBQUEsQ0FBQTs7QUFDQSxJQUFBLElBQUEsQ0FBS04sS0FBTCxDQUFXTyxLQUFYLENBQWlCQyxNQUFqQixDQUF3Qm5DLFVBQVUsQ0FBQ29DLFNBQVgsQ0FBcUIsQ0FBQyxDQUF0QixDQUF4QixDQUFBLENBQUE7O0lBQ0EsSUFBS1QsQ0FBQUEsS0FBTCxDQUFXTyxLQUFYLENBQWlCRyxXQUFqQixDQUE2QixFQUE3QixFQUFpQyxDQUFqQyxFQUFvQyxDQUFwQyxDQUFBLENBQUE7O0lBSUEsTUFBTUMsS0FBSyxHQUFHLElBQUtqQyxDQUFBQSxLQUFMLENBQVdrQyxlQUFYLEdBQTZCLEdBQTdCLEdBQW1DLENBQWpELENBQUE7SUFDQSxNQUFNQyxhQUFhLEdBQUcsQ0FBQSxHQUFJQyxJQUFJLENBQUNDLEVBQVQsR0FBYyxJQUFBLENBQUtyQyxLQUFMLENBQVc0QixxQkFBL0MsQ0FBQTtJQUNBLE1BQU1VLGVBQWUsR0FBR0YsSUFBSSxDQUFDRyxHQUFMLENBQVNKLGFBQVQsRUFBd0JGLEtBQXhCLENBQXhCLENBQUE7QUFDQSxJQUFBLElBQUEsQ0FBS1gsS0FBTCxDQUFXRixTQUFYLEdBQXVCZ0IsSUFBSSxDQUFDRyxHQUFMLENBQVNELGVBQWUsR0FBR2YsZ0JBQTNCLEVBQTZDLENBQUEsR0FBSVUsS0FBakQsQ0FBdkIsQ0FBQTtBQUNILEdBQUE7O0FBekNvQzs7OzsifQ==
