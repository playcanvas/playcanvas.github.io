/**
 * @license
 * PlayCanvas Engine v1.62.0 revision 818511d2b (DEBUG PROFILER)
 * Copyright 2011-2023 PlayCanvas Ltd. All rights reserved.
 */
import { Debug } from '../../../core/debug.js';
import { Component } from '../component.js';
import { ComponentSystem } from '../system.js';
import { AudioListenerComponent } from './component.js';
import { AudioListenerComponentData } from './data.js';

const _schema = ['enabled'];

/**
 * Component System for adding and removing {@link AudioListenerComponent} objects to Entities.
 *
 * @augments ComponentSystem
 */
class AudioListenerComponentSystem extends ComponentSystem {
  /**
   * Create a new AudioListenerComponentSystem instance.
   *
   * @param {import('../../app-base.js').AppBase} app - The application managing this system.
   * @hideconstructor
   */
  constructor(app) {
    super(app);
    this.id = 'audiolistener';
    this.ComponentType = AudioListenerComponent;
    this.DataType = AudioListenerComponentData;
    this.schema = _schema;
    this.manager = app.soundManager;
    Debug.assert(this.manager, "AudioSourceComponentSystem cannot be created witout sound manager");
    this.current = null;
    this.app.systems.on('update', this.onUpdate, this);
  }
  initializeComponentData(component, data, properties) {
    properties = ['enabled'];
    super.initializeComponentData(component, data, properties);
  }
  onUpdate(dt) {
    if (this.current) {
      const position = this.current.getPosition();
      this.manager.listener.setPosition(position);
      const wtm = this.current.getWorldTransform();
      this.manager.listener.setOrientation(wtm);
    }
  }
  destroy() {
    super.destroy();
    this.app.systems.off('update', this.onUpdate, this);
  }
}
Component._buildAccessors(AudioListenerComponent.prototype, _schema);

export { AudioListenerComponentSystem };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3lzdGVtLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvZnJhbWV3b3JrL2NvbXBvbmVudHMvYXVkaW8tbGlzdGVuZXIvc3lzdGVtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERlYnVnIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9kZWJ1Zy5qcyc7XG5cbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudC5qcyc7XG5pbXBvcnQgeyBDb21wb25lbnRTeXN0ZW0gfSBmcm9tICcuLi9zeXN0ZW0uanMnO1xuXG5pbXBvcnQgeyBBdWRpb0xpc3RlbmVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnQuanMnO1xuaW1wb3J0IHsgQXVkaW9MaXN0ZW5lckNvbXBvbmVudERhdGEgfSBmcm9tICcuL2RhdGEuanMnO1xuXG5jb25zdCBfc2NoZW1hID0gWydlbmFibGVkJ107XG5cbi8qKlxuICogQ29tcG9uZW50IFN5c3RlbSBmb3IgYWRkaW5nIGFuZCByZW1vdmluZyB7QGxpbmsgQXVkaW9MaXN0ZW5lckNvbXBvbmVudH0gb2JqZWN0cyB0byBFbnRpdGllcy5cbiAqXG4gKiBAYXVnbWVudHMgQ29tcG9uZW50U3lzdGVtXG4gKi9cbmNsYXNzIEF1ZGlvTGlzdGVuZXJDb21wb25lbnRTeXN0ZW0gZXh0ZW5kcyBDb21wb25lbnRTeXN0ZW0ge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBBdWRpb0xpc3RlbmVyQ29tcG9uZW50U3lzdGVtIGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtpbXBvcnQoJy4uLy4uL2FwcC1iYXNlLmpzJykuQXBwQmFzZX0gYXBwIC0gVGhlIGFwcGxpY2F0aW9uIG1hbmFnaW5nIHRoaXMgc3lzdGVtLlxuICAgICAqIEBoaWRlY29uc3RydWN0b3JcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihhcHApIHtcbiAgICAgICAgc3VwZXIoYXBwKTtcblxuICAgICAgICB0aGlzLmlkID0gJ2F1ZGlvbGlzdGVuZXInO1xuXG4gICAgICAgIHRoaXMuQ29tcG9uZW50VHlwZSA9IEF1ZGlvTGlzdGVuZXJDb21wb25lbnQ7XG4gICAgICAgIHRoaXMuRGF0YVR5cGUgPSBBdWRpb0xpc3RlbmVyQ29tcG9uZW50RGF0YTtcblxuICAgICAgICB0aGlzLnNjaGVtYSA9IF9zY2hlbWE7XG5cbiAgICAgICAgdGhpcy5tYW5hZ2VyID0gYXBwLnNvdW5kTWFuYWdlcjtcbiAgICAgICAgRGVidWcuYXNzZXJ0KHRoaXMubWFuYWdlciwgXCJBdWRpb1NvdXJjZUNvbXBvbmVudFN5c3RlbSBjYW5ub3QgYmUgY3JlYXRlZCB3aXRvdXQgc291bmQgbWFuYWdlclwiKTtcblxuICAgICAgICB0aGlzLmN1cnJlbnQgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuYXBwLnN5c3RlbXMub24oJ3VwZGF0ZScsIHRoaXMub25VcGRhdGUsIHRoaXMpO1xuICAgIH1cblxuICAgIGluaXRpYWxpemVDb21wb25lbnREYXRhKGNvbXBvbmVudCwgZGF0YSwgcHJvcGVydGllcykge1xuICAgICAgICBwcm9wZXJ0aWVzID0gWydlbmFibGVkJ107XG5cbiAgICAgICAgc3VwZXIuaW5pdGlhbGl6ZUNvbXBvbmVudERhdGEoY29tcG9uZW50LCBkYXRhLCBwcm9wZXJ0aWVzKTtcbiAgICB9XG5cbiAgICBvblVwZGF0ZShkdCkge1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50KSB7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHRoaXMuY3VycmVudC5nZXRQb3NpdGlvbigpO1xuICAgICAgICAgICAgdGhpcy5tYW5hZ2VyLmxpc3RlbmVyLnNldFBvc2l0aW9uKHBvc2l0aW9uKTtcblxuICAgICAgICAgICAgY29uc3Qgd3RtID0gdGhpcy5jdXJyZW50LmdldFdvcmxkVHJhbnNmb3JtKCk7XG4gICAgICAgICAgICB0aGlzLm1hbmFnZXIubGlzdGVuZXIuc2V0T3JpZW50YXRpb24od3RtKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHN1cGVyLmRlc3Ryb3koKTtcblxuICAgICAgICB0aGlzLmFwcC5zeXN0ZW1zLm9mZigndXBkYXRlJywgdGhpcy5vblVwZGF0ZSwgdGhpcyk7XG4gICAgfVxufVxuXG5Db21wb25lbnQuX2J1aWxkQWNjZXNzb3JzKEF1ZGlvTGlzdGVuZXJDb21wb25lbnQucHJvdG90eXBlLCBfc2NoZW1hKTtcblxuZXhwb3J0IHsgQXVkaW9MaXN0ZW5lckNvbXBvbmVudFN5c3RlbSB9O1xuIl0sIm5hbWVzIjpbIl9zY2hlbWEiLCJBdWRpb0xpc3RlbmVyQ29tcG9uZW50U3lzdGVtIiwiQ29tcG9uZW50U3lzdGVtIiwiY29uc3RydWN0b3IiLCJhcHAiLCJpZCIsIkNvbXBvbmVudFR5cGUiLCJBdWRpb0xpc3RlbmVyQ29tcG9uZW50IiwiRGF0YVR5cGUiLCJBdWRpb0xpc3RlbmVyQ29tcG9uZW50RGF0YSIsInNjaGVtYSIsIm1hbmFnZXIiLCJzb3VuZE1hbmFnZXIiLCJEZWJ1ZyIsImFzc2VydCIsImN1cnJlbnQiLCJzeXN0ZW1zIiwib24iLCJvblVwZGF0ZSIsImluaXRpYWxpemVDb21wb25lbnREYXRhIiwiY29tcG9uZW50IiwiZGF0YSIsInByb3BlcnRpZXMiLCJkdCIsInBvc2l0aW9uIiwiZ2V0UG9zaXRpb24iLCJsaXN0ZW5lciIsInNldFBvc2l0aW9uIiwid3RtIiwiZ2V0V29ybGRUcmFuc2Zvcm0iLCJzZXRPcmllbnRhdGlvbiIsImRlc3Ryb3kiLCJvZmYiLCJDb21wb25lbnQiLCJfYnVpbGRBY2Nlc3NvcnMiLCJwcm90b3R5cGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBUUEsTUFBTUEsT0FBTyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUE7O0FBRTNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQyw0QkFBNEIsU0FBU0MsZUFBZSxDQUFDO0FBQ3ZEO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNJQyxXQUFXLENBQUNDLEdBQUcsRUFBRTtJQUNiLEtBQUssQ0FBQ0EsR0FBRyxDQUFDLENBQUE7SUFFVixJQUFJLENBQUNDLEVBQUUsR0FBRyxlQUFlLENBQUE7SUFFekIsSUFBSSxDQUFDQyxhQUFhLEdBQUdDLHNCQUFzQixDQUFBO0lBQzNDLElBQUksQ0FBQ0MsUUFBUSxHQUFHQywwQkFBMEIsQ0FBQTtJQUUxQyxJQUFJLENBQUNDLE1BQU0sR0FBR1YsT0FBTyxDQUFBO0FBRXJCLElBQUEsSUFBSSxDQUFDVyxPQUFPLEdBQUdQLEdBQUcsQ0FBQ1EsWUFBWSxDQUFBO0lBQy9CQyxLQUFLLENBQUNDLE1BQU0sQ0FBQyxJQUFJLENBQUNILE9BQU8sRUFBRSxtRUFBbUUsQ0FBQyxDQUFBO0lBRS9GLElBQUksQ0FBQ0ksT0FBTyxHQUFHLElBQUksQ0FBQTtBQUVuQixJQUFBLElBQUksQ0FBQ1gsR0FBRyxDQUFDWSxPQUFPLENBQUNDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUE7QUFDdEQsR0FBQTtBQUVBQyxFQUFBQSx1QkFBdUIsQ0FBQ0MsU0FBUyxFQUFFQyxJQUFJLEVBQUVDLFVBQVUsRUFBRTtJQUNqREEsVUFBVSxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFeEIsS0FBSyxDQUFDSCx1QkFBdUIsQ0FBQ0MsU0FBUyxFQUFFQyxJQUFJLEVBQUVDLFVBQVUsQ0FBQyxDQUFBO0FBQzlELEdBQUE7RUFFQUosUUFBUSxDQUFDSyxFQUFFLEVBQUU7SUFDVCxJQUFJLElBQUksQ0FBQ1IsT0FBTyxFQUFFO0FBQ2QsTUFBQSxNQUFNUyxRQUFRLEdBQUcsSUFBSSxDQUFDVCxPQUFPLENBQUNVLFdBQVcsRUFBRSxDQUFBO01BQzNDLElBQUksQ0FBQ2QsT0FBTyxDQUFDZSxRQUFRLENBQUNDLFdBQVcsQ0FBQ0gsUUFBUSxDQUFDLENBQUE7QUFFM0MsTUFBQSxNQUFNSSxHQUFHLEdBQUcsSUFBSSxDQUFDYixPQUFPLENBQUNjLGlCQUFpQixFQUFFLENBQUE7TUFDNUMsSUFBSSxDQUFDbEIsT0FBTyxDQUFDZSxRQUFRLENBQUNJLGNBQWMsQ0FBQ0YsR0FBRyxDQUFDLENBQUE7QUFDN0MsS0FBQTtBQUNKLEdBQUE7QUFFQUcsRUFBQUEsT0FBTyxHQUFHO0lBQ04sS0FBSyxDQUFDQSxPQUFPLEVBQUUsQ0FBQTtBQUVmLElBQUEsSUFBSSxDQUFDM0IsR0FBRyxDQUFDWSxPQUFPLENBQUNnQixHQUFHLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQ2QsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFBO0FBQ3ZELEdBQUE7QUFDSixDQUFBO0FBRUFlLFNBQVMsQ0FBQ0MsZUFBZSxDQUFDM0Isc0JBQXNCLENBQUM0QixTQUFTLEVBQUVuQyxPQUFPLENBQUM7Ozs7In0=
