{"0": {
    "doc": "Getting Started",
    "title": "Getting Started",
    "content": "To build the component library, run the following in the projects directory: . npm install --save-dev @playcanvas/observer npm install --save-dev @playcanvas/pcui . This will include the entire pcui library in your project. The various parts of the library will be available to import from that package at the following locations: . | Observers: @playcanvas/observer | ES6 Components: @playcanvas/pcui/pcui.mjs | React Components: @playcanvas/pcui/pcui-react.mjs | . You can then import the ES6 components into your own .js files and use them as follows: . import Button from '@playcanvas/pcui/Button'; const helloWorldButton = new Button({ text: 'Click Me' }); document.body.appendChild(helloWorldButton.dom); . This will result in your first component being appended to your document body! . External Dependencies . You will need to use a bundler like Rollup to build your project. If you do not wish to use a bundler then use the bundle builds instead: . | ES6 Components under: dist/bundle/%component$/index.mjs | React Components under: dist/bundle/%component$/component.mjs | . ",
    "url": "https://playcanvas.github.io/pcui/getting-started/",
    "relUrl": "/getting-started/"
  },"1": {
    "doc": "React",
    "title": "React",
    "content": "If you are more familar with react, you can import react elements into your own .jsx files and use them as follows: . import ReactDOM from 'react-dom'; import TextInput from '@playcanvas/pcui/TextInput/component'; ReactDOM.render( &lt;TextInput /&gt;, document.body ); . Which will render a single text input to the documents body element. For more extensive examples, see the UI examples section. ",
    "url": "https://playcanvas.github.io/pcui/react/",
    "relUrl": "/react/"
  },"2": {
    "doc": "Data Binding",
    "title": "Data Binding",
    "content": "The pcui library offers a data binding layer that can be used to synchonise data across multiple components. It offers two way binding to a given observer object, so updates made in a component are reflected in the observers data and distributed out to all other subscribed components. ",
    "url": "https://playcanvas.github.io/pcui/data-binding/",
    "relUrl": "/data-binding/"
  },"3": {
    "doc": "Components",
    "title": "Components",
    "content": " ",
    "url": "https://playcanvas.github.io/pcui/components/",
    "relUrl": "/components/"
  },"4": {
    "doc": "History",
    "title": "History Example",
    "content": "In this example you can interact with the input slider to update the progress bar. Any actions you make can be undone / redone using the history buttons. Code . import React, { useState } from 'react'; import ReactDOM from 'react-dom'; import { Observer, History } from '@playcanvas/observer'; import Container from '@playcanvas/pcui/Container/component'; import Button from '@playcanvas/pcui/Button/component'; import SliderInput from '@playcanvas/pcui/SliderInput/component'; import Progress from '@playcanvas/pcui/Progress/component'; import Label from '@playcanvas/pcui/Label/component'; import BindingTwoWay from '@playcanvas/pcui/BindingTwoWay'; const observer = new Observer({ progress: 0 }); const history = new History(); export const HistoryExample = (props) =&gt; { const [ canUndo, setCanUndo ] = useState(false); const [ canRedo, setCanRedo ] = useState(false); const [ historyLabel, setHistoryLabel ] = useState(''); history.on('canUndo', setCanUndo); history.on('canRedo', setCanRedo); history.on('add', (name) =&gt; setHistoryLabel(`add action: ${name}`)); history.on('undo', (name) =&gt; setHistoryLabel(`undo action: ${name}`)); history.on('redo', (name) =&gt; setHistoryLabel(`redo action: ${name}`)); const linkProgress = { observer, path: 'progress' }; return ( &lt;Container flex&gt; &lt;Progress binding={new BindingTwoWay({ history })} link={linkProgress} /&gt; &lt;Container&gt; &lt;/Container&gt; &lt;Container&gt; &lt;SliderInput min={0} sliderMin={0} max={100} sliderMax={100} binding={new BindingTwoWay({ history })} link={linkProgress} /&gt; &lt;/Container&gt; &lt;Container&gt; &lt;Button text=\"Undo\" enabled={canUndo} icon=\"E114\" onClick={() =&gt; history.undo()} /&gt; &lt;Button text=\"Redo\" enabled={canRedo} icon=\"E115\" onClick={() =&gt; history.redo()} /&gt; &lt;Label text={historyLabel} /&gt; &lt;/Container&gt; &lt;/Container&gt; ); }; ReactDOM.render(&lt;HistoryExample /&gt;, document.body); . ",
    "url": "https://playcanvas.github.io/pcui/examples/history/#history-example",
    "relUrl": "/examples/history/#history-example"
  },"5": {
    "doc": "History",
    "title": "History",
    "content": " ",
    "url": "https://playcanvas.github.io/pcui/examples/history/",
    "relUrl": "/examples/history/"
  },"6": {
    "doc": "Todo",
    "title": "Todo List Example",
    "content": "The todo list below allows you to add items to the list, toggle their ‘done’ status and filter items by that status. Code . import React, { useState } from 'react'; import ReactDOM from 'react-dom'; import { Observer } from '@playcanvas/observer'; import Container from '@playcanvas/pcui/Container/component'; import TextInput from '@playcanvas/pcui/TextInput/component'; import BooleanInput from '@playcanvas/pcui/BooleanInput/component'; import Label from '@playcanvas/pcui/Label/component'; import SelectInput from '@playcanvas/pcui/SelectInput/component'; import Button from '@playcanvas/pcui/Button/component'; import BindingTwoWay from '@playcanvas/pcui/BindingTwoWay'; const observer = new Observer({ input: '', items: {} }); export const TodoList = (props) =&gt; { const [ items, setItems ] = useState({}); const [ listFilter, setListFilter ] = useState(0); observer.on('items:set', setItems); const addItem = (value) =&gt; { const items = observer.get('items'); if (value === '') return; items[Date.now()] = { done: false, text: value }; observer.set('input', ''); observer.set('items', items); }; const removeItem = (key) =&gt; { const items = observer.get('items'); delete items[key]; observer.set('items', items); }; const toggleItem = (key) =&gt; { const items = observer.get('items'); items[key].done = !items[key].done; observer.set('items', items); }; const textInputLink = { observer, path: 'input' }; return ( &lt;Container class='todo'&gt; &lt;TextInput blurOnEnter={false} placeholder='enter item' binding={new BindingTwoWay()} link={textInputLink} onChange={addItem}/&gt; &lt;SelectInput type=\"number\" options={[{v: 0, t: 'Show all items'}, {v: 1, t: 'Show active items'}, {v: 2, t: 'Show done items'}]} onChange={setListFilter} /&gt; &lt;Container&gt; {Object.keys(items).map(key =&gt; { var item = items[key]; if (listFilter !== 0) { if ((listFilter === 1 &amp;&amp; item.done) || (listFilter === 2 &amp;&amp; !item.done)) return null; } return [ &lt;Container key={key} class={'todo-item'}&gt; &lt;BooleanInput onChange={() =&gt; toggleItem(key)} value={item.done} /&gt; &lt;Label text={item.text}/&gt; &lt;Button icon='E124' text='' size='small' onClick={() =&gt; removeItem(key)} /&gt; &lt;/Container&gt; ]; })} &lt;/Container&gt; &lt;/Container&gt; ); }; ReactDOM.render(&lt;Todolist /&gt;, document.body); . ",
    "url": "https://playcanvas.github.io/pcui/examples/todo/#todo-list-example",
    "relUrl": "/examples/todo/#todo-list-example"
  },"7": {
    "doc": "Todo",
    "title": "Todo",
    "content": " ",
    "url": "https://playcanvas.github.io/pcui/examples/todo/",
    "relUrl": "/examples/todo/"
  },"8": {
    "doc": "UI Examples",
    "title": "UI Examples",
    "content": " ",
    "url": "https://playcanvas.github.io/pcui/examples/",
    "relUrl": "/examples/"
  },"9": {
    "doc": "Storybook",
    "title": "Storybook",
    "content": "The storybook showcases all of PCUI’s components in a single app. Each component can be adjusted using its documented properties. Their behaviour can then be tested each components canvas. Click here to view the storybook. ",
    "url": "https://playcanvas.github.io/pcui/storybook-docs/",
    "relUrl": "/storybook-docs/"
  },"10": {
    "doc": "ArrayInput",
    "title": "ArrayInput",
    "content": " ",
    "url": "https://playcanvas.github.io/pcui/components/array-input/",
    "relUrl": "/components/array-input/"
  },"11": {
    "doc": "BooleanInput",
    "title": "BooleanInput",
    "content": " ",
    "url": "https://playcanvas.github.io/pcui/components/boolean-input/",
    "relUrl": "/components/boolean-input/"
  },"12": {
    "doc": "Button",
    "title": "Button",
    "content": " ",
    "url": "https://playcanvas.github.io/pcui/components/button/",
    "relUrl": "/components/button/"
  },"13": {
    "doc": "Code",
    "title": "Code",
    "content": " ",
    "url": "https://playcanvas.github.io/pcui/components/code/",
    "relUrl": "/components/code/"
  },"14": {
    "doc": "Container",
    "title": "Container",
    "content": " ",
    "url": "https://playcanvas.github.io/pcui/components/container/",
    "relUrl": "/components/container/"
  },"15": {
    "doc": "ContextMenu",
    "title": "ContextMenu",
    "content": " ",
    "url": "https://playcanvas.github.io/pcui/components/context-menu/",
    "relUrl": "/components/context-menu/"
  },"16": {
    "doc": "Divider",
    "title": "Divider",
    "content": " ",
    "url": "https://playcanvas.github.io/pcui/components/divider/",
    "relUrl": "/components/divider/"
  },"17": {
    "doc": "InfoBox",
    "title": "InfoBox",
    "content": " ",
    "url": "https://playcanvas.github.io/pcui/components/info-box/",
    "relUrl": "/components/info-box/"
  },"18": {
    "doc": "Label",
    "title": "Label",
    "content": " ",
    "url": "https://playcanvas.github.io/pcui/components/label/",
    "relUrl": "/components/label/"
  },"19": {
    "doc": "NumericInput",
    "title": "NumericInput",
    "content": " ",
    "url": "https://playcanvas.github.io/pcui/components/numeric-input/",
    "relUrl": "/components/numeric-input/"
  },"20": {
    "doc": "Overlay",
    "title": "Overlay",
    "content": " ",
    "url": "https://playcanvas.github.io/pcui/components/overlay/",
    "relUrl": "/components/overlay/"
  },"21": {
    "doc": "Panel",
    "title": "Panel",
    "content": " ",
    "url": "https://playcanvas.github.io/pcui/components/panel/",
    "relUrl": "/components/panel/"
  },"22": {
    "doc": "Progress",
    "title": "Progress",
    "content": " ",
    "url": "https://playcanvas.github.io/pcui/components/progress/",
    "relUrl": "/components/progress/"
  },"23": {
    "doc": "SelectInput",
    "title": "SelectInput",
    "content": " ",
    "url": "https://playcanvas.github.io/pcui/components/select-input/",
    "relUrl": "/components/select-input/"
  },"24": {
    "doc": "SliderInput",
    "title": "SliderInput",
    "content": " ",
    "url": "https://playcanvas.github.io/pcui/components/slider-input/",
    "relUrl": "/components/slider-input/"
  },"25": {
    "doc": "Spinner",
    "title": "Spinner",
    "content": " ",
    "url": "https://playcanvas.github.io/pcui/components/spinner/",
    "relUrl": "/components/spinner/"
  },"26": {
    "doc": "TextAreaInput",
    "title": "TextAreaInput",
    "content": " ",
    "url": "https://playcanvas.github.io/pcui/components/text-area-input/",
    "relUrl": "/components/text-area-input/"
  },"27": {
    "doc": "TextInput",
    "title": "TextInput",
    "content": " ",
    "url": "https://playcanvas.github.io/pcui/components/text-input/",
    "relUrl": "/components/text-input/"
  },"28": {
    "doc": "TreeView",
    "title": "TreeView",
    "content": " ",
    "url": "https://playcanvas.github.io/pcui/components/tree-view/",
    "relUrl": "/components/tree-view/"
  },"29": {
    "doc": "VectorInput",
    "title": "VectorInput",
    "content": " ",
    "url": "https://playcanvas.github.io/pcui/components/vector-input/",
    "relUrl": "/components/vector-input/"
  },"30": {
    "doc": "Using Observers",
    "title": "Using Observers",
    "content": "A simple use case is shown below. In this example the created label will start with Hello World as it’s text value. When a user enters a value into the text input, the label will be updated with the new value. How To . First import the components and binding classes. import { Observer } from '@playcanvas/observer'; import Label from '@playcanvas/pcui/Label'; import TextInput from '@playcanvas/pcui/TextInput'; import BindingObserversToElement from '@playcanvas/pcui/BindingObserversToElement'; import BindingElementToObservers from '@playcanvas/pcui/BindingElementToObservers'; . Create a new observer for an object which contains a text string. const observer = new Observer({text: 'Hello World'}); . Create a label which will listen to updates from the observer. const label = new Label({ binding: new BindingObserversToElement() }); . Link the observer to the label, telling it to use the text variable as its value. label.link(observer, 'text'); . Create a text input which will send updates to the observer. const textInput = new TextInput({ binding: new BindingElementToObservers() }); . Link the observer to the label, telling it to set the text variable on change. textInput.link(observer, 'text'); . ",
    "url": "https://playcanvas.github.io/pcui/data-binding/using-observers/",
    "relUrl": "/data-binding/using-observers/"
  },"31": {
    "doc": "Two Way Binding",
    "title": "Two Way Binding Example",
    "content": "Observers can also be bound bi-directionally, in which case an element can both send and receive updates through its observer. The following example shows a two way binding between two text inputs, where either input can update the value of the other. It’s been written in react to showcase binding with react components. How To . First import the components and binding classes. import { Observer } from '@playcanvas/observer'; import TextInput from '@playcanvas/pcui/TextInput/component'; import BindingTwoWay from '@playcanvas/pcui/BindingTwoWay'; . Then create a new observer for a an object which contains a text string. const observer = new Observer({text: 'Hello World'}); . Create two text inputs, which can both send and receive updates through the linked observer. This style of binding is defined through the use of the BindingTwoWay object which is passed as a property. const link = { observer, path: 'text' }; const TextInput1 = () =&gt; &lt;TextInput binding={new BindingTwoWay()} link={link} /&gt; const TextInput2 = () =&gt; &lt;TextInput binding={new BindingTwoWay()} link={link} /&gt; . ",
    "url": "https://playcanvas.github.io/pcui/data-binding/two-way-binding/#two-way-binding-example",
    "relUrl": "/data-binding/two-way-binding/#two-way-binding-example"
  },"32": {
    "doc": "Two Way Binding",
    "title": "Two Way Binding",
    "content": " ",
    "url": "https://playcanvas.github.io/pcui/data-binding/two-way-binding/",
    "relUrl": "/data-binding/two-way-binding/"
  }
}
