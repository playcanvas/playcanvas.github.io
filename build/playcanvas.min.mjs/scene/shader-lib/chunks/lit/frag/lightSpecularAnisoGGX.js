var t="\n// Anisotropic GGX\nfloat calcLightSpecular(float gloss, vec3 worldNormal, vec3 viewDir, vec3 h, vec3 lightDirNorm, mat3 tbn) {\n\t\tfloat PI = 3.141592653589793;\n\t\tfloat roughness = max((1.0 - gloss) * (1.0 - gloss), 0.001);\n\t\tfloat anisotropy = material_anisotropy * roughness;\n \n\t\tfloat at = max((roughness + anisotropy), roughness / 4.0);\n\t\tfloat ab = max((roughness - anisotropy), roughness / 4.0);\n\n\t\tfloat NoH = dot(worldNormal, h);\n\t\tfloat ToH = dot(tbn[0], h);\n\t\tfloat BoH = dot(tbn[1], h);\n\n\t\tfloat a2 = at * ab;\n\t\tvec3 v = vec3(ab * ToH, at * BoH, a2 * NoH);\n\t\tfloat v2 = dot(v, v);\n\t\tfloat w2 = a2 / v2;\n\t\tfloat D = a2 * w2 * w2 * (1.0 / PI);\n\n\t\tfloat ToV = dot(tbn[0], viewDir);\n\t\tfloat BoV = dot(tbn[1], viewDir);\n\t\tfloat ToL = dot(tbn[0], -lightDirNorm);\n\t\tfloat BoL = dot(tbn[1], -lightDirNorm);\n\t\tfloat NoV = dot(worldNormal, viewDir);\n\t\tfloat NoL = dot(worldNormal, -lightDirNorm);\n\n\t\tfloat lambdaV = NoL * length(vec3(at * ToV, ab * BoV, NoV));\n\t\tfloat lambdaL = NoV * length(vec3(at * ToL, ab * BoL, NoL));\n\t\tfloat G = 0.5 / (lambdaV + lambdaL);\n\n\t\treturn D * G;\n}\n\nfloat getLightSpecular(vec3 h, vec3 reflDir, vec3 worldNormal, vec3 viewDir, vec3 lightDirNorm, float gloss, mat3 tbn) {\n\t\treturn calcLightSpecular(gloss, worldNormal, viewDir, h, lightDirNorm, tbn);\n}\n";export{t as default};
