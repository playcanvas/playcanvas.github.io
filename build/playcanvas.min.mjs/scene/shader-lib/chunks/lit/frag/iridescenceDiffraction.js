var t="\nuniform float material_iridescenceRefractionIndex;\n\n#ifndef PI\n#define PI 3.14159265\n#endif\n\nfloat iridescence_iorToFresnel(float transmittedIor, float incidentIor) {\n\t\treturn pow((transmittedIor - incidentIor) / (transmittedIor + incidentIor), 2.0);\n}\n\nvec3 iridescence_iorToFresnel(vec3 transmittedIor, float incidentIor) {\n\t\treturn pow((transmittedIor - vec3(incidentIor)) / (transmittedIor + vec3(incidentIor)), vec3(2.0));\n}\n\nvec3 iridescence_fresnelToIor(vec3 f0) {\n\t\tvec3 sqrtF0 = sqrt(f0);\n\t\treturn (vec3(1.0) + sqrtF0) / (vec3(1.0) - sqrtF0);\n}\n\nvec3 iridescence_sensitivity(float opd, vec3 shift) {\n\t\tfloat phase = 2.0 * PI * opd * 1.0e-9;\n\t\tconst vec3 val = vec3(5.4856e-13, 4.4201e-13, 5.2481e-13);\n\t\tconst vec3 pos = vec3(1.6810e+06, 1.7953e+06, 2.2084e+06);\n\t\tconst vec3 var = vec3(4.3278e+09, 9.3046e+09, 6.6121e+09);\n\n\t\tvec3 xyz = val * sqrt(2.0 * PI * var) * cos(pos * phase + shift) * exp(-pow(phase, 2.0) * var);\n\t\txyz.x += 9.7470e-14 * sqrt(2.0 * PI * 4.5282e+09) * cos(2.2399e+06 * phase + shift[0]) * exp(-4.5282e+09 * pow(phase, 2.0));\n\t\txyz /= vec3(1.0685e-07);\n\n\t\tconst mat3 XYZ_TO_REC709 = mat3(\n\t\t\t\t3.2404542, -0.9692660,  0.0556434,\n\t\t\t -1.5371385,  1.8760108, -0.2040259,\n\t\t\t -0.4985314,  0.0415560,  1.0572252\n\t\t);\n\n\t\treturn XYZ_TO_REC709 * xyz;\n}\n\nfloat iridescence_fresnel(float cosTheta, float f0) {\n\t\tfloat x = clamp(1.0 - cosTheta, 0.0, 1.0);\n\t\tfloat x2 = x * x;\n\t\tfloat x5 = x * x2 * x2;\n\t\treturn f0 + (1.0 - f0) * x5;\n} \n\nvec3 iridescence_fresnel(float cosTheta, vec3 f0) {\n\t\tfloat x = clamp(1.0 - cosTheta, 0.0, 1.0);\n\t\tfloat x2 = x * x;\n\t\tfloat x5 = x * x2 * x2; \n\t\treturn f0 + (vec3(1.0) - f0) * x5;\n}\n\nvec3 calcIridescence(float outsideIor, float cosTheta, vec3 base_f0, float iridescenceThickness) {\n\n\t\tfloat iridescenceIor = mix(outsideIor, material_iridescenceRefractionIndex, smoothstep(0.0, 0.03, iridescenceThickness));\n\t\tfloat sinTheta2Sq = pow(outsideIor / iridescenceIor, 2.0) * (1.0 - pow(cosTheta, 2.0));\n\t\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\n\n\t\tif (cosTheta2Sq < 0.0) {\n\t\t\t\treturn vec3(1.0);\n\t\t}\n\n\t\tfloat cosTheta2 = sqrt(cosTheta2Sq);\n\n\t\tfloat r0 = iridescence_iorToFresnel(iridescenceIor, outsideIor);\n\t\tfloat r12 = iridescence_fresnel(cosTheta, r0);\n\t\tfloat r21 = r12;\n\t\tfloat t121 = 1.0 - r12;\n\n\t\tfloat phi12 = iridescenceIor < outsideIor ? PI : 0.0;\n\t\tfloat phi21 = PI - phi12;\n\n\t\tvec3 baseIor = iridescence_fresnelToIor(base_f0 + vec3(0.0001));\n\t\tvec3 r1 = iridescence_iorToFresnel(baseIor, iridescenceIor);\n\t\tvec3 r23 = iridescence_fresnel(cosTheta2, r1);\n\n\t\tvec3 phi23 = vec3(0.0);\n\t\tif (baseIor[0] < iridescenceIor) phi23[0] = PI;\n\t\tif (baseIor[1] < iridescenceIor) phi23[1] = PI;\n\t\tif (baseIor[2] < iridescenceIor) phi23[2] = PI;\n\t\tfloat opd = 2.0 * iridescenceIor * iridescenceThickness * cosTheta2;\n\t\tvec3 phi = vec3(phi21) + phi23; \n\n\t\tvec3 r123Sq = clamp(r12 * r23, 1e-5, 0.9999);\n\t\tvec3 r123 = sqrt(r123Sq);\n\t\tvec3 rs = pow(t121, 2.0) * r23 / (1.0 - r123Sq);\n\n\t\tvec3 c0 = r12 + rs;\n\t\tvec3 i = c0;\n\n\t\tvec3 cm = rs - t121;\n\t\tfor (int m = 1; m <= 2; m++) {\n\t\t\t\tcm *= r123;\n\t\t\t\tvec3 sm = 2.0 * iridescence_sensitivity(float(m) * opd, float(m) * phi);\n\t\t\t\ti += cm * sm;\n\t\t}\n\t\treturn max(i, vec3(0.0));\n}\n\nvec3 getIridescence(float cosTheta, vec3 specularity, inout IridescenceArgs iridescence) {\n\t\treturn calcIridescence(1.0, cosTheta, specularity, iridescence.thickness);\n}\n";export{t as default};
