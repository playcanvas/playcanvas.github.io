import{BoundingBox as t}from"../../shape/bounding-box.js";import{BoundingSphere as s}from"../../shape/bounding-sphere.js";import{LIGHTTYPE_DIRECTIONAL as e}from"../constants.js";const i=new s;class a{constructor(s,a){this.scene=s,this.light=a,this.store(),a.numCascades=1,a.type!==e&&(a._node.getWorldTransform(),a.getBoundingSphere(i),this.lightBounds=new t,this.lightBounds.center.copy(i.center),this.lightBounds.halfExtents.set(i.radius,i.radius,i.radius))}store(){this.mask=this.light.mask,this.shadowUpdateMode=this.light.shadowUpdateMode,this.enabled=this.light.enabled,this.intensity=this.light.intensity,this.rotation=this.light._node.getLocalRotation().clone(),this.numCascades=this.light.numCascades}restore(){const t=this.light;t.mask=this.mask,t.shadowUpdateMode=this.shadowUpdateMode,t.enabled=this.enabled,t.intensity=this.intensity,t._node.setLocalRotation(this.rotation),t.numCascades=this.numCascades}startBake(){this.light.enabled=!0,this.light._destroyShadowMap()}endBake(t){const s=this.light;s.enabled=!1,s.shadowMap&&(s.shadowMap.cached&&t.add(s,s.shadowMap),s.shadowMap=null)}}export{a as BakeLight};
