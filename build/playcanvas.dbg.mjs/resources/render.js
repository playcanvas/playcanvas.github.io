/**
 * @license
 * PlayCanvas Engine v1.57.1 revision 256dd83c2 (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { Render } from '../scene/render.js';

function onContainerAssetLoaded(containerAsset) {
  const renderAsset = this;
  if (!renderAsset.resource) return;
  const containerResource = containerAsset.resource;
  const render = containerResource.renders && containerResource.renders[renderAsset.data.renderIndex];

  if (render) {
    renderAsset.resource.meshes = render.resource.meshes;
  }
}

function onContainerAssetAdded(containerAsset) {
  const renderAsset = this;
  renderAsset.registry.off('load:' + containerAsset.id, onContainerAssetLoaded, renderAsset);
  renderAsset.registry.on('load:' + containerAsset.id, onContainerAssetLoaded, renderAsset);
  renderAsset.registry.off('remove:' + containerAsset.id, onContainerAssetRemoved, renderAsset);
  renderAsset.registry.once('remove:' + containerAsset.id, onContainerAssetRemoved, renderAsset);

  if (!containerAsset.resource) {
    renderAsset.registry.load(containerAsset);
  } else {
    onContainerAssetLoaded.call(renderAsset, containerAsset);
  }
}

function onContainerAssetRemoved(containerAsset) {
  const renderAsset = this;
  renderAsset.registry.off('load:' + containerAsset.id, onContainerAssetLoaded, renderAsset);

  if (renderAsset.resource) {
    renderAsset.resource.destroy();
  }
}

class RenderHandler {
  constructor(app) {
    this.handlerType = "render";
    this._registry = app.assets;
  }

  load(url, callback, asset) {}

  open(url, data) {
    return new Render();
  }

  patch(asset, registry) {
    if (!asset.data.containerAsset) return;
    const containerAsset = registry.get(asset.data.containerAsset);

    if (!containerAsset) {
      registry.once('add:' + asset.data.containerAsset, onContainerAssetAdded, asset);
      return;
    }

    onContainerAssetAdded.call(asset, containerAsset);
  }

}

export { RenderHandler };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcmVzb3VyY2VzL3JlbmRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZW5kZXIgfSBmcm9tICcuLi9zY2VuZS9yZW5kZXIuanMnO1xuXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi4vZnJhbWV3b3JrL2FwcC1iYXNlLmpzJykuQXBwQmFzZX0gQXBwQmFzZSAqL1xuLyoqIEB0eXBlZGVmIHtpbXBvcnQoJy4vaGFuZGxlci5qcycpLlJlc291cmNlSGFuZGxlcn0gUmVzb3VyY2VIYW5kbGVyICovXG5cbi8vIFRoZSBzY29wZSBvZiB0aGlzIGZ1bmN0aW9uIGlzIHRoZSByZW5kZXIgYXNzZXRcbmZ1bmN0aW9uIG9uQ29udGFpbmVyQXNzZXRMb2FkZWQoY29udGFpbmVyQXNzZXQpIHtcbiAgICBjb25zdCByZW5kZXJBc3NldCA9IHRoaXM7XG4gICAgaWYgKCFyZW5kZXJBc3NldC5yZXNvdXJjZSkgcmV0dXJuO1xuXG4gICAgY29uc3QgY29udGFpbmVyUmVzb3VyY2UgPSBjb250YWluZXJBc3NldC5yZXNvdXJjZTtcblxuICAgIGNvbnN0IHJlbmRlciA9IGNvbnRhaW5lclJlc291cmNlLnJlbmRlcnMgJiYgY29udGFpbmVyUmVzb3VyY2UucmVuZGVyc1tyZW5kZXJBc3NldC5kYXRhLnJlbmRlckluZGV4XTtcbiAgICBpZiAocmVuZGVyKSB7XG4gICAgICAgIHJlbmRlckFzc2V0LnJlc291cmNlLm1lc2hlcyA9IHJlbmRlci5yZXNvdXJjZS5tZXNoZXM7XG4gICAgfVxufVxuXG4vLyBUaGUgc2NvcGUgb2YgdGhpcyBmdW5jdGlvbiBpcyB0aGUgcmVuZGVyIGFzc2V0XG5mdW5jdGlvbiBvbkNvbnRhaW5lckFzc2V0QWRkZWQoY29udGFpbmVyQXNzZXQpIHtcbiAgICBjb25zdCByZW5kZXJBc3NldCA9IHRoaXM7XG5cbiAgICByZW5kZXJBc3NldC5yZWdpc3RyeS5vZmYoJ2xvYWQ6JyArIGNvbnRhaW5lckFzc2V0LmlkLCBvbkNvbnRhaW5lckFzc2V0TG9hZGVkLCByZW5kZXJBc3NldCk7XG4gICAgcmVuZGVyQXNzZXQucmVnaXN0cnkub24oJ2xvYWQ6JyArIGNvbnRhaW5lckFzc2V0LmlkLCBvbkNvbnRhaW5lckFzc2V0TG9hZGVkLCByZW5kZXJBc3NldCk7XG4gICAgcmVuZGVyQXNzZXQucmVnaXN0cnkub2ZmKCdyZW1vdmU6JyArIGNvbnRhaW5lckFzc2V0LmlkLCBvbkNvbnRhaW5lckFzc2V0UmVtb3ZlZCwgcmVuZGVyQXNzZXQpO1xuICAgIHJlbmRlckFzc2V0LnJlZ2lzdHJ5Lm9uY2UoJ3JlbW92ZTonICsgY29udGFpbmVyQXNzZXQuaWQsIG9uQ29udGFpbmVyQXNzZXRSZW1vdmVkLCByZW5kZXJBc3NldCk7XG5cbiAgICBpZiAoIWNvbnRhaW5lckFzc2V0LnJlc291cmNlKSB7XG4gICAgICAgIHJlbmRlckFzc2V0LnJlZ2lzdHJ5LmxvYWQoY29udGFpbmVyQXNzZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG9uQ29udGFpbmVyQXNzZXRMb2FkZWQuY2FsbChyZW5kZXJBc3NldCwgY29udGFpbmVyQXNzZXQpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gb25Db250YWluZXJBc3NldFJlbW92ZWQoY29udGFpbmVyQXNzZXQpIHtcbiAgICBjb25zdCByZW5kZXJBc3NldCA9IHRoaXM7XG5cbiAgICByZW5kZXJBc3NldC5yZWdpc3RyeS5vZmYoJ2xvYWQ6JyArIGNvbnRhaW5lckFzc2V0LmlkLCBvbkNvbnRhaW5lckFzc2V0TG9hZGVkLCByZW5kZXJBc3NldCk7XG5cbiAgICBpZiAocmVuZGVyQXNzZXQucmVzb3VyY2UpIHtcbiAgICAgICAgcmVuZGVyQXNzZXQucmVzb3VyY2UuZGVzdHJveSgpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBSZXNvdXJjZSBoYW5kbGVyIHVzZWQgZm9yIGxvYWRpbmcge0BsaW5rIFJlbmRlcn0gcmVzb3VyY2VzLlxuICpcbiAqIEBpbXBsZW1lbnRzIHtSZXNvdXJjZUhhbmRsZXJ9XG4gKi9cbmNsYXNzIFJlbmRlckhhbmRsZXIge1xuICAgIC8qKlxuICAgICAqIFR5cGUgb2YgdGhlIHJlc291cmNlIHRoZSBoYW5kbGVyIGhhbmRsZXMuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIGhhbmRsZXJUeXBlID0gXCJyZW5kZXJcIjtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBSZW5kZXJIYW5kbGVyIGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtBcHBCYXNlfSBhcHAgLSBUaGUgcnVubmluZyB7QGxpbmsgQXBwQmFzZX0uXG4gICAgICogQGhpZGVjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGFwcCkge1xuICAgICAgICB0aGlzLl9yZWdpc3RyeSA9IGFwcC5hc3NldHM7XG4gICAgfVxuXG4gICAgbG9hZCh1cmwsIGNhbGxiYWNrLCBhc3NldCkge1xuICAgIH1cblxuICAgIG9wZW4odXJsLCBkYXRhKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVuZGVyKCk7XG4gICAgfVxuXG4gICAgcGF0Y2goYXNzZXQsIHJlZ2lzdHJ5KSB7XG4gICAgICAgIGlmICghYXNzZXQuZGF0YS5jb250YWluZXJBc3NldClcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICBjb25zdCBjb250YWluZXJBc3NldCA9IHJlZ2lzdHJ5LmdldChhc3NldC5kYXRhLmNvbnRhaW5lckFzc2V0KTtcbiAgICAgICAgaWYgKCFjb250YWluZXJBc3NldCkge1xuICAgICAgICAgICAgcmVnaXN0cnkub25jZSgnYWRkOicgKyBhc3NldC5kYXRhLmNvbnRhaW5lckFzc2V0LCBvbkNvbnRhaW5lckFzc2V0QWRkZWQsIGFzc2V0KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIG9uQ29udGFpbmVyQXNzZXRBZGRlZC5jYWxsKGFzc2V0LCBjb250YWluZXJBc3NldCk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBSZW5kZXJIYW5kbGVyIH07XG4iXSwibmFtZXMiOlsib25Db250YWluZXJBc3NldExvYWRlZCIsImNvbnRhaW5lckFzc2V0IiwicmVuZGVyQXNzZXQiLCJyZXNvdXJjZSIsImNvbnRhaW5lclJlc291cmNlIiwicmVuZGVyIiwicmVuZGVycyIsImRhdGEiLCJyZW5kZXJJbmRleCIsIm1lc2hlcyIsIm9uQ29udGFpbmVyQXNzZXRBZGRlZCIsInJlZ2lzdHJ5Iiwib2ZmIiwiaWQiLCJvbiIsIm9uQ29udGFpbmVyQXNzZXRSZW1vdmVkIiwib25jZSIsImxvYWQiLCJjYWxsIiwiZGVzdHJveSIsIlJlbmRlckhhbmRsZXIiLCJjb25zdHJ1Y3RvciIsImFwcCIsImhhbmRsZXJUeXBlIiwiX3JlZ2lzdHJ5IiwiYXNzZXRzIiwidXJsIiwiY2FsbGJhY2siLCJhc3NldCIsIm9wZW4iLCJSZW5kZXIiLCJwYXRjaCIsImdldCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQU1BLFNBQVNBLHNCQUFULENBQWdDQyxjQUFoQyxFQUFnRDtFQUM1QyxNQUFNQyxXQUFXLEdBQUcsSUFBcEIsQ0FBQTtBQUNBLEVBQUEsSUFBSSxDQUFDQSxXQUFXLENBQUNDLFFBQWpCLEVBQTJCLE9BQUE7QUFFM0IsRUFBQSxNQUFNQyxpQkFBaUIsR0FBR0gsY0FBYyxDQUFDRSxRQUF6QyxDQUFBO0FBRUEsRUFBQSxNQUFNRSxNQUFNLEdBQUdELGlCQUFpQixDQUFDRSxPQUFsQixJQUE2QkYsaUJBQWlCLENBQUNFLE9BQWxCLENBQTBCSixXQUFXLENBQUNLLElBQVosQ0FBaUJDLFdBQTNDLENBQTVDLENBQUE7O0FBQ0EsRUFBQSxJQUFJSCxNQUFKLEVBQVk7SUFDUkgsV0FBVyxDQUFDQyxRQUFaLENBQXFCTSxNQUFyQixHQUE4QkosTUFBTSxDQUFDRixRQUFQLENBQWdCTSxNQUE5QyxDQUFBO0FBQ0gsR0FBQTtBQUNKLENBQUE7O0FBR0QsU0FBU0MscUJBQVQsQ0FBK0JULGNBQS9CLEVBQStDO0VBQzNDLE1BQU1DLFdBQVcs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
