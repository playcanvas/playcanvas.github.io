/**
 * @license
 * PlayCanvas Engine v1.57.1 revision 256dd83c2 (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { extend } from '../core/core.js';
import { now } from '../core/time.js';
import { path } from '../core/path.js';
import { URI } from '../core/uri.js';
import { math } from '../math/math.js';

class Http {
  get(url, options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }

    return this.request('GET', url, options, callback);
  }

  post(url, data, options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }

    options.postdata = data;
    return this.request('POST', url, options, callback);
  }

  put(url, data, options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }

    options.postdata = data;
    return this.request('PUT', url, options, callback);
  }

  del(url, options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }

    return this.request('DELETE', url, options, callback);
  }

  request(method, url, options, callback) {
    let uri, query, postdata;
    let errored = false;

    if (typeof options === 'function') {
      callback = options;
      options = {};
    }

    if (options.retry) {
      options = Object.assign({
        retries: 0,
        maxRetries: 5
      }, options);
    }

    options.callback = callback;

    if (options.async == null) {
      options.async = true;
    }

    if (options.headers == null) {
      options.headers = {};
    }

    if (options.postdata != null) {
      if (options.postdata instanceof Document) {
        postdata = options.postdata;
      } else if (options.postdata instanceof FormData) {
        postdata = options.postdata;
      } else if (options.postdata instanceof Object) {
        let contentType = options.headers['Content-Type'];

        if (contentType === undefined) {
          options.headers['Content-Type'] = Http.ContentType.FORM_URLENCODED;
          contentType = options.headers['Content-Type'];
        }

        switch (contentType) {
          case Http.ContentType.FORM_URLENCODED:
            {
              postdata = '';
              let bFirstItem = true;

              for (const key in options.postdata) {
                if (options.postdata.hasOwnProperty(key)) {
                  if (bFirstItem) {
                    bFirstItem = false;
                  } else {
                    postdata += '&';
                  }

                  const encodedKey = encodeURIComponent(key);
                  const encodedValue = encodeURIComponent(options.postdata[key]);
                  postdata += `${encodedKey}=${encodedValue}`;
                }
              }

              break;
            }

          default:
          case Http.ContentType.JSON:
            if (contentType == null) {
              options.headers['Content-Type'] = Http.ContentType.JSON;
            }

            postdata = JSON.stringify(options.postdata);
            break;
        }
      } else {
        postdata = options.postdata;
      }
    }

    if (options.cache === false) {
      const timestamp = now();
      uri = new URI(url);

      if (!uri.query) {
        uri.query = 'ts=' + timestamp;
      } else {
        uri.query = uri.query + '&ts=' + timestamp;
      }

      url = uri.toString();
    }

    if (options.query) {
      uri = new URI(url);
      query = extend(uri.getQuery(), options.query);
      uri.setQuery(query);
      url = uri.toString();
    }

    const xhr = new XMLHttpRequest();
    xhr.open(method, url, options.async);
    xhr.withCredentials = options.withCredentials !== undefined ? options.withCredentials : false;
    xhr.responseType = options.responseType || this._guessResponseType(url);

    for (const header in options.headers) {
      if (options.headers.hasOwnProperty(header)) {
        xhr.setRequestHeader(header, options.headers[header]);
      }
    }

    xhr.onreadystatechange = () => {
      this._onReadyStateChange(method, url, options, xhr);
    };

    xhr.onerror = () => {
      this._onError(method, url, options, xhr);

      errored = true;
    };

    try {
      xhr.send(postdata);
    } catch (e) {
      if (!errored) {
        options.error(xhr.status, xhr, e);
      }
    }

    return xhr;
  }

  _guessResponseType(url) {
    const uri = new URI(url);
    const ext = path.getExtension(uri.path);

    if (Http.binaryExtensions.indexOf(ext) >= 0) {
      return Http.ResponseType.ARRAY_BUFFER;
    }

    if (ext === '.xml') {
      return Http.ResponseType.DOCUMENT;
    }

    return Http.ResponseType.TEXT;
  }

  _isBinaryContentType(contentType) {
    const binTypes = [Http.ContentType.MP4, Http.ContentType.WAV, Http.ContentType.OGG, Http.ContentType.MP3, Http.ContentType.BIN, Http.ContentType.DDS, Http.ContentType.BASIS, Http.ContentType.GLB, Http.ContentType.OPUS];

    if (binTypes.indexOf(contentType) >= 0) {
      return true;
    }

    return false;
  }

  _onReadyStateChange(method, url, options, xhr) {
    if (xhr.readyState === 4) {
      switch (xhr.status) {
        case 0:
          {
            if (xhr.responseURL && xhr.responseURL.startsWith('file:///')) {
              this._onSuccess(method, url, options, xhr);
            } else {
              this._onError(method, url, options, xhr);
            }

            break;
          }

        case 200:
        case 201:
        case 206:
        case 304:
          {
            this._onSuccess(method, url, options, xhr);

            break;
          }

        default:
          {
            this._onError(method, url, options, xhr);

            break;
          }
      }
    }
  }

  _onSuccess(method, url, options, xhr) {
    let response;
    let contentType;
    const header = xhr.getResponseHeader('Content-Type');

    if (header) {
      const parts = header.split(';');
      contentType = parts[0].trim();
    }

    try {
      if (contentType === Http.ContentType.JSON || url.split('?')[0].endsWith('.json')) {
        response = JSON.parse(xhr.responseText);
      } else if (this._isBinaryContentType(contentType)) {
        response = xhr.response;
      } else {
        if (contentType) {
          console.warn(`responseType: ${xhr.responseType} being served with Content-Type: ${contentType}`);
        }

        if (xhr.responseType === Http.ResponseType.ARRAY_BUFFER) {
          response = xhr.response;
        } else if (xhr.responseType === Http.ResponseType.BLOB || xhr.responseType === Http.ResponseType.JSON) {
          response = xhr.response;
        } else {
          if (xhr.responseType === Http.ResponseType.DOCUMENT || contentType === Http.ContentType.XML) {
            response = xhr.responseXML;
          } else {
            response = xhr.responseText;
          }
        }
      }

      options.callback(null, response);
    } catch (err) {
      options.callback(err);
    }
  }

  _onError(method, url, options, xhr) {
    if (options.retrying) {
      return;
    }

    if (options.retry && options.retries < options.maxRetries) {
      options.retries++;
      options.retrying = true;
      const retryDelay = math.clamp(Math.pow(2, options.retries) * Http.retryDelay, 0, options.maxRetryDelay || 5000);
      console.log(`${method}: ${url} - Error ${xhr.status}. Retrying in ${retryDelay} ms`);
      setTimeout(() => {
        options.retrying = false;
        this.request(method, url, options, options.callback);
      }, retryDelay);
    } else {
      options.callback(xhr.status === 0 ? 'Network error' : xhr.status, null);
    }
  }

}

Http.ContentType = {
  FORM_URLENCODED: 'application/x-www-form-urlencoded',
  GIF: 'image/gif',
  JPEG: 'image/jpeg',
  DDS: 'image/dds',
  JSON: 'application/json',
  PNG: 'image/png',
  TEXT: 'text/plain',
  XML: 'application/xml',
  WAV: 'audio/x-wav',
  OGG: 'audio/ogg',
  MP3: 'audio/mpeg',
  MP4: 'audio/mp4',
  AAC: 'audio/aac',
  BIN: 'application/octet-stream',
  BASIS: 'image/basis',
  GLB: 'model/gltf-binary',
  OPUS: 'audio/ogg; codecs="opus"'
};
Http.ResponseType = {
  TEXT: 'text',
  ARRAY_BUFFER: 'arraybuffer',
  BLOB: 'blob',
  DOCUMENT: 'document',
  JSON: 'json'
};
Http.binaryExtensions = ['.model', '.wav', '.ogg', '.mp3', '.mp4', '.m4a', '.aac', '.dds', '.basis', '.glb', '.opus'];
Http.retryDelay = 100;
const http = new Http();

export { Http, http };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL25ldC9odHRwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4dGVuZCB9IGZyb20gJy4uL2NvcmUvY29yZS5qcyc7XG5pbXBvcnQgeyBub3cgfSBmcm9tICcuLi9jb3JlL3RpbWUuanMnO1xuaW1wb3J0IHsgcGF0aCB9IGZyb20gJy4uL2NvcmUvcGF0aC5qcyc7XG5pbXBvcnQgeyBVUkkgfSBmcm9tICcuLi9jb3JlL3VyaS5qcyc7XG5cbmltcG9ydCB7IG1hdGggfSBmcm9tICcuLi9tYXRoL21hdGguanMnO1xuXG4vKipcbiAqIENhbGxiYWNrIHVzZWQgYnkge0BsaW5rIEh0dHAjZ2V0fSwge0BsaW5rIEh0dHAjcG9zdH0sIHtAbGluayBIdHRwI3B1dH0sIHtAbGluayBIdHRwI2RlbH0sIGFuZFxuICoge0BsaW5rIEh0dHAjcmVxdWVzdH0uXG4gKlxuICogQGNhbGxiYWNrIEh0dHBSZXNwb25zZUNhbGxiYWNrXG4gKiBAcGFyYW0ge251bWJlcnxzdHJpbmd8RXJyb3J8bnVsbH0gZXJyIC0gVGhlIGVycm9yIGNvZGUsIG1lc3NhZ2UsIG9yIGV4Y2VwdGlvbiBpbiB0aGUgY2FzZSB3aGVyZSB0aGUgcmVxdWVzdCBmYWlscy5cbiAqIEBwYXJhbSB7Kn0gW3Jlc3BvbnNlXSAtIFRoZSByZXNwb25zZSBkYXRhIGlmIG5vIGVycm9ycyB3ZXJlIGVuY291bnRlcmVkLiAoZm9ybWF0IGRlcGVuZHMgb24gcmVzcG9uc2UgdHlwZTogdGV4dCwgT2JqZWN0LCBBcnJheUJ1ZmZlciwgWE1MKS5cbiAqL1xuXG4vKipcbiAqIFVzZWQgdG8gc2VuZCBhbmQgcmVjZWl2ZSBIVFRQIHJlcXVlc3RzLlxuICovXG5jbGFzcyBIdHRwIHtcbiAgICBzdGF0aWMgQ29udGVudFR5cGUgPSB7XG4gICAgICAgIEZPUk1fVVJMRU5DT0RFRDogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsXG4gICAgICAgIEdJRjogJ2ltYWdlL2dpZicsXG4gICAgICAgIEpQRUc6ICdpbWFnZS9qcGVnJyxcbiAgICAgICAgRERTOiAnaW1hZ2UvZGRzJyxcbiAgICAgICAgSlNPTjogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICBQTkc6ICdpbWFnZS9wbmcnLFxuICAgICAgICBURVhUOiAndGV4dC9wbGFpbicsXG4gICAgICAgIFhNTDogJ2FwcGxpY2F0aW9uL3htbCcsXG4gICAgICAgIFdBVjogJ2F1ZGlvL3gtd2F2JyxcbiAgICAgICAgT0dHOiAnYXVkaW8vb2dnJyxcbiAgICAgICAgTVAzOiAnYXVkaW8vbXBlZycsXG4gICAgICAgIE1QNDogJ2F1ZGlvL21wNCcsXG4gICAgICAgIEFBQzogJ2F1ZGlvL2FhYycsXG4gICAgICAgIEJJTjogJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScsXG4gICAgICAgIEJBU0lTOiAnaW1hZ2UvYmFzaXMnLFxuICAgICAgICBHTEI6ICdtb2RlbC9nbHRmLWJpbmFyeScsXG4gICAgICAgIE9QVVM6ICdhdWRpby9vZ2c7IGNvZGVjcz1cIm9wdXNcIidcbiAgICB9O1xuXG4gICAgc3RhdGljIFJlc3BvbnNlVHlwZSA9IHtcbiAgICAgICAgVEVYVDogJ3RleHQnLFxuICAgICAgICBBUlJBWV9CVUZGRVI6ICdhcnJheWJ1ZmZlcicsXG4gICAgICAgIEJMT0I6ICdibG9iJyxcbiAgICAgICAgRE9DVU1FTlQ6ICdkb2N1bWVudCcsXG4gICAgICAgIEpTT046ICdqc29uJ1xuICAgIH07XG5cbiAgICBzdGF0aWMgYmluYXJ5RXh0ZW5zaW9ucyA9IFtcbiAgICAgICAgJy5tb2RlbCcsXG4gICAgICAgICcud2F2JyxcbiAgICAgICAgJy5vZ2cnLFxuICAgICAgICAnLm1wMycsXG4gICAgICAgICcubXA0JyxcbiAgICAgICAgJy5tNGEnLFxuICAgICAgICAnLmFhYycsXG4gICAgICAgICcuZGRzJyxcbiAgICAgICAgJy5iYXNpcycsXG4gICAgICAgICcuZ2xiJyxcbiAgICAgICAgJy5vcHVzJ1xuICAgIF07XG5cbiAgICBzdGF0aWMgcmV0cnlEZWxheSA9IDEwMDtcblxuICAgIC8qKlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBuYW1lIEh0dHAjZ2V0XG4gICAgICogQGRlc2NyaXB0aW9uIFBlcmZvcm0gYW4gSFRUUCBHRVQgcmVxdWVzdCB0byB0aGUgZ2l2ZW4gdXJsLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgLSBUaGUgVVJMIHRvIG1ha2UgdGhlIHJlcXVlc3QgdG8uXG4gICAgICogQHBhcmFtIHtIdHRwUmVzcG9uc2VDYWxsYmFja30gY2FsbGJhY2sgLSBUaGUgY2FsbGJhY2sgdXNlZCB3aGVuIHRoZSByZXNwb25zZSBoYXMgcmV0dXJuZWQuIFBhc3NlZCAoZXJyLCBkYXRhKVxuICAgICAqIHdoZXJlIGRhdGEgaXMgdGhlIHJlc3BvbnNlIChmb3JtYXQgZGVwZW5kcyBvbiByZXNwb25zZSB0eXBlOiB0ZXh0LCBPYmplY3QsIEFycmF5QnVmZmVyLCBYTUwpIGFuZFxuICAgICAqIGVyciBpcyB0aGUgZXJyb3IgY29kZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHBjLmh0dHAuZ2V0KFwiaHR0cDovL2V4YW1wbGUuY29tL1wiLCBmdW5jdGlvbiAoZXJyLCByZXNwb25zZSkge1xuICAgICAqICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICogfSk7XG4gICAgICogQHJldHVybnMge1hNTEh0dHBSZXF1ZXN0fSBUaGUgcmVxdWVzdCBvYmplY3QuXG4gICAgICovXG4gICAgLyoqXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQG5hbWUgSHR0cCNnZXRcbiAgICAgKiBAdmFyaWF0aW9uIDJcbiAgICAgKiBAZGVzY3JpcHRpb24gUGVyZm9ybSBhbiBIVFRQIEdFVCByZXF1ZXN0IHRvIHRoZSBnaXZlbiB1cmwgd2l0aCBhZGRpdGlvbmFsIG9wdGlvbnMgc3VjaCBhcyBoZWFkZXJzLCByZXRyaWVzLCBjcmVkZW50aWFscywgZXRjLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgLSBUaGUgVVJMIHRvIG1ha2UgdGhlIHJlcXVlc3QgdG8uXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBBZGRpdGlvbmFsIG9wdGlvbnMuXG4gICAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zLmhlYWRlcnNdIC0gSFRUUCBoZWFkZXJzIHRvIGFkZCB0byB0aGUgcmVxdWVzdC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmFzeW5jXSAtIE1ha2UgdGhlIHJlcXVlc3QgYXN5bmNocm9ub3VzbHkuIERlZmF1bHRzIHRvIHRydWUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5jYWNoZV0gLSBJZiBmYWxzZSwgdGhlbiBhZGQgYSB0aW1lc3RhbXAgdG8gdGhlIHJlcXVlc3QgdG8gcHJldmVudCBjYWNoaW5nLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMud2l0aENyZWRlbnRpYWxzXSAtIFNlbmQgY29va2llcyB3aXRoIHRoaXMgcmVxdWVzdC4gRGVmYXVsdHMgdG8gZmFsc2UuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnJlc3BvbnNlVHlwZV0gLSBPdmVycmlkZSB0aGUgcmVzcG9uc2UgdHlwZS5cbiAgICAgKiBAcGFyYW0ge0RvY3VtZW50fG9iamVjdH0gW29wdGlvbnMucG9zdGRhdGFdIC0gRGF0YSB0byBzZW5kIGluIHRoZSBib2R5IG9mIHRoZSByZXF1ZXN0LlxuICAgICAqIFNvbWUgY29udGVudCB0eXBlcyBhcmUgaGFuZGxlZCBhdXRvbWF0aWNhbGx5LiBJZiBwb3N0ZGF0YSBpcyBhbiBYTUwgRG9jdW1lbnQsIGl0IGlzIGhhbmRsZWQuIElmXG4gICAgICogdGhlIENvbnRlbnQtVHlwZSBoZWFkZXIgaXMgc2V0IHRvICdhcHBsaWNhdGlvbi9qc29uJyB0aGVuIHRoZSBwb3N0ZGF0YSBpcyBKU09OIHN0cmluZ2lmaWVkLlxuICAgICAqIE90aGVyd2lzZSwgYnkgZGVmYXVsdCwgdGhlIGRhdGEgaXMgc2VudCBhcyBmb3JtLXVybGVuY29kZWQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5yZXRyeV0gLSBJZiB0cnVlIHRoZW4gaWYgdGhlIHJlcXVlc3QgZmFpbHMgaXQgd2lsbCBiZSByZXRyaWVkIHdpdGggYW4gZXhwb25lbnRpYWwgYmFja29mZi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4UmV0cmllc10gLSBJZiBvcHRpb25zLnJldHJ5IGlzIHRydWUgdGhpcyBzcGVjaWZpZXMgdGhlIG1heGltdW0gbnVtYmVyIG9mIHJldHJpZXMuIERlZmF1bHRzIHRvIDUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFJldHJ5RGVsYXldIC0gSWYgb3B0aW9ucy5yZXRyeSBpcyB0cnVlIHRoaXMgc3BlY2lmaWVzIHRoZSBtYXhpbXVtIGFtb3VudCBvZiB0aW1lIHRvIHdhaXQgYmV0d2VlbiByZXRyaWVzIGluIG1pbGxpc2Vjb25kcy4gRGVmYXVsdHMgdG8gNTAwMC5cbiAgICAgKiBAcGFyYW0ge0h0dHBSZXNwb25zZUNhbGxiYWNrfSBjYWxsYmFjayAtIFRoZSBjYWxsYmFjayB1c2VkIHdoZW4gdGhlIHJlc3BvbnNlIGhhcyByZXR1cm5lZC4gUGFzc2VkIChlcnIsIGRhdGEpXG4gICAgICogd2hlcmUgZGF0YSBpcyB0aGUgcmVzcG9uc2UgKGZvcm1hdCBkZXBlbmRzIG9uIHJlc3BvbnNlIHR5cGU6IHRleHQsIE9iamVjdCwgQXJyYXlCdWZmZXIsIFhNTCkgYW5kXG4gICAgICogZXJyIGlzIHRoZSBlcnJvciBjb2RlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogcGMuaHR0cC5nZXQoXCJodHRwOi8vZXhhbXBsZS5jb20vXCIsIHsgXCJyZXRyeVwiOiB0cnVlLCBcIm1heFJldHJpZXNcIjogNSB9LCBmdW5jdGlvbiAoZXJyLCByZXNwb25zZSkge1xuICAgICAqICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICogfSk7XG4gICAgICogQHJldHVybnMge1hNTEh0dHBSZXF1ZXN0fSBUaGUgcmVxdWVzdCBvYmplY3QuXG4gICAgICovXG4gICAgZ2V0KHVybCwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgICAgICAgICBvcHRpb25zID0ge307XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdCgnR0VUJywgdXJsLCBvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQG5hbWUgSHR0cCNwb3N0XG4gICAgICogQGRlc2NyaXB0aW9uIFBlcmZvcm0gYW4gSFRUUCBQT1NUIHJlcXVlc3QgdG8gdGhlIGdpdmVuIHVybC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIC0gVGhlIFVSTCB0byBtYWtlIHRoZSByZXF1ZXN0IHRvLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhIC0gRGF0YSB0byBzZW5kIGluIHRoZSBib2R5IG9mIHRoZSByZXF1ZXN0LlxuICAgICAqIFNvbWUgY29udGVudCB0eXBlcyBhcmUgaGFuZGxlZCBhdXRvbWF0aWNhbGx5LiBJZiBwb3N0ZGF0YSBpcyBhbiBYTUwgRG9jdW1lbnQsIGl0IGlzIGhhbmRsZWQuIElmXG4gICAgICogdGhlIENvbnRlbnQtVHlwZSBoZWFkZXIgaXMgc2V0IHRvICdhcHBsaWNhdGlvbi9qc29uJyB0aGVuIHRoZSBwb3N0ZGF0YSBpcyBKU09OIHN0cmluZ2lmaWVkLlxuICAgICAqIE90aGVyd2lzZSwgYnkgZGVmYXVsdCwgdGhlIGRhdGEgaXMgc2VudCBhcyBmb3JtLXVybGVuY29kZWQuXG4gICAgICogQHBhcmFtIHtIdHRwUmVzcG9uc2VDYWxsYmFja30gY2FsbGJhY2sgLSBUaGUgY2FsbGJhY2sgdXNlZCB3aGVuIHRoZSByZXNwb25zZSBoYXMgcmV0dXJuZWQuIFBhc3NlZCAoZXJyLCBkYXRhKVxuICAgICAqIHdoZXJlIGRhdGEgaXMgdGhlIHJlc3BvbnNlIChmb3JtYXQgZGVwZW5kcyBvbiByZXNwb25zZSB0eXBlOiB0ZXh0LCBPYmplY3QsIEFycmF5QnVmZmVyLCBYTUwpIGFuZFxuICAgICAqIGVyciBpcyB0aGUgZXJyb3IgY29kZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHBjLmh0dHAucG9zdChcImh0dHA6Ly9leGFtcGxlLmNvbS9cIiwgeyBcIm5hbWVcIjogXCJBbGl4XCIgfSwgZnVuY3Rpb24gKGVyciwgcmVzcG9uc2UpIHtcbiAgICAgKiAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xuICAgICAqIH0pO1xuICAgICAqIEByZXR1cm5zIHtYTUxIdHRwUmVxdWVzdH0gVGhlIHJlcXVlc3Qgb2JqZWN0LlxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBuYW1lIEh0dHAjcG9zdFxuICAgICAqIEB2YXJpYXRpb24gMlxuICAgICAqIEBkZXNjcmlwdGlvbiBQZXJmb3JtIGFuIEhUVFAgUE9TVCByZXF1ZXN0IHRvIHRoZSBnaXZlbiB1cmwgd2l0aCBhZGRpdGlvbmFsIG9wdGlvbnMgc3VjaCBhcyBoZWFkZXJzLCByZXRyaWVzLCBjcmVkZW50aWFscywgZXRjLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgLSBUaGUgVVJMIHRvIG1ha2UgdGhlIHJlcXVlc3QgdG8uXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGRhdGEgLSBEYXRhIHRvIHNlbmQgaW4gdGhlIGJvZHkgb2YgdGhlIHJlcXVlc3QuXG4gICAgICogU29tZSBjb250ZW50IHR5cGVzIGFyZSBoYW5kbGVkIGF1dG9tYXRpY2FsbHkuIElmIHBvc3RkYXRhIGlzIGFuIFhNTCBEb2N1bWVudCwgaXQgaXMgaGFuZGxlZC4gSWZcbiAgICAgKiB0aGUgQ29udGVudC1UeXBlIGhlYWRlciBpcyBzZXQgdG8gJ2FwcGxpY2F0aW9uL2pzb24nIHRoZW4gdGhlIHBvc3RkYXRhIGlzIEpTT04gc3RyaW5naWZpZWQuXG4gICAgICogT3RoZXJ3aXNlLCBieSBkZWZhdWx0LCB0aGUgZGF0YSBpcyBzZW50IGFzIGZvcm0tdXJsZW5jb2RlZC5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAtIEFkZGl0aW9uYWwgb3B0aW9ucy5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnMuaGVhZGVyc10gLSBIVFRQIGhlYWRlcnMgdG8gYWRkIHRvIHRoZSByZXF1ZXN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuYXN5bmNdIC0gTWFrZSB0aGUgcmVxdWVzdCBhc3luY2hyb25vdXNseS4gRGVmYXVsdHMgdG8gdHJ1ZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmNhY2hlXSAtIElmIGZhbHNlLCB0aGVuIGFkZCBhIHRpbWVzdGFtcCB0byB0aGUgcmVxdWVzdCB0byBwcmV2ZW50IGNhY2hpbmcuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy53aXRoQ3JlZGVudGlhbHNdIC0gU2VuZCBjb29raWVzIHdpdGggdGhpcyByZXF1ZXN0LiBEZWZhdWx0cyB0byBmYWxzZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMucmVzcG9uc2VUeXBlXSAtIE92ZXJyaWRlIHRoZSByZXNwb25zZSB0eXBlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucmV0cnldIC0gSWYgdHJ1ZSB0aGVuIGlmIHRoZSByZXF1ZXN0IGZhaWxzIGl0IHdpbGwgYmUgcmV0cmllZCB3aXRoIGFuIGV4cG9uZW50aWFsIGJhY2tvZmYuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFJldHJpZXNdIC0gSWYgb3B0aW9ucy5yZXRyeSBpcyB0cnVlIHRoaXMgc3BlY2lmaWVzIHRoZSBtYXhpbXVtIG51bWJlciBvZiByZXRyaWVzLiBEZWZhdWx0cyB0byA1LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhSZXRyeURlbGF5XSAtIElmIG9wdGlvbnMucmV0cnkgaXMgdHJ1ZSB0aGlzIHNwZWNpZmllcyB0aGUgbWF4aW11bSBhbW91bnQgb2YgdGltZSB0byB3YWl0IGJldHdlZW4gcmV0cmllcyBpbiBtaWxsaXNlY29uZHMuIERlZmF1bHRzIHRvIDUwMDAuXG4gICAgICogQHBhcmFtIHtIdHRwUmVzcG9uc2VDYWxsYmFja30gY2FsbGJhY2sgLSBUaGUgY2FsbGJhY2sgdXNlZCB3aGVuIHRoZSByZXNwb25zZSBoYXMgcmV0dXJuZWQuIFBhc3NlZCAoZXJyLCBkYXRhKVxuICAgICAqIHdoZXJlIGRhdGEgaXMgdGhlIHJlc3BvbnNlIChmb3JtYXQgZGVwZW5kcyBvbiByZXNwb25zZSB0eXBlOiB0ZXh0LCBPYmplY3QsIEFycmF5QnVmZmVyLCBYTUwpIGFuZFxuICAgICAqIGVyciBpcyB0aGUgZXJyb3IgY29kZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHBjLmh0dHAucG9zdChcImh0dHA6Ly9leGFtcGxlLmNvbS9cIiwgeyBcIm5hbWVcIjogXCJBbGl4XCIgfSwgeyBcInJldHJ5XCI6IHRydWUsIFwibWF4UmV0cmllc1wiOiA1IH0sIGZ1bmN0aW9uIChlcnIsIHJlc3BvbnNlKSB7XG4gICAgICogICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcbiAgICAgKiB9KTtcbiAgICAgKiBAcmV0dXJucyB7WE1MSHR0cFJlcXVlc3R9IFRoZSByZXF1ZXN0IG9iamVjdC5cbiAgICAgKi9cbiAgICBwb3N0KHVybCwgZGF0YSwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgICAgICAgICBvcHRpb25zID0ge307XG4gICAgICAgIH1cbiAgICAgICAgb3B0aW9ucy5wb3N0ZGF0YSA9IGRhdGE7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoJ1BPU1QnLCB1cmwsIG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAbmFtZSBIdHRwI3B1dFxuICAgICAqIEBkZXNjcmlwdGlvbiBQZXJmb3JtIGFuIEhUVFAgUFVUIHJlcXVlc3QgdG8gdGhlIGdpdmVuIHVybC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIC0gVGhlIFVSTCB0byBtYWtlIHRoZSByZXF1ZXN0IHRvLlxuICAgICAqIEBwYXJhbSB7RG9jdW1lbnR8b2JqZWN0fSBkYXRhIC0gRGF0YSB0byBzZW5kIGluIHRoZSBib2R5IG9mIHRoZSByZXF1ZXN0LlxuICAgICAqIFNvbWUgY29udGVudCB0eXBlcyBhcmUgaGFuZGxlZCBhdXRvbWF0aWNhbGx5LiBJZiBwb3N0ZGF0YSBpcyBhbiBYTUwgRG9jdW1lbnQsIGl0IGlzIGhhbmRsZWQuIElmXG4gICAgICogdGhlIENvbnRlbnQtVHlwZSBoZWFkZXIgaXMgc2V0IHRvICdhcHBsaWNhdGlvbi9qc29uJyB0aGVuIHRoZSBwb3N0ZGF0YSBpcyBKU09OIHN0cmluZ2lmaWVkLlxuICAgICAqIE90aGVyd2lzZSwgYnkgZGVmYXVsdCwgdGhlIGRhdGEgaXMgc2VudCBhcyBmb3JtLXVybGVuY29kZWQuXG4gICAgICogQHBhcmFtIHtIdHRwUmVzcG9uc2VDYWxsYmFja30gY2FsbGJhY2sgLSBUaGUgY2FsbGJhY2sgdXNlZCB3aGVuIHRoZSByZXNwb25zZSBoYXMgcmV0dXJuZWQuIFBhc3NlZCAoZXJyLCBkYXRhKVxuICAgICAqIHdoZXJlIGRhdGEgaXMgdGhlIHJlc3BvbnNlIChmb3JtYXQgZGVwZW5kcyBvbiByZXNwb25zZSB0eXBlOiB0ZXh0LCBPYmplY3QsIEFycmF5QnVmZmVyLCBYTUwpIGFuZFxuICAgICAqIGVyciBpcyB0aGUgZXJyb3IgY29kZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHBjLmh0dHAucHV0KFwiaHR0cDovL2V4YW1wbGUuY29tL1wiLCB7IFwibmFtZVwiOiBcIkFsaXhcIiB9LCBmdW5jdGlvbiAoZXJyLCByZXNwb25zZSkge1xuICAgICAqICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7XG4gICAgICogfSk7XG4gICAgICogQHJldHVybnMge1hNTEh0dHBSZXF1ZXN0fSBUaGUgcmVxdWVzdCBvYmplY3QuXG4gICAgICovXG4gICAgLyoqXG4gICAgICogQGZ1bmN0aW9uXG4gICAgICogQG5hbWUgSHR0cCNwdXRcbiAgICAgKiBAdmFyaWF0aW9uIDJcbiAgICAgKiBAZGVzY3JpcHRpb24gUGVyZm9ybSBhbiBIVFRQIFBVVCByZXF1ZXN0IHRvIHRoZSBnaXZlbiB1cmwgd2l0aCBhZGRpdGlvbmFsIG9wdGlvbnMgc3VjaCBhcyBoZWFkZXJzLCByZXRyaWVzLCBjcmVkZW50aWFscywgZXRjLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgLSBUaGUgVVJMIHRvIG1ha2UgdGhlIHJlcXVlc3QgdG8uXG4gICAgICogQHBhcmFtIHtEb2N1bWVudHxvYmplY3R9IGRhdGEgLSBEYXRhIHRvIHNlbmQgaW4gdGhlIGJvZHkgb2YgdGhlIHJlcXVlc3QuXG4gICAgICogU29tZSBjb250ZW50IHR5cGVzIGFyZSBoYW5kbGVkIGF1dG9tYXRpY2FsbHkuIElmIHBvc3RkYXRhIGlzIGFuIFhNTCBEb2N1bWVudCwgaXQgaXMgaGFuZGxlZC4gSWZcbiAgICAgKiB0aGUgQ29udGVudC1UeXBlIGhlYWRlciBpcyBzZXQgdG8gJ2FwcGxpY2F0aW9uL2pzb24nIHRoZW4gdGhlIHBvc3RkYXRhIGlzIEpTT04gc3RyaW5naWZpZWQuXG4gICAgICogT3RoZXJ3aXNlLCBieSBkZWZhdWx0LCB0aGUgZGF0YSBpcyBzZW50IGFzIGZvcm0tdXJsZW5jb2RlZC5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAtIEFkZGl0aW9uYWwgb3B0aW9ucy5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnMuaGVhZGVyc10gLSBIVFRQIGhlYWRlcnMgdG8gYWRkIHRvIHRoZSByZXF1ZXN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuYXN5bmNdIC0gTWFrZSB0aGUgcmVxdWVzdCBhc3luY2hyb25vdXNseS4gRGVmYXVsdHMgdG8gdHJ1ZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmNhY2hlXSAtIElmIGZhbHNlLCB0aGVuIGFkZCBhIHRpbWVzdGFtcCB0byB0aGUgcmVxdWVzdCB0byBwcmV2ZW50IGNhY2hpbmcuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy53aXRoQ3JlZGVudGlhbHNdIC0gU2VuZCBjb29raWVzIHdpdGggdGhpcyByZXF1ZXN0LiBEZWZhdWx0cyB0byBmYWxzZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMucmVzcG9uc2VUeXBlXSAtIE92ZXJyaWRlIHRoZSByZXNwb25zZSB0eXBlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucmV0cnldIC0gSWYgdHJ1ZSB0aGVuIGlmIHRoZSByZXF1ZXN0IGZhaWxzIGl0IHdpbGwgYmUgcmV0cmllZCB3aXRoIGFuIGV4cG9uZW50aWFsIGJhY2tvZmYuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFJldHJpZXNdIC0gSWYgb3B0aW9ucy5yZXRyeSBpcyB0cnVlIHRoaXMgc3BlY2lmaWVzIHRoZSBtYXhpbXVtIG51bWJlciBvZiByZXRyaWVzLiBEZWZhdWx0cyB0byA1LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhSZXRyeURlbGF5XSAtIElmIG9wdGlvbnMucmV0cnkgaXMgdHJ1ZSB0aGlzIHNwZWNpZmllcyB0aGUgbWF4aW11bSBhbW91bnQgb2YgdGltZSB0byB3YWl0IGJldHdlZW4gcmV0cmllcyBpbiBtaWxsaXNlY29uZHMuIERlZmF1bHRzIHRvIDUwMDAuXG4gICAgICogQHBhcmFtIHtIdHRwUmVzcG9uc2VDYWxsYmFja30gY2FsbGJhY2sgLSBUaGUgY2FsbGJhY2sgdXNlZCB3aGVuIHRoZSByZXNwb25zZSBoYXMgcmV0dXJuZWQuIFBhc3NlZCAoZXJyLCBkYXRhKVxuICAgICAqIHdoZXJlIGRhdGEgaXMgdGhlIHJlc3BvbnNlIChmb3JtYXQgZGVwZW5kcyBvbiByZXNwb25zZSB0eXBlOiB0ZXh0LCBPYmplY3QsIEFycmF5QnVmZmVyLCBYTUwpIGFuZFxuICAgICAqIGVyciBpcyB0aGUgZXJyb3IgY29kZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHBjLmh0dHAucHV0KFwiaHR0cDovL2V4YW1wbGUuY29tL1wiLCB7IFwibmFtZVwiOiBcIkFsaXhcIiB9LCB7IFwicmV0cnlcIjogdHJ1ZSwgXCJtYXhSZXRyaWVzXCI6IDUgfSwgZnVuY3Rpb24gKGVyciwgcmVzcG9uc2UpIHtcbiAgICAgKiAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xuICAgICAqIH0pO1xuICAgICAqIEByZXR1cm5zIHtYTUxIdHRwUmVxdWVzdH0gVGhlIHJlcXVlc3Qgb2JqZWN0LlxuICAgICAqL1xuICAgIHB1dCh1cmwsIGRhdGEsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FsbGJhY2sgPSBvcHRpb25zO1xuICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnMucG9zdGRhdGEgPSBkYXRhO1xuICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KCdQVVQnLCB1cmwsIG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAZnVuY3Rpb25cbiAgICAgKiBAbmFtZSBIdHRwI2RlbFxuICAgICAqIEBkZXNjcmlwdGlvbiBQZXJmb3JtIGFuIEhUVFAgREVMRVRFIHJlcXVlc3QgdG8gdGhlIGdpdmVuIHVybC5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gdXJsIC0gVGhlIFVSTCB0byBtYWtlIHRoZSByZXF1ZXN0IHRvLlxuICAgICAqIEBwYXJhbSB7SHR0cFJlc3BvbnNlQ2FsbGJhY2t9IGNhbGxiYWNrIC0gVGhlIGNhbGxiYWNrIHVzZWQgd2hlbiB0aGUgcmVzcG9uc2UgaGFzIHJldHVybmVkLiBQYXNzZWQgKGVyciwgZGF0YSlcbiAgICAgKiB3aGVyZSBkYXRhIGlzIHRoZSByZXNwb25zZSAoZm9ybWF0IGRlcGVuZHMgb24gcmVzcG9uc2UgdHlwZTogdGV4dCwgT2JqZWN0LCBBcnJheUJ1ZmZlciwgWE1MKSBhbmRcbiAgICAgKiBlcnIgaXMgdGhlIGVycm9yIGNvZGUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBwYy5odHRwLmRlbChcImh0dHA6Ly9leGFtcGxlLmNvbS9cIiwgZnVuY3Rpb24gKGVyciwgcmVzcG9uc2UpIHtcbiAgICAgKiAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xuICAgICAqIH0pO1xuICAgICAqIEByZXR1cm5zIHtYTUxIdHRwUmVxdWVzdH0gVGhlIHJlcXVlc3Qgb2JqZWN0LlxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBuYW1lIEh0dHAjZGVsXG4gICAgICogQHZhcmlhdGlvbiAyXG4gICAgICogQGRlc2NyaXB0aW9uIFBlcmZvcm0gYW4gSFRUUCBERUxFVEUgcmVxdWVzdCB0byB0aGUgZ2l2ZW4gdXJsIHdpdGggYWRkaXRpb25hbCBvcHRpb25zIHN1Y2ggYXMgaGVhZGVycywgcmV0cmllcywgY3JlZGVudGlhbHMsIGV0Yy5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gdXJsIC0gVGhlIFVSTCB0byBtYWtlIHRoZSByZXF1ZXN0IHRvLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gQWRkaXRpb25hbCBvcHRpb25zLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucy5oZWFkZXJzXSAtIEhUVFAgaGVhZGVycyB0byBhZGQgdG8gdGhlIHJlcXVlc3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5hc3luY10gLSBNYWtlIHRoZSByZXF1ZXN0IGFzeW5jaHJvbm91c2x5LiBEZWZhdWx0cyB0byB0cnVlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuY2FjaGVdIC0gSWYgZmFsc2UsIHRoZW4gYWRkIGEgdGltZXN0YW1wIHRvIHRoZSByZXF1ZXN0IHRvIHByZXZlbnQgY2FjaGluZy5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLndpdGhDcmVkZW50aWFsc10gLSBTZW5kIGNvb2tpZXMgd2l0aCB0aGlzIHJlcXVlc3QuIERlZmF1bHRzIHRvIGZhbHNlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5yZXNwb25zZVR5cGVdIC0gT3ZlcnJpZGUgdGhlIHJlc3BvbnNlIHR5cGUuXG4gICAgICogQHBhcmFtIHtEb2N1bWVudHxvYmplY3R9IFtvcHRpb25zLnBvc3RkYXRhXSAtIERhdGEgdG8gc2VuZCBpbiB0aGUgYm9keSBvZiB0aGUgcmVxdWVzdC5cbiAgICAgKiBTb21lIGNvbnRlbnQgdHlwZXMgYXJlIGhhbmRsZWQgYXV0b21hdGljYWxseS4gSWYgcG9zdGRhdGEgaXMgYW4gWE1MIERvY3VtZW50LCBpdCBpcyBoYW5kbGVkLiBJZlxuICAgICAqIHRoZSBDb250ZW50LVR5cGUgaGVhZGVyIGlzIHNldCB0byAnYXBwbGljYXRpb24vanNvbicgdGhlbiB0aGUgcG9zdGRhdGEgaXMgSlNPTiBzdHJpbmdpZmllZC5cbiAgICAgKiBPdGhlcndpc2UsIGJ5IGRlZmF1bHQsIHRoZSBkYXRhIGlzIHNlbnQgYXMgZm9ybS11cmxlbmNvZGVkLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucmV0cnldIC0gSWYgdHJ1ZSB0aGVuIGlmIHRoZSByZXF1ZXN0IGZhaWxzIGl0IHdpbGwgYmUgcmV0cmllZCB3aXRoIGFuIGV4cG9uZW50aWFsIGJhY2tvZmYuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFJldHJpZXNdIC0gSWYgb3B0aW9ucy5yZXRyeSBpcyB0cnVlIHRoaXMgc3BlY2lmaWVzIHRoZSBtYXhpbXVtIG51bWJlciBvZiByZXRyaWVzLiBEZWZhdWx0cyB0byA1LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhSZXRyeURlbGF5XSAtIElmIG9wdGlvbnMucmV0cnkgaXMgdHJ1ZSB0aGlzIHNwZWNpZmllcyB0aGUgbWF4aW11bSBhbW91bnQgb2YgdGltZSB0byB3YWl0IGJldHdlZW4gcmV0cmllcyBpbiBtaWxsaXNlY29uZHMuIERlZmF1bHRzIHRvIDUwMDAuXG4gICAgICogQHBhcmFtIHtIdHRwUmVzcG9uc2VDYWxsYmFja30gY2FsbGJhY2sgLSBUaGUgY2FsbGJhY2sgdXNlZCB3aGVuIHRoZSByZXNwb25zZSBoYXMgcmV0dXJuZWQuIFBhc3NlZCAoZXJyLCBkYXRhKVxuICAgICAqIHdoZXJlIGRhdGEgaXMgdGhlIHJlc3BvbnNlIChmb3JtYXQgZGVwZW5kcyBvbiByZXNwb25zZSB0eXBlOiB0ZXh0LCBPYmplY3QsIEFycmF5QnVmZmVyLCBYTUwpIGFuZFxuICAgICAqIGVyciBpcyB0aGUgZXJyb3IgY29kZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHBjLmh0dHAuZGVsKFwiaHR0cDovL2V4YW1wbGUuY29tL1wiLCB7IFwicmV0cnlcIjogdHJ1ZSwgXCJtYXhSZXRyaWVzXCI6IDUgfSwgZnVuY3Rpb24gKGVyciwgcmVzcG9uc2UpIHtcbiAgICAgKiAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xuICAgICAqIH0pO1xuICAgICAqIEByZXR1cm5zIHtYTUxIdHRwUmVxdWVzdH0gVGhlIHJlcXVlc3Qgb2JqZWN0LlxuICAgICAqL1xuICAgIGRlbCh1cmwsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FsbGJhY2sgPSBvcHRpb25zO1xuICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoJ0RFTEVURScsIHVybCwgb3B0aW9ucywgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBuYW1lIEh0dHAjcmVxdWVzdFxuICAgICAqIEBkZXNjcmlwdGlvbiBNYWtlIGEgZ2VuZXJhbCBwdXJwb3NlIEhUVFAgcmVxdWVzdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kIC0gVGhlIEhUVFAgbWV0aG9kIFwiR0VUXCIsIFwiUE9TVFwiLCBcIlBVVFwiLCBcIkRFTEVURVwiLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgLSBUaGUgdXJsIHRvIG1ha2UgdGhlIHJlcXVlc3QgdG8uXG4gICAgICogQHBhcmFtIHtIdHRwUmVzcG9uc2VDYWxsYmFja30gY2FsbGJhY2sgLSBUaGUgY2FsbGJhY2sgdXNlZCB3aGVuIHRoZSByZXNwb25zZSBoYXMgcmV0dXJuZWQuIFBhc3NlZCAoZXJyLCBkYXRhKVxuICAgICAqIHdoZXJlIGRhdGEgaXMgdGhlIHJlc3BvbnNlIChmb3JtYXQgZGVwZW5kcyBvbiByZXNwb25zZSB0eXBlOiB0ZXh0LCBPYmplY3QsIEFycmF5QnVmZmVyLCBYTUwpIGFuZFxuICAgICAqIGVyciBpcyB0aGUgZXJyb3IgY29kZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHBjLmh0dHAucmVxdWVzdChcImdldFwiLCBcImh0dHA6Ly9leGFtcGxlLmNvbS9cIiwgZnVuY3Rpb24gKGVyciwgcmVzcG9uc2UpIHtcbiAgICAgKiAgICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xuICAgICAqIH0pO1xuICAgICAqIEByZXR1cm5zIHtYTUxIdHRwUmVxdWVzdH0gVGhlIHJlcXVlc3Qgb2JqZWN0LlxuICAgICAqL1xuICAgIC8qKlxuICAgICAqIEBmdW5jdGlvblxuICAgICAqIEBuYW1lIEh0dHAjcmVxdWVzdFxuICAgICAqIEB2YXJpYXRpb24gMlxuICAgICAqIEBkZXNjcmlwdGlvbiBNYWtlIGEgZ2VuZXJhbCBwdXJwb3NlIEhUVFAgcmVxdWVzdCB3aXRoIGFkZGl0aW9uYWwgb3B0aW9ucyBzdWNoIGFzIGhlYWRlcnMsIHJldHJpZXMsIGNyZWRlbnRpYWxzLCBldGMuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZCAtIFRoZSBIVFRQIG1ldGhvZCBcIkdFVFwiLCBcIlBPU1RcIiwgXCJQVVRcIiwgXCJERUxFVEVcIi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsIC0gVGhlIHVybCB0byBtYWtlIHRoZSByZXF1ZXN0IHRvLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zIC0gQWRkaXRpb25hbCBvcHRpb25zLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucy5oZWFkZXJzXSAtIEhUVFAgaGVhZGVycyB0byBhZGQgdG8gdGhlIHJlcXVlc3QuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5hc3luY10gLSBNYWtlIHRoZSByZXF1ZXN0IGFzeW5jaHJvbm91c2x5LiBEZWZhdWx0cyB0byB0cnVlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuY2FjaGVdIC0gSWYgZmFsc2UsIHRoZW4gYWRkIGEgdGltZXN0YW1wIHRvIHRoZSByZXF1ZXN0IHRvIHByZXZlbnQgY2FjaGluZy5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLndpdGhDcmVkZW50aWFsc10gLSBTZW5kIGNvb2tpZXMgd2l0aCB0aGlzIHJlcXVlc3QuIERlZmF1bHRzIHRvIGZhbHNlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucmV0cnldIC0gSWYgdHJ1ZSB0aGVuIGlmIHRoZSByZXF1ZXN0IGZhaWxzIGl0IHdpbGwgYmUgcmV0cmllZCB3aXRoIGFuIGV4cG9uZW50aWFsIGJhY2tvZmYuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFJldHJpZXNdIC0gSWYgb3B0aW9ucy5yZXRyeSBpcyB0cnVlIHRoaXMgc3BlY2lmaWVzIHRoZSBtYXhpbXVtIG51bWJlciBvZiByZXRyaWVzLiBEZWZhdWx0cyB0byA1LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhSZXRyeURlbGF5XSAtIElmIG9wdGlvbnMucmV0cnkgaXMgdHJ1ZSB0aGlzIHNwZWNpZmllcyB0aGUgbWF4aW11bSBhbW91bnQgb2YgdGltZSB0byB3YWl0IGJldHdlZW4gcmV0cmllcyBpbiBtaWxsaXNlY29uZHMuIERlZmF1bHRzIHRvIDUwMDAuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnJlc3BvbnNlVHlwZV0gLSBPdmVycmlkZSB0aGUgcmVzcG9uc2UgdHlwZS5cbiAgICAgKiBAcGFyYW0ge0RvY3VtZW50fG9iamVjdH0gW29wdGlvbnMucG9zdGRhdGFdIC0gRGF0YSB0byBzZW5kIGluIHRoZSBib2R5IG9mIHRoZSByZXF1ZXN0LlxuICAgICAqIFNvbWUgY29udGVudCB0eXBlcyBhcmUgaGFuZGxlZCBhdXRvbWF0aWNhbGx5LiBJZiBwb3N0ZGF0YSBpcyBhbiBYTUwgRG9jdW1lbnQsIGl0IGlzIGhhbmRsZWQuIElmXG4gICAgICogdGhlIENvbnRlbnQtVHlwZSBoZWFkZXIgaXMgc2V0IHRvICdhcHBsaWNhdGlvbi9qc29uJyB0aGVuIHRoZSBwb3N0ZGF0YSBpcyBKU09OIHN0cmluZ2lmaWVkLlxuICAgICAqIE90aGVyd2lzZSwgYnkgZGVmYXVsdCwgdGhlIGRhdGEgaXMgc2VudCBhcyBmb3JtLXVybGVuY29kZWQuXG4gICAgICogQHBhcmFtIHtIdHRwUmVzcG9uc2VDYWxsYmFja30gY2FsbGJhY2sgLSBUaGUgY2FsbGJhY2sgdXNlZCB3aGVuIHRoZSByZXNwb25zZSBoYXMgcmV0dXJuZWQuIFBhc3NlZCAoZXJyLCBkYXRhKVxuICAgICAqIHdoZXJlIGRhdGEgaXMgdGhlIHJlc3BvbnNlIChmb3JtYXQgZGVwZW5kcyBvbiByZXNwb25zZSB0eXBlOiB0ZXh0LCBPYmplY3QsIEFycmF5QnVmZmVyLCBYTUwpIGFuZFxuICAgICAqIGVyciBpcyB0aGUgZXJyb3IgY29kZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHBjLmh0dHAucmVxdWVzdChcImdldFwiLCBcImh0dHA6Ly9leGFtcGxlLmNvbS9cIiwgeyBcInJldHJ5XCI6IHRydWUsIFwibWF4UmV0cmllc1wiOiA1IH0sIGZ1bmN0aW9uIChlcnIsIHJlc3BvbnNlKSB7XG4gICAgICogICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcbiAgICAgKiB9KTtcbiAgICAgKiBAcmV0dXJucyB7WE1MSHR0cFJlcXVlc3R9IFRoZSByZXF1ZXN0IG9iamVjdC5cbiAgICAgKi9cbiAgICByZXF1ZXN0KG1ldGhvZCwgdXJsLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgICBsZXQgdXJpLCBxdWVyeSwgcG9zdGRhdGE7XG4gICAgICAgIGxldCBlcnJvcmVkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgICAgICAgICBvcHRpb25zID0ge307XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiByZXRyeWFibGUgd2UgYXJlIGdvaW5nIHRvIHN0b3JlIG5ldyBwcm9wZXJ0aWVzXG4gICAgICAgIC8vIGluIHRoZSBvcHRpb25zIHNvIGNyZWF0ZSBhIG5ldyBjb3B5IHRvIG5vdCBhZmZlY3RcbiAgICAgICAgLy8gdGhlIG9yaWdpbmFsXG4gICAgICAgIGlmIChvcHRpb25zLnJldHJ5KSB7XG4gICAgICAgICAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7XG4gICAgICAgICAgICAgICAgcmV0cmllczogMCxcbiAgICAgICAgICAgICAgICBtYXhSZXRyaWVzOiA1XG4gICAgICAgICAgICB9LCBvcHRpb25zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHN0b3JlIGNhbGxiYWNrXG4gICAgICAgIG9wdGlvbnMuY2FsbGJhY2sgPSBjYWxsYmFjaztcblxuICAgICAgICAvLyBzZXR1cCBkZWZhdWx0c1xuICAgICAgICBpZiAob3B0aW9ucy5hc3luYyA9PSBudWxsKSB7XG4gICAgICAgICAgICBvcHRpb25zLmFzeW5jID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3B0aW9ucy5oZWFkZXJzID09IG51bGwpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuaGVhZGVycyA9IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMucG9zdGRhdGEgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMucG9zdGRhdGEgaW5zdGFuY2VvZiBEb2N1bWVudCkge1xuICAgICAgICAgICAgICAgIC8vIEl0J3MgYW4gWE1MIGRvY3VtZW50LCBzbyB3ZSBjYW4gc2VuZCBpdCBkaXJlY3RseS5cbiAgICAgICAgICAgICAgICAvLyBYTUxIdHRwUmVxdWVzdCB3aWxsIHNldCB0aGUgY29udGVudCB0eXBlIGNvcnJlY3RseS5cbiAgICAgICAgICAgICAgICBwb3N0ZGF0YSA9IG9wdGlvbnMucG9zdGRhdGE7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMucG9zdGRhdGEgaW5zdGFuY2VvZiBGb3JtRGF0YSkge1xuICAgICAgICAgICAgICAgIHBvc3RkYXRhID0gb3B0aW9ucy5wb3N0ZGF0YTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5wb3N0ZGF0YSBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICAgICAgICAgIC8vIE5vdyB0byB3b3JrIG91dCBob3cgdG8gZW5jb2RlIHRoZSBwb3N0IGRhdGEgYmFzZWQgb24gdGhlIGhlYWRlcnNcbiAgICAgICAgICAgICAgICBsZXQgY29udGVudFR5cGUgPSBvcHRpb25zLmhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddO1xuXG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgbm8gdHlwZSB0aGVuIGRlZmF1bHQgdG8gZm9ybS1lbmNvZGVkXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRlbnRUeXBlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5oZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IEh0dHAuQ29udGVudFR5cGUuRk9STV9VUkxFTkNPREVEO1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50VHlwZSA9IG9wdGlvbnMuaGVhZGVyc1snQ29udGVudC1UeXBlJ107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN3aXRjaCAoY29udGVudFR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBIdHRwLkNvbnRlbnRUeXBlLkZPUk1fVVJMRU5DT0RFRDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm9ybWFsIFVSTCBlbmNvZGVkIGZvcm0gZGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zdGRhdGEgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBiRmlyc3RJdGVtID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTG9vcCByb3VuZCBlYWNoIGVudHJ5IGluIHRoZSBtYXAgYW5kIGVuY29kZSB0aGVtIGludG8gdGhlIHBvc3QgZGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gb3B0aW9ucy5wb3N0ZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnBvc3RkYXRhLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJGaXJzdEl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJGaXJzdEl0ZW0gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3RkYXRhICs9ICcmJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuY29kZWRLZXkgPSBlbmNvZGVVUklDb21wb25lbnQoa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZW5jb2RlZFZhbHVlID0gZW5jb2RlVVJJQ29tcG9uZW50KG9wdGlvbnMucG9zdGRhdGFba2V5XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3RkYXRhICs9IGAke2VuY29kZWRLZXl9PSR7ZW5jb2RlZFZhbHVlfWA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBIdHRwLkNvbnRlbnRUeXBlLkpTT046XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udGVudFR5cGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSBIdHRwLkNvbnRlbnRUeXBlLkpTT047XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBwb3N0ZGF0YSA9IEpTT04uc3RyaW5naWZ5KG9wdGlvbnMucG9zdGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwb3N0ZGF0YSA9IG9wdGlvbnMucG9zdGRhdGE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5jYWNoZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIC8vIEFkZCB0aW1lc3RhbXAgdG8gdXJsIHRvIHByZXZlbnQgYnJvd3NlciBjYWNoaW5nIGZpbGVcbiAgICAgICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5vdygpO1xuXG4gICAgICAgICAgICB1cmkgPSBuZXcgVVJJKHVybCk7XG4gICAgICAgICAgICBpZiAoIXVyaS5xdWVyeSkge1xuICAgICAgICAgICAgICAgIHVyaS5xdWVyeSA9ICd0cz0nICsgdGltZXN0YW1wO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB1cmkucXVlcnkgPSB1cmkucXVlcnkgKyAnJnRzPScgKyB0aW1lc3RhbXA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB1cmwgPSB1cmkudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLnF1ZXJ5KSB7XG4gICAgICAgICAgICB1cmkgPSBuZXcgVVJJKHVybCk7XG4gICAgICAgICAgICBxdWVyeSA9IGV4dGVuZCh1cmkuZ2V0UXVlcnkoKSwgb3B0aW9ucy5xdWVyeSk7XG4gICAgICAgICAgICB1cmkuc2V0UXVlcnkocXVlcnkpO1xuICAgICAgICAgICAgdXJsID0gdXJpLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgeGhyLm9wZW4obWV0aG9kLCB1cmwsIG9wdGlvbnMuYXN5bmMpO1xuICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gb3B0aW9ucy53aXRoQ3JlZGVudGlhbHMgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMud2l0aENyZWRlbnRpYWxzIDogZmFsc2U7XG4gICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSBvcHRpb25zLnJlc3BvbnNlVHlwZSB8fCB0aGlzLl9ndWVzc1Jlc3BvbnNlVHlwZSh1cmwpO1xuXG4gICAgICAgIC8vIFNldCB0aGUgaHR0cCBoZWFkZXJzXG4gICAgICAgIGZvciAoY29uc3QgaGVhZGVyIGluIG9wdGlvbnMuaGVhZGVycykge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaGVhZGVycy5oYXNPd25Qcm9wZXJ0eShoZWFkZXIpKSB7XG4gICAgICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoaGVhZGVyLCBvcHRpb25zLmhlYWRlcnNbaGVhZGVyXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25SZWFkeVN0YXRlQ2hhbmdlKG1ldGhvZCwgdXJsLCBvcHRpb25zLCB4aHIpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHhoci5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25FcnJvcihtZXRob2QsIHVybCwgb3B0aW9ucywgeGhyKTtcbiAgICAgICAgICAgIGVycm9yZWQgPSB0cnVlO1xuICAgICAgICB9O1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB4aHIuc2VuZChwb3N0ZGF0YSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIERXRTogRG9uJ3QgY2FsbGJhY2sgb24gZXhjZXB0aW9ucyBhcyBiZWhhdmlvciBpcyBpbmNvbnNpc3RlbnQsIGUuZy4gY3Jvc3MtZG9tYWluIHJlcXVlc3QgZXJyb3JzIGRvbid0IHRocm93IGFuIGV4Y2VwdGlvbi5cbiAgICAgICAgICAgIC8vIEVycm9yIGNhbGxiYWNrIHNob3VsZCBiZSBjYWxsZWQgYnkgeGhyLm9uZXJyb3IoKSBjYWxsYmFjayBpbnN0ZWFkLlxuICAgICAgICAgICAgaWYgKCFlcnJvcmVkKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5lcnJvcih4aHIuc3RhdHVzLCB4aHIsIGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmV0dXJuIHRoZSByZXF1ZXN0IG9iamVjdCBhcyBpdCBjYW4gYmUgaGFuZHkgZm9yIGJsb2NraW5nIGNhbGxzXG4gICAgICAgIHJldHVybiB4aHI7XG4gICAgfVxuXG4gICAgX2d1ZXNzUmVzcG9uc2VUeXBlKHVybCkge1xuICAgICAgICBjb25zdCB1cmkgPSBuZXcgVVJJKHVybCk7XG4gICAgICAgIGNvbnN0IGV4dCA9IHBhdGguZ2V0RXh0ZW5zaW9uKHVyaS5wYXRoKTtcblxuICAgICAgICBpZiAoSHR0cC5iaW5hcnlFeHRlbnNpb25zLmluZGV4T2YoZXh0KSA+PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gSHR0cC5SZXNwb25zZVR5cGUuQVJSQVlfQlVGRkVSO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV4dCA9PT0gJy54bWwnKSB7XG4gICAgICAgICAgICByZXR1cm4gSHR0cC5SZXNwb25zZVR5cGUuRE9DVU1FTlQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gSHR0cC5SZXNwb25zZVR5cGUuVEVYVDtcbiAgICB9XG5cbiAgICBfaXNCaW5hcnlDb250ZW50VHlwZShjb250ZW50VHlwZSkge1xuICAgICAgICBjb25zdCBiaW5UeXBlcyA9IFtcbiAgICAgICAgICAgIEh0dHAuQ29udGVudFR5cGUuTVA0LFxuICAgICAgICAgICAgSHR0cC5Db250ZW50VHlwZS5XQVYsXG4gICAgICAgICAgICBIdHRwLkNvbnRlbnRUeXBlLk9HRyxcbiAgICAgICAgICAgIEh0dHAuQ29udGVudFR5cGUuTVAzLFxuICAgICAgICAgICAgSHR0cC5Db250ZW50VHlwZS5CSU4sXG4gICAgICAgICAgICBIdHRwLkNvbnRlbnRUeXBlLkREUyxcbiAgICAgICAgICAgIEh0dHAuQ29udGVudFR5cGUuQkFTSVMsXG4gICAgICAgICAgICBIdHRwLkNvbnRlbnRUeXBlLkdMQixcbiAgICAgICAgICAgIEh0dHAuQ29udGVudFR5cGUuT1BVU1xuICAgICAgICBdO1xuICAgICAgICBpZiAoYmluVHlwZXMuaW5kZXhPZihjb250ZW50VHlwZSkgPj0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgX29uUmVhZHlTdGF0ZUNoYW5nZShtZXRob2QsIHVybCwgb3B0aW9ucywgeGhyKSB7XG4gICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICAgICAgc3dpdGNoICh4aHIuc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHN0YXR1cyBjb2RlIDAsIGl0IGlzIGFzc3VtZWQgdGhhdCB0aGUgYnJvd3NlciBoYXMgY2FuY2VsbGVkIHRoZSByZXF1ZXN0XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQWRkIHN1cHBvcnQgZm9yIHJ1bm5pbmcgQ2hyb21lIGJyb3dzZXJzIGluICdhbGxvdy1maWxlLWFjY2Vzcy1mcm9tLWZpbGUnXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgdG8gYWxsb3cgZm9yIHNwZWNpYWxpemVkIHByb2dyYW1zIGFuZCBsaWJyYXJpZXMgc3VjaCBhcyBDZWZTaGFycFxuICAgICAgICAgICAgICAgICAgICAvLyB3aGljaCBlbWJlZCBDaHJvbWl1bSBpbiB0aGUgbmF0aXZlIGFwcC5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHhoci5yZXNwb25zZVVSTCAmJiB4aHIucmVzcG9uc2VVUkwuc3RhcnRzV2l0aCgnZmlsZTovLy8nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXNzdW1lIHRoYXQgYW55IGZpbGUgbG9hZGVkIGZyb20gZGlzayBpcyBmaW5lXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vblN1Y2Nlc3MobWV0aG9kLCB1cmwsIG9wdGlvbnMsIHhocik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vbkVycm9yKG1ldGhvZCwgdXJsLCBvcHRpb25zLCB4aHIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlIDIwMDpcbiAgICAgICAgICAgICAgICBjYXNlIDIwMTpcbiAgICAgICAgICAgICAgICBjYXNlIDIwNjpcbiAgICAgICAgICAgICAgICBjYXNlIDMwNDoge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vblN1Y2Nlc3MobWV0aG9kLCB1cmwsIG9wdGlvbnMsIHhocik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29uRXJyb3IobWV0aG9kLCB1cmwsIG9wdGlvbnMsIHhocik7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9vblN1Y2Nlc3MobWV0aG9kLCB1cmwsIG9wdGlvbnMsIHhocikge1xuICAgICAgICBsZXQgcmVzcG9uc2U7XG4gICAgICAgIGxldCBjb250ZW50VHlwZTtcbiAgICAgICAgY29uc3QgaGVhZGVyID0geGhyLmdldFJlc3BvbnNlSGVhZGVyKCdDb250ZW50LVR5cGUnKTtcbiAgICAgICAgaWYgKGhlYWRlcikge1xuICAgICAgICAgICAgLy8gU3BsaXQgdXAgaGVhZGVyIGludG8gY29udGVudCB0eXBlIGFuZCBwYXJhbWV0ZXJcbiAgICAgICAgICAgIGNvbnN0IHBhcnRzID0gaGVhZGVyLnNwbGl0KCc7Jyk7XG4gICAgICAgICAgICBjb250ZW50VHlwZSA9IHBhcnRzWzBdLnRyaW0oKTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gQ2hlY2sgdGhlIGNvbnRlbnQgdHlwZSB0byBzZWUgaWYgd2Ugd2FudCB0byBwYXJzZSBpdFxuICAgICAgICAgICAgaWYgKGNvbnRlbnRUeXBlID09PSBIdHRwLkNvbnRlbnRUeXBlLkpTT04gfHwgdXJsLnNwbGl0KCc/JylbMF0uZW5kc1dpdGgoJy5qc29uJykpIHtcbiAgICAgICAgICAgICAgICAvLyBJdCdzIGEgSlNPTiByZXNwb25zZVxuICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5faXNCaW5hcnlDb250ZW50VHlwZShjb250ZW50VHlwZSkpIHtcbiAgICAgICAgICAgICAgICByZXNwb25zZSA9IHhoci5yZXNwb25zZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gI2lmIF9ERUJVR1xuICAgICAgICAgICAgICAgIGlmIChjb250ZW50VHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYHJlc3BvbnNlVHlwZTogJHt4aHIucmVzcG9uc2VUeXBlfSBiZWluZyBzZXJ2ZWQgd2l0aCBDb250ZW50LVR5cGU6ICR7Y29udGVudFR5cGV9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vICNlbmRpZlxuXG4gICAgICAgICAgICAgICAgaWYgKHhoci5yZXNwb25zZVR5cGUgPT09IEh0dHAuUmVzcG9uc2VUeXBlLkFSUkFZX0JVRkZFUikge1xuICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IHhoci5yZXNwb25zZTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHhoci5yZXNwb25zZVR5cGUgPT09IEh0dHAuUmVzcG9uc2VUeXBlLkJMT0IgfHwgeGhyLnJlc3BvbnNlVHlwZSA9PT0gSHR0cC5SZXNwb25zZVR5cGUuSlNPTikge1xuICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IHhoci5yZXNwb25zZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAoeGhyLnJlc3BvbnNlVHlwZSA9PT0gSHR0cC5SZXNwb25zZVR5cGUuRE9DVU1FTlQgfHwgY29udGVudFR5cGUgPT09IEh0dHAuQ29udGVudFR5cGUuWE1MKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJdCdzIGFuIFhNTCByZXNwb25zZVxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPSB4aHIucmVzcG9uc2VYTUw7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJdCdzIHJhdyBkYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IHhoci5yZXNwb25zZVRleHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9wdGlvbnMuY2FsbGJhY2sobnVsbCwgcmVzcG9uc2UpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuY2FsbGJhY2soZXJyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9vbkVycm9yKG1ldGhvZCwgdXJsLCBvcHRpb25zLCB4aHIpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMucmV0cnlpbmcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJldHJ5IGlmIG5lY2Vzc2FyeVxuICAgICAgICBpZiAob3B0aW9ucy5yZXRyeSAmJiBvcHRpb25zLnJldHJpZXMgPCBvcHRpb25zLm1heFJldHJpZXMpIHtcbiAgICAgICAgICAgIG9wdGlvbnMucmV0cmllcysrO1xuICAgICAgICAgICAgb3B0aW9ucy5yZXRyeWluZyA9IHRydWU7IC8vIHVzZWQgdG8gc3RvcCByZXRyeWluZyB3aGVuIGJvdGggb25FcnJvciBhbmQgeGhyLm9uZXJyb3IgYXJlIGNhbGxlZFxuICAgICAgICAgICAgY29uc3QgcmV0cnlEZWxheSA9IG1hdGguY2xhbXAoTWF0aC5wb3coMiwgb3B0aW9ucy5yZXRyaWVzKSAqIEh0dHAucmV0cnlEZWxheSwgMCwgb3B0aW9ucy5tYXhSZXRyeURlbGF5IHx8IDUwMDApO1xuICAgICAgICAgICAgY29uc29sZS5sb2coYCR7bWV0aG9kfTogJHt1cmx9IC0gRXJyb3IgJHt4aHIuc3RhdHVzfS4gUmV0cnlpbmcgaW4gJHtyZXRyeURlbGF5fSBtc2ApO1xuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLnJldHJ5aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXF1ZXN0KG1ldGhvZCwgdXJsLCBvcHRpb25zLCBvcHRpb25zLmNhbGxiYWNrKTtcbiAgICAgICAgICAgIH0sIHJldHJ5RGVsYXkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gbm8gbW9yZSByZXRyaWVzIG9yIG5vdCByZXRyeSBzbyBqdXN0IGZhaWxcbiAgICAgICAgICAgIG9wdGlvbnMuY2FsbGJhY2soeGhyLnN0YXR1cyA9PT0gMCA/ICdOZXR3b3JrIGVycm9yJyA6IHhoci5zdGF0dXMsIG51bGwpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5jb25zdCBodHRwID0gbmV3IEh0dHAoKTtcblxuZXhwb3J0IHsgaHR0cCwgSHR0cCB9O1xuIl0sIm5hbWVzIjpbIkh0dHAiLCJnZXQiLCJ1cmwiLCJvcHRpb25zIiwiY2FsbGJhY2siLCJyZXF1ZXN0IiwicG9zdCIsImRhdGEiLCJwb3N0ZGF0YSIsInB1dCIsImRlbCIsIm1ldGhvZCIsInVyaSIsInF1ZXJ5IiwiZXJyb3JlZCIsInJldHJ5IiwiT2JqZWN0IiwiYXNzaWduIiwicmV0cmllcyIsIm1heFJldHJpZXMiLCJhc3luYyIsImhlYWRlcnMiLCJEb2N1bWVudCIsIkZvcm1EYXRhIiwiY29udGVudFR5cGUiLCJ1bmRlZmluZWQiLCJDb250ZW50VHlwZSIsIkZPUk1fVVJMRU5DT0RFRCIsImJGaXJzdEl0ZW0iLCJrZXkiLCJoYXNPd25Qcm9wZXJ0eSIsImVuY29kZWRLZXkiLCJlbmNvZGVVUklDb21wb25lbnQiLCJlbmNvZGVkVmFsdWUiLCJKU09OIiwic3RyaW5naWZ5IiwiY2FjaGUiLCJ0aW1lc3RhbXAiLCJub3ciLCJVUkkiLCJ0b1N0cmluZyIsImV4dGVuZCIsImdldFF1ZXJ5Iiwic2V0UXVlcnkiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsIm9wZW4iLCJ3aXRoQ3JlZGVudGlhbHMiLCJyZXNwb25zZVR5cGUiLCJfZ3Vlc3NSZXNwb25zZVR5cGUiLCJoZWFkZXIiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25yZWFkeXN0YXRlY2hhbmdlIiwiX29uUmVhZHlTdGF0ZUNoYW5nZSIsIm9uZXJyb3IiLCJfb25FcnJvciIsInNlbmQiLCJlIiwiZXJyb3IiLCJzdGF0dXMiLCJleHQiLCJwYXRoIiwiZ2V0RXh0ZW5zaW9uIiwiYmluYXJ5RXh0ZW5zaW9ucyIsImluZGV4T2YiLCJSZXNwb25zZVR5cGUiLCJBUlJBWV9CVUZGRVIiLCJET0NVTUVOVCIsIlRFWFQiLCJfaXNCaW5hcnlDb250ZW50VHlwZSIsImJpblR5cGVzIiwiTVA0IiwiV0FWIiwiT0dHIiwiTVAzIiwiQklOIiwiRERTIiwiQkFTSVMiLCJHTEIiLCJPUFVTIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlVVJMIiwic3RhcnRzV2l0aCIsIl9vblN1Y2Nlc3MiLCJyZXNwb25zZSIsImdldFJlc3BvbnNlSGVhZGVyIiwicGFydHMiLCJzcGxpdCIsInRyaW0iLCJlbmRzV2l0aCIsInBhcnNlIiwicmVzcG9uc2VUZXh0IiwiY29uc29sZSIsIndhcm4iLCJCTE9CIiwiWE1MIiwicmVzcG9uc2VYTUwiLCJlcnIiLCJyZXRyeWluZyIsInJldHJ5RGVsYXkiLCJtYXRoIiwiY2xhbXAiLCJNYXRoIiwicG93IiwibWF4UmV0cnlEZWxheSIsImxvZyIsInNldFRpbWVvdXQiLCJHSUYiLCJKUEVHIiwiUE5HIiwiQUFDIiwiaHR0cCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFtQkEsTUFBTUEsSUFBTixDQUFXO0FBdUZQQyxFQUFBQSxHQUFHLENBQUNDLEdBQUQsRUFBTUMsT0FBTixFQUFlQyxRQUFmLEVBQXlCO0FBQ3hCLElB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
