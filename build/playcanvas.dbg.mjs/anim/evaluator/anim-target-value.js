/**
 * @license
 * PlayCanvas Engine v1.57.1 revision 256dd83c2 (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { Quat } from '../../math/quat.js';
import { ANIM_LAYER_OVERWRITE, ANIM_LAYER_ADDITIVE } from '../controller/constants.js';
import { AnimEvaluator } from './anim-evaluator.js';
import { math } from '../../math/math.js';

class AnimTargetValue {
  constructor(component, type) {
    this._component = component;
    this.mask = new Int8Array(component.layers.length);
    this.weights = new Float32Array(component.layers.length);
    this.totalWeight = 0;
    this.counter = 0;
    this.layerCounter = 0;
    this.valueType = type;
    this.dirty = true;
    this.value = type === AnimTargetValue.TYPE_QUAT ? [0, 0, 0, 1] : [0, 0, 0];
    this.baseValue = null;
    this.setter = null;
  }

  get _normalizeWeights() {
    return this._component.normalizeWeights;
  }

  getWeight(index) {
    if (this.dirty) this.updateWeights();

    if (this._normalizeWeights && this.totalWeight === 0 || !this.mask[index]) {
      return 0;
    } else if (this._normalizeWeights) {
      return this.weights[index] / this.totalWeight;
    }

    return math.clamp(this.weights[index], 0, 1);
  }

  _layerBlendType(index) {
    return this._component.layers[index].blendType;
  }

  setMask(index, value) {
    this.mask[index] = value;

    if (this._normalizeWeights) {
      if (this._component.layers[index].blendType === ANIM_LAYER_OVERWRITE) {
        this.mask = this.mask.fill(0, 0, index);
      }

      this.dirty = true;
    }
  }

  updateWeights() {
    this.totalWeight = 0;

    for (let i = 0; i < this.weights.length; i++) {
      this.weights[i] = this._component.layers[i].weight;
      this.totalWeight += this.mask[i] * this.weights[i];
    }

    this.dirty = false;
  }

  updateValue(index, value) {
    if (this.counter === 0) {
      AnimEvaluator._set(this.value, AnimTargetValue.IDENTITY_QUAT_ARR, this.valueType);

      if (!this._normalizeWeights) {
        AnimEvaluator._blend(this.value, this.baseValue, 1, this.valueType);
      }
    }

    if (!this.mask[index] || this.getWeight(index) === 0) return;

    if (this._layerBlendType(index) === ANIM_LAYER_ADDITIVE && !this._normalizeWeights) {
      if (this.valueType === AnimTargetValue.TYPE_QUAT) {
        const v = AnimTargetValue.q1.set(this.value[0], this.value[1], this.value[2], this.value[3]);
        const aV1 = AnimTargetValue.q2.set(this.baseValue[0], this.baseValue[1], this.baseValue[2], this.baseValue[3]);
        const aV2 = AnimTargetValue.q3.set(value[0], value[1], value[2], value[3]);
        const aV = aV1.invert().mul(aV2);
        aV.slerp(Quat.IDENTITY, aV, this.getWeight(index));
        v.mul(aV);
        AnimTargetValue.quatArr[0] = v.x;
        AnimTargetValue.quatArr[1] = v.y;
        AnimTargetValue.quatArr[2] = v.z;
        AnimTargetValue.quatArr[3] = v.w;

        AnimEvaluator._set(this.value, AnimTargetValue.quatArr, this.valueType);
      } else {
        AnimTargetValue.vecArr[0] = value[0] - this.baseValue[0];
        AnimTargetValue.vecArr[1] = value[1] - this.baseValue[1];
        AnimTargetValue.vecArr[2] = value[2] - this.baseValue[2];

        AnimEvaluator._blend(this.value, AnimTargetValue.vecArr, this.getWeight(index), this.valueType, true);
      }
    } else {
      AnimEvaluator._blend(this.value, value, this.getWeight(index), this.valueType);
    }

    if (this.setter) this.setter(this.value);
  }

  unbind() {
    if (this.setter) {
      this.setter(this.baseValue);
    }
  }

}

AnimTargetValue.TYPE_QUAT = 'quaternion';
AnimTargetValue.TYPE_VEC3 = 'vector3';
AnimTargetValue.q1 = new Quat();
AnimTargetValue.q2 = new Quat();
AnimTargetValue.q3 = new Quat();
AnimTargetValue.quatArr = [0, 0, 0, 1];
AnimTargetValue.vecArr = [0, 0, 0];
AnimTargetValue.IDENTITY_QUAT_ARR = [0, 0, 0, 1];

export { AnimTargetValue };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbS10YXJnZXQtdmFsdWUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hbmltL2V2YWx1YXRvci9hbmltLXRhcmdldC12YWx1ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBRdWF0IH0gZnJvbSAnLi4vLi4vbWF0aC9xdWF0LmpzJztcbmltcG9ydCB7IEFOSU1fTEFZRVJfQURESVRJVkUsIEFOSU1fTEFZRVJfT1ZFUldSSVRFIH0gZnJvbSAnLi4vY29udHJvbGxlci9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgQW5pbUV2YWx1YXRvciB9IGZyb20gJy4uL2V2YWx1YXRvci9hbmltLWV2YWx1YXRvci5qcyc7XG5pbXBvcnQgeyBtYXRoIH0gZnJvbSAnLi4vLi4vbWF0aC9tYXRoLmpzJztcblxuLyoqXG4gKiBVc2VkIHRvIHN0b3JlIGFuZCB1cGRhdGUgdGhlIHZhbHVlIG9mIGFuIGFuaW1hdGlvbiB0YXJnZXQuIFRoaXMgY29tYmluZXMgdGhlIHZhbHVlcyBvZiBtdWx0aXBsZVxuICogbGF5ZXIgdGFyZ2V0cyBpbnRvIGEgc2luZ2xlIHZhbHVlLlxuICpcbiAqIEBpZ25vcmVcbiAqL1xuY2xhc3MgQW5pbVRhcmdldFZhbHVlIHtcbiAgICBzdGF0aWMgVFlQRV9RVUFUID0gJ3F1YXRlcm5pb24nO1xuXG4gICAgc3RhdGljIFRZUEVfVkVDMyA9ICd2ZWN0b3IzJztcblxuICAgIHN0YXRpYyBxMSA9IG5ldyBRdWF0KCk7XG5cbiAgICBzdGF0aWMgcTIgPSBuZXcgUXVhdCgpO1xuXG4gICAgc3RhdGljIHEzID0gbmV3IFF1YXQoKTtcblxuICAgIHN0YXRpYyBxdWF0QXJyID0gWzAsIDAsIDAsIDFdO1xuXG4gICAgc3RhdGljIHZlY0FyciA9IFswLCAwLCAwXTtcblxuICAgIHN0YXRpYyBJREVOVElUWV9RVUFUX0FSUiA9IFswLCAwLCAwLCAxXTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBBbmltVGFyZ2V0VmFsdWUgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0FuaW1Db21wb25lbnR9IGNvbXBvbmVudCAtIFRoZSBhbmltIGNvbXBvbmVudCB0aGlzIHRhcmdldCB2YWx1ZSBpcyBhc3NvY2lhdGVkIHdpdGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBUaGUgdHlwZSBvZiB2YWx1ZSBzdG9yZWQsIGVpdGhlciBxdWF0IG9yIHZlYzMuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY29tcG9uZW50LCB0eXBlKSB7XG4gICAgICAgIHRoaXMuX2NvbXBvbmVudCA9IGNvbXBvbmVudDtcbiAgICAgICAgdGhpcy5tYXNrID0gbmV3IEludDhBcnJheShjb21wb25lbnQubGF5ZXJzLmxlbmd0aCk7XG4gICAgICAgIHRoaXMud2VpZ2h0cyA9IG5ldyBGbG9hdDMyQXJyYXkoY29tcG9uZW50LmxheWVycy5sZW5ndGgpO1xuICAgICAgICB0aGlzLnRvdGFsV2VpZ2h0ID0gMDtcbiAgICAgICAgdGhpcy5jb3VudGVyID0gMDtcbiAgICAgICAgdGhpcy5sYXllckNvdW50ZXIgPSAwO1xuICAgICAgICB0aGlzLnZhbHVlVHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xuICAgICAgICB0aGlzLnZhbHVlID0gKHR5cGUgPT09IEFuaW1UYXJnZXRWYWx1ZS5UWVBFX1FVQVQgPyBbMCwgMCwgMCwgMV0gOiBbMCwgMCwgMF0pO1xuICAgICAgICB0aGlzLmJhc2VWYWx1ZSA9IG51bGw7XG4gICAgICAgIHRoaXMuc2V0dGVyID0gbnVsbDtcbiAgICB9XG5cbiAgICBnZXQgX25vcm1hbGl6ZVdlaWdodHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb21wb25lbnQubm9ybWFsaXplV2VpZ2h0cztcbiAgICB9XG5cbiAgICBnZXRXZWlnaHQoaW5kZXgpIHtcbiAgICAgICAgaWYgKHRoaXMuZGlydHkpIHRoaXMudXBkYXRlV2VpZ2h0cygpO1xuICAgICAgICBpZiAodGhpcy5fbm9ybWFsaXplV2VpZ2h0cyAmJiB0aGlzLnRvdGFsV2VpZ2h0ID09PSAwIHx8ICF0aGlzLm1hc2tbaW5kZXhdKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ub3JtYWxpemVXZWlnaHRzKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy53ZWlnaHRzW2luZGV4XSAvIHRoaXMudG90YWxXZWlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1hdGguY2xhbXAodGhpcy53ZWlnaHRzW2luZGV4XSwgMCwgMSk7XG4gICAgfVxuXG4gICAgX2xheWVyQmxlbmRUeXBlKGluZGV4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb21wb25lbnQubGF5ZXJzW2luZGV4XS5ibGVuZFR5cGU7XG4gICAgfVxuXG4gICAgc2V0TWFzayhpbmRleCwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5tYXNrW2luZGV4XSA9IHZhbHVlO1xuICAgICAgICBpZiAodGhpcy5fbm9ybWFsaXplV2VpZ2h0cykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2NvbXBvbmVudC5sYXllcnNbaW5kZXhdLmJsZW5kVHlwZSA9PT0gQU5JTV9MQVlFUl9PVkVSV1JJVEUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1hc2sgPSB0aGlzLm1hc2suZmlsbCgwLCAwLCBpbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZVdlaWdodHMoKSB7XG4gICAgICAgIHRoaXMudG90YWxXZWlnaHQgPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMud2VpZ2h0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy53ZWlnaHRzW2ldID0gdGhpcy5fY29tcG9uZW50LmxheWVyc1tpXS53ZWlnaHQ7XG4gICAgICAgICAgICB0aGlzLnRvdGFsV2VpZ2h0ICs9IHRoaXMubWFza1tpXSAqIHRoaXMud2VpZ2h0c1tpXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdXBkYXRlVmFsdWUoaW5kZXgsIHZhbHVlKSB7XG4gICAgICAgIC8vIGFsd2F5cyByZXNldCB0aGUgdmFsdWUgb2YgdGhlIHRhcmdldCB3aGVuIHRoZSBjb3VudGVyIGlzIDBcbiAgICAgICAgaWYgKHRoaXMuY291bnRlciA9PT0gMCkge1xuICAgICAgICAgICAgQW5pbUV2YWx1YXRvci5fc2V0KHRoaXMudmFsdWUsIEFuaW1UYXJnZXRWYWx1ZS5JREVOVElUWV9RVUFUX0FSUiwgdGhpcy52YWx1ZVR5cGUpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9ub3JtYWxpemVXZWlnaHRzKSB7XG4gICAgICAgICAgICAgICAgQW5pbUV2YWx1YXRvci5fYmxlbmQodGhpcy52YWx1ZSwgdGhpcy5iYXNlVmFsdWUsIDEsIHRoaXMudmFsdWVUeXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMubWFza1tpbmRleF0gfHwgdGhpcy5nZXRXZWlnaHQoaW5kZXgpID09PSAwKSByZXR1cm47XG4gICAgICAgIGlmICh0aGlzLl9sYXllckJsZW5kVHlwZShpbmRleCkgPT09IEFOSU1fTEFZRVJfQURESVRJVkUgJiYgIXRoaXMuX25vcm1hbGl6ZVdlaWdodHMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlVHlwZSA9PT0gQW5pbVRhcmdldFZhbHVlLlRZUEVfUVVBVCkge1xuICAgICAgICAgICAgICAgIC8vIGN1cnJlbnQgdmFsdWVcbiAgICAgICAgICAgICAgICBjb25zdCB2ID0gQW5pbVRhcmdldFZhbHVlLnExLnNldCh0aGlzLnZhbHVlWzBdLCB0aGlzLnZhbHVlWzFdLCB0aGlzLnZhbHVlWzJdLCB0aGlzLnZhbHVlWzNdKTtcbiAgICAgICAgICAgICAgICAvLyBhZGRpdGl2ZSB2YWx1ZVxuICAgICAgICAgICAgICAgIGNvbnN0IGFWMSA9IEFuaW1UYXJnZXRWYWx1ZS5xMi5zZXQodGhpcy5iYXNlVmFsdWVbMF0sIHRoaXMuYmFzZVZhbHVlWzFdLCB0aGlzLmJhc2VWYWx1ZVsyXSwgdGhpcy5iYXNlVmFsdWVbM10pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFWMiA9IEFuaW1UYXJnZXRWYWx1ZS5xMy5zZXQodmFsdWVbMF0sIHZhbHVlWzFdLCB2YWx1ZVsyXSwgdmFsdWVbM10pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFWID0gYVYxLmludmVydCgpLm11bChhVjIpO1xuICAgICAgICAgICAgICAgIC8vIHNjYWxlIGFkZGl0aXZlIHZhbHVlIGJ5IGl0J3Mgd2VpZ2h0XG4gICAgICAgICAgICAgICAgYVYuc2xlcnAoUXVhdC5JREVOVElUWSwgYVYsIHRoaXMuZ2V0V2VpZ2h0KGluZGV4KSk7XG4gICAgICAgICAgICAgICAgLy8gYWRkIHRoZSBhZGRpdGl2ZSB2YWx1ZSBvbnRvIHRoZSBjdXJyZW50IHZhbHVlIHRoZW4gc2V0IGl0IHRvIHRoZSB0YXJnZXRzIHZhbHVlXG4gICAgICAgICAgICAgICAgdi5tdWwoYVYpO1xuICAgICAgICAgICAgICAgIEFuaW1UYXJnZXRWYWx1ZS5xdWF0QXJyWzBdID0gdi54O1xuICAgICAgICAgICAgICAgIEFuaW1UYXJnZXRWYWx1ZS5xdWF0QXJyWzFdID0gdi55O1xuICAgICAgICAgICAgICAgIEFuaW1UYXJnZXRWYWx1ZS5xdWF0QXJyWzJdID0gdi56O1xuICAgICAgICAgICAgICAgIEFuaW1UYXJnZXRWYWx1ZS5xdWF0QXJyWzNdID0gdi53O1xuICAgICAgICAgICAgICAgIEFuaW1FdmFsdWF0b3IuX3NldCh0aGlzLnZhbHVlLCBBbmltVGFyZ2V0VmFsdWUucXVhdEFyciwgdGhpcy52YWx1ZVR5cGUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBBbmltVGFyZ2V0VmFsdWUudmVjQXJyWzBdID0gdmFsdWVbMF0gLSB0aGlzLmJhc2VWYWx1ZVswXTtcbiAgICAgICAgICAgICAgICBBbmltVGFyZ2V0VmFsdWUudmVjQXJyWzFdID0gdmFsdWVbMV0gLSB0aGlzLmJhc2VWYWx1ZVsxXTtcbiAgICAgICAgICAgICAgICBBbmltVGFyZ2V0VmFsdWUudmVjQXJyWzJdID0gdmFsdWVbMl0gLSB0aGlzLmJhc2VWYWx1ZVsyXTtcbiAgICAgICAgICAgICAgICBBbmltRXZhbHVhdG9yLl9ibGVuZCh0aGlzLnZhbHVlLCBBbmltVGFyZ2V0VmFsdWUudmVjQXJyLCB0aGlzLmdldFdlaWdodChpbmRleCksIHRoaXMudmFsdWVUeXBlLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIEFuaW1FdmFsdWF0b3IuX2JsZW5kKHRoaXMudmFsdWUsIHZhbHVlLCB0aGlzLmdldFdlaWdodChpbmRleCksIHRoaXMudmFsdWVUeXBlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zZXR0ZXIpIHRoaXMuc2V0dGVyKHRoaXMudmFsdWUpO1xuICAgIH1cblxuICAgIHVuYmluZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuc2V0dGVyKSB7XG4gICAgICAgICAgICB0aGlzLnNldHRlcih0aGlzLmJhc2VWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCB7XG4gICAgQW5pbVRhcmdldFZhbHVlXG59O1xuIl0sIm5hbWVzIjpbIkFuaW1UYXJnZXRWYWx1ZSIsImNvbnN0cnVjdG9yIiwiY29tcG9uZW50IiwidHlwZSIsIl9jb21wb25lbnQiLCJtYXNrIiwiSW50OEFycmF5IiwibGF5ZXJzIiwibGVuZ3RoIiwid2VpZ2h0cyIsIkZsb2F0MzJBcnJheSIsInRvdGFsV2VpZ2h0IiwiY291bnRlciIsImxheWVyQ291bnRlciIsInZhbHVlVHlwZSIsImRpcnR5IiwidmFsdWUiLCJUWVBFX1FVQVQiLCJiYXNlVmFsdWUiLCJzZXR0ZXIiLCJfbm9ybWFsaXplV2VpZ2h0cyIsIm5vcm1hbGl6ZVdlaWdodHMiLCJnZXRXZWlnaHQiLCJpbmRleCIsInVwZGF0ZVdlaWdodHMiLCJtYXRoIiwiY2xhbXAiLCJfbGF5ZXJCbGVuZFR5cGUiLCJibGVuZFR5cGUiLCJzZXRNYXNrIiwiQU5JTV9MQVlFUl9PVkVSV1JJVEUiLCJmaWxsIiwiaSIsIndlaWdodCIsInVwZGF0ZVZhbHVlIiwiQW5pbUV2YWx1YXRvciIsIl9zZXQiLCJJREVOVElUWV9RVUFUX0FSUiIsIl9ibGVuZCIsIkFOSU1fTEFZRVJfQURESVRJVkUiLCJ2IiwicTEiLCJzZXQiLCJhVjEiLCJxMiIsImFWMiIsInEzIiwiYVYiLCJpbnZlcnQiLCJtdWwiLCJzbGVycCIsIlF1YXQiLCJJREVOVElUWSIsInF1YXRBcnIiLCJ4IiwieSIsInoiLCJ3IiwidmVjQXJyIiwidW5iaW5kIiwiVFlQRV9WRUMzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBV0EsTUFBTUEsZUFBTixDQUFzQjtBQXVCbEJDLEVBQUFBLFdBQVcsQ0FBQ0MsU0FBRCxFQUFZQyxJQUFaLEVBQWtCO0lBQ3pCLElBQUtDLENBQUFBLFVBQUwsR0FBa0JGLFNBQWxCLENBQUE7SUFDQSxJQUFLRyxDQUFBQSxJQUFMLEdBQVksSUFBSUMsU0FBSixDQUFjSixTQUFTLENBQUNLLE1BQVYsQ0FBaUJDLE1BQS9CLENBQVosQ0FBQTtJQUNBLElBQUtDLENBQUFBLE9BQUwsR0FBZSxJQUFJQyxZQUFKLENBQWlCUixTQUFTLENBQUNLLE1BQVYsQ0FBaUJDLE1BQWxDLENBQWYsQ0FBQTtJQUNBLElBQUtHLENBQUFBLFdBQUwsR0FBbUIsQ0FBbkIsQ0FBQTtJQUNBLElBQUtDLENBQUFBLE9BQUwsR0FBZSxDQUFmLENBQUE7SUFDQSxJQUFLQyxDQUFBQSxZQUFMLEdBQW9CLENBQXBCLENBQUE7SUFDQSxJQUFLQyxDQUFBQSxTQUFMLEdBQWlCWCxJQUFqQixDQUFBO0lBQ0EsSUFBS1ksQ0FBQUEsS0FBTCxHQUFhLElBQWIsQ0FBQTtJQUNBLElBQUtDLENBQUFBLEtBQUwsR0FBY2IsSUFBSSxLQUFLSCxlQUFlLENBQUNpQixTQUF6QixHQUFxQyxDQUFDLENBQUQsRUFBSSxD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
