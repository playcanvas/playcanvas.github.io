/**
 * @license
 * PlayCanvas Engine v1.57.1 revision 256dd83c2 (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { Debug } from '../../core/debug.js';
import { AnimBinder } from './anim-binder.js';
import { AnimTarget } from '../evaluator/anim-target.js';
import { Entity } from '../../framework/entity.js';

class DefaultAnimBinder {
  constructor(graph) {
    this._isPathInMask = (path, checkMaskValue) => {
      const maskItem = this._mask[path];
      if (!maskItem) return false;else if (maskItem.children || checkMaskValue && maskItem.value !== false) return true;
      return false;
    };

    this.graph = graph;
    if (!graph) return;
    this._mask = null;
    const nodes = {};

    const flatten = function flatten(node) {
      nodes[node.name] = node;

      for (let i = 0; i < node.children.length; ++i) {
        flatten(node.children[i]);
      }
    };

    flatten(graph);
    this.nodes = nodes;
    this.targetCache = {};
    this.visitedFallbackGraphPaths = {};

    const findMeshInstances = function findMeshInstances(node) {
      let object = node;

      while (object && !(object instanceof Entity)) {
        object = object.parent;
      }

      let meshInstances;

      if (object) {
        if (object.render) {
          meshInstances = object.render.meshInstances;
        } else if (object.model) {
          meshInstances = object.model.meshInstances;
        }
      }

      return meshInstances;
    };

    this.nodeCounts = {};
    this.activeNodes = [];
    this.handlers = {
      'localPosition': function (node) {
        const object = node.localPosition;

        const func = function func(value) {
          object.set(...value);
        };

        return DefaultAnimBinder.createAnimTarget(func, 'vector', 3, node, 'localPosition');
      },
      'localRotation': function (node) {
        const object = node.localRotation;

        const func = function func(value) {
          object.set(...value);
        };

        return DefaultAnimBinder.createAnimTarget(func, 'quaternion', 4, node, 'localRotation');
      },
      'localScale': function (node) {
        const object = node.localScale;

        const func = function func(value) {
          object.set(...value);
        };

        return DefaultAnimBinder.createAnimTarget(func, 'vector', 3, node, 'localScale');
      },
      'weight': function (node, weightName) {
        if (weightName.indexOf('name.') === 0) {
          weightName = weightName.replace('name.', '');
        } else {
          weightName = Number(weightName);
        }

        const meshInstances = findMeshInstances(node);

        if (meshInstances) {
          for (let i = 0; i < meshInstances.length; ++i) {
            if (meshInstances[i].node.name === node.name && meshInstances[i].morphInstance) {
              const morphInstance = meshInstances[i].morphInstance;

              const func = value => {
                morphInstance.setWeight(weightName, value[0]);
              };

              return DefaultAnimBinder.createAnimTarget(func, 'number', 1, node, `weight.${weightName}`);
            }
          }
        }

        return null;
      },
      'materialTexture': (node, textureName) => {
        const meshInstances = findMeshInstances(node);

        if (meshInstances) {
          let meshInstance;

          for (let i = 0; i < meshInstances.length; ++i) {
            if (meshInstances[i].node.name === node.name) {
              meshInstance = meshInstances[i];
              break;
            }
          }

          if (meshInstance) {
            const func = value => {
              const textureAsset = this.animComponent.system.app.assets.get(value[0]);

              if (textureAsset && textureAsset.resource && textureAsset.type === 'texture') {
                meshInstance.material[textureName] = textureAsset.resource;
                meshInstance.material.update();
              }
            };

            return DefaultAnimBinder.createAnimTarget(func, 'vector', 1, node, 'materialTexture', 'material');
          }
        }

        return null;
      }
    };
  }

  _isPathActive(path) {
    if (!this._mask) return true;
    const rootNodeNames = [path.entityPath[0], this.graph.name];

    for (let j = 0; j < rootNodeNames.length; ++j) {
      let currEntityPath = rootNodeNames[j];
      if (this._isPathInMask(currEntityPath, path.entityPath.length === 1)) return true;

      for (let i = 1; i < path.entityPath.length; i++) {
        currEntityPath += '/' + path.entityPath[i];
        if (this._isPathInMask(currEntityPath, i === path.entityPath.length - 1)) return true;
      }
    }

    return false;
  }

  findNode(path) {
    if (!this._isPathActive(path)) {
      return null;
    }

    let node;

    if (this.graph) {
      node = this.graph.findByPath(path.entityPath);

      if (!node) {
        node = this.graph.findByPath(path.entityPath.slice(1));
      }
    }

    if (!node) {
      node = this.nodes[path.entityPath[path.entityPath.length - 1] || ""];
      const fallbackGraphPath = AnimBinder.encode(path.entityPath[path.entityPath.length - 1] || "", 'graph', path.propertyPath);

      if (this.visitedFallbackGraphPaths[fallbackGraphPath] === 1) {
        Debug.warn(`Anim Binder: Multiple animation curves with the path ${fallbackGraphPath} are present in the ${this.graph.path} graph which may result in the incorrect binding of animations`);
      }

      if (!Number.isFinite(this.visitedFallbackGraphPaths[fallbackGraphPath])) {
        this.visitedFallbackGraphPaths[fallbackGraphPath] = 0;
      } else {
        this.visitedFallbackGraphPaths[fallbackGraphPath]++;
      }
    }

    return node;
  }

  static createAnimTarget(func, type, valueCount, node, propertyPath, componentType) {
    const targetPath = AnimBinder.encode(node.path, componentType ? componentType : 'entity', propertyPath);
    return new AnimTarget(func, type, valueCount, targetPath);
  }

  resolve(path) {
    const encodedPath = AnimBinder.encode(path.entityPath, path.component, path.propertyPath);
    let target = this.targetCache[encodedPath];
    if (target) return target;
    const node = this.findNode(path);

    if (!node) {
      return null;
    }

    const handler = this.handlers[path.propertyPath];

    if (!handler) {
      return null;
    }

    target = handler(node);

    if (!target) {
      return null;
    }

    this.targetCache[encodedPath] = target;

    if (!this.nodeCounts[node.path]) {
      this.activeNodes.push(node);
      this.nodeCounts[node.path] = 1;
    } else {
      this.nodeCounts[node.path]++;
    }

    return target;
  }

  unresolve(path) {
    if (path.component !== 'graph') return;
    const node = this.nodes[path.entityPath[path.entityPath.length - 1] || ""];
    this.nodeCounts[node.path]--;

    if (this.nodeCounts[node.path] === 0) {
      const activeNodes = this.activeNodes;
      const i = activeNodes.indexOf(node.node);
      const len = activeNodes.length;

      if (i < len - 1) {
        activeNodes[i] = activeNodes[len - 1];
      }

      activeNodes.pop();
    }
  }

  update(deltaTime) {
    const activeNodes = this.activeNodes;

    for (let i = 0; i < activeNodes.length; ++i) {
      activeNodes[i]._dirtifyLocal();
    }
  }

  assignMask(mask) {
    if (mask !== this._mask) {
      this._mask = mask;
      return true;
    }

    return false;
  }

}

export { DefaultAnimBinder };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1hbmltLWJpbmRlci5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FuaW0vYmluZGVyL2RlZmF1bHQtYW5pbS1iaW5kZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGVidWcgfSBmcm9tICcuLi8uLi9jb3JlL2RlYnVnLmpzJztcbmltcG9ydCB7IEFuaW1CaW5kZXIgfSBmcm9tICcuL2FuaW0tYmluZGVyLmpzJztcbmltcG9ydCB7IEFuaW1UYXJnZXQgfSBmcm9tICcuLi9ldmFsdWF0b3IvYW5pbS10YXJnZXQuanMnO1xuaW1wb3J0IHsgRW50aXR5IH0gZnJvbSAnLi4vLi4vZnJhbWV3b3JrL2VudGl0eS5qcyc7XG4vKipcbiAqIEltcGxlbWVudGF0aW9uIG9mIHtAbGluayBBbmltQmluZGVyfSBmb3IgYW5pbWF0aW5nIGEgc2tlbGV0b24gaW4gdGhlIGdyYXBoLW5vZGUgaGllcmFyY2h5LlxuICpcbiAqIEBpbXBsZW1lbnRzIHtBbmltQmluZGVyfVxuICogQGlnbm9yZVxuICovXG5jbGFzcyBEZWZhdWx0QW5pbUJpbmRlciB7XG4gICAgY29uc3RydWN0b3IoZ3JhcGgpIHtcbiAgICAgICAgdGhpcy5ncmFwaCA9IGdyYXBoO1xuXG4gICAgICAgIGlmICghZ3JhcGgpIHJldHVybjtcblxuICAgICAgICB0aGlzLl9tYXNrID0gbnVsbDtcblxuICAgICAgICBjb25zdCBub2RlcyA9IHsgfTtcbiAgICAgICAgLy8gY2FjaGUgbm9kZSBuYW1lcyBzbyB3ZSBjYW4gcXVpY2tseSByZXNvbHZlIGFuaW1hdGlvbiBwYXRoc1xuICAgICAgICBjb25zdCBmbGF0dGVuID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgIG5vZGVzW25vZGUubmFtZV0gPSBub2RlO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2RlLmNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgZmxhdHRlbihub2RlLmNoaWxkcmVuW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgZmxhdHRlbihncmFwaCk7XG4gICAgICAgIHRoaXMubm9kZXMgPSBub2RlcztcbiAgICAgICAgdGhpcy50YXJnZXRDYWNoZSA9IHt9O1xuICAgICAgICAvLyAjaWYgX0RFQlVHXG4gICAgICAgIHRoaXMudmlzaXRlZEZhbGxiYWNrR3JhcGhQYXRocyA9IHt9O1xuICAgICAgICAvLyAjZW5kaWZcblxuICAgICAgICBjb25zdCBmaW5kTWVzaEluc3RhbmNlcyA9IGZ1bmN0aW9uIChub2RlKSB7XG5cbiAgICAgICAgICAgIC8vIHdhbGsgdXAgdG8gdGhlIGZpcnN0IHBhcmVudCBub2RlIG9mIGVudGl0eSB0eXBlIChza2lwcyBpbnRlcm5hbCBub2RlcyBvZiBNb2RlbClcbiAgICAgICAgICAgIGxldCBvYmplY3QgPSBub2RlO1xuICAgICAgICAgICAgd2hpbGUgKG9iamVjdCAmJiAhKG9iamVjdCBpbnN0YW5jZW9mIEVudGl0eSkpIHtcbiAgICAgICAgICAgICAgICBvYmplY3QgPSBvYmplY3QucGFyZW50O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBnZXQgbWVzaEluc3RhbmNlcyBmcm9tIGVpdGhlciBtb2RlbCBvciByZW5kZXIgY29tcG9uZW50XG4gICAgICAgICAgICBsZXQgbWVzaEluc3RhbmNlcztcbiAgICAgICAgICAgIGlmIChvYmplY3QpIHtcbiAgICAgICAgICAgICAgICBpZiAob2JqZWN0LnJlbmRlcikge1xuICAgICAgICAgICAgICAgICAgICBtZXNoSW5zdGFuY2VzID0gb2JqZWN0LnJlbmRlci5tZXNoSW5zdGFuY2VzO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob2JqZWN0Lm1vZGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc2hJbnN0YW5jZXMgPSBvYmplY3QubW9kZWwubWVzaEluc3RhbmNlcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWVzaEluc3RhbmNlcztcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLm5vZGVDb3VudHMgPSB7fTsgICAgICAgICAgICAgICAvLyBtYXAgb2Ygbm9kZSBwYXRoIC0+IGNvdW50XG4gICAgICAgIHRoaXMuYWN0aXZlTm9kZXMgPSBbXTsgICAgICAgICAgICAgIC8vIGxpc3Qgb2YgYWN0aXZlIG5vZGVzXG4gICAgICAgIHRoaXMuaGFuZGxlcnMgPSB7XG4gICAgICAgICAgICAnbG9jYWxQb3NpdGlvbic6IGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb2JqZWN0ID0gbm9kZS5sb2NhbFBvc2l0aW9uO1xuICAgICAgICAgICAgICAgIGNvbnN0IGZ1bmMgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0LnNldCguLi52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4gRGVmYXVsdEFuaW1CaW5kZXIuY3JlYXRlQW5pbVRhcmdldChmdW5jLCAndmVjdG9yJywgMywgbm9kZSwgJ2xvY2FsUG9zaXRpb24nKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICdsb2NhbFJvdGF0aW9uJzogZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBvYmplY3QgPSBub2RlLmxvY2FsUm90YXRpb247XG4gICAgICAgICAgICAgICAgY29uc3QgZnVuYyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBvYmplY3Quc2V0KC4uLnZhbHVlKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBEZWZhdWx0QW5pbUJpbmRlci5jcmVhdGVBbmltVGFyZ2V0KGZ1bmMsICdxdWF0ZXJuaW9uJywgNCwgbm9kZSwgJ2xvY2FsUm90YXRpb24nKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICdsb2NhbFNjYWxlJzogZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBvYmplY3QgPSBub2RlLmxvY2FsU2NhbGU7XG4gICAgICAgICAgICAgICAgY29uc3QgZnVuYyA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBvYmplY3Quc2V0KC4uLnZhbHVlKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBEZWZhdWx0QW5pbUJpbmRlci5jcmVhdGVBbmltVGFyZ2V0KGZ1bmMsICd2ZWN0b3InLCAzLCBub2RlLCAnbG9jYWxTY2FsZScpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgJ3dlaWdodCc6IGZ1bmN0aW9uIChub2RlLCB3ZWlnaHROYW1lKSB7XG4gICAgICAgICAgICAgICAgaWYgKHdlaWdodE5hbWUuaW5kZXhPZignbmFtZS4nKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB3ZWlnaHROYW1lID0gd2VpZ2h0TmFtZS5yZXBsYWNlKCduYW1lLicsICcnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB3ZWlnaHROYW1lID0gTnVtYmVyKHdlaWdodE5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBtZXNoSW5zdGFuY2VzID0gZmluZE1lc2hJbnN0YW5jZXMobm9kZSk7XG4gICAgICAgICAgICAgICAgaWYgKG1lc2hJbnN0YW5jZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtZXNoSW5zdGFuY2VzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWVzaEluc3RhbmNlc1tpXS5ub2RlLm5hbWUgPT09IG5vZGUubmFtZSAmJiBtZXNoSW5zdGFuY2VzW2ldLm1vcnBoSW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtb3JwaEluc3RhbmNlID0gbWVzaEluc3RhbmNlc1tpXS5tb3JwaEluc3RhbmNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZ1bmMgPSAodmFsdWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9ycGhJbnN0YW5jZS5zZXRXZWlnaHQod2VpZ2h0TmFtZSwgdmFsdWVbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERlZmF1bHRBbmltQmluZGVyLmNyZWF0ZUFuaW1UYXJnZXQoZnVuYywgJ251bWJlcicsIDEsIG5vZGUsIGB3ZWlnaHQuJHt3ZWlnaHROYW1lfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ21hdGVyaWFsVGV4dHVyZSc6IChub2RlLCB0ZXh0dXJlTmFtZSkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1lc2hJbnN0YW5jZXMgPSBmaW5kTWVzaEluc3RhbmNlcyhub2RlKTtcbiAgICAgICAgICAgICAgICBpZiAobWVzaEluc3RhbmNlcykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbWVzaEluc3RhbmNlO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1lc2hJbnN0YW5jZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtZXNoSW5zdGFuY2VzW2ldLm5vZGUubmFtZSA9PT0gbm9kZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzaEluc3RhbmNlID0gbWVzaEluc3RhbmNlc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAobWVzaEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmdW5jID0gKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dHVyZUFzc2V0ID0gdGhpcy5hbmltQ29tcG9uZW50LnN5c3RlbS5hcHAuYXNzZXRzLmdldCh2YWx1ZVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRleHR1cmVBc3NldCAmJiB0ZXh0dXJlQXNzZXQucmVzb3VyY2UgJiYgdGV4dHVyZUFzc2V0LnR5cGUgPT09ICd0ZXh0dXJlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNoSW5zdGFuY2UubWF0ZXJpYWxbdGV4dHVyZU5hbWVdID0gdGV4dHVyZUFzc2V0LnJlc291cmNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNoSW5zdGFuY2UubWF0ZXJpYWwudXBkYXRlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBEZWZhdWx0QW5pbUJpbmRlci5jcmVhdGVBbmltVGFyZ2V0KGZ1bmMsICd2ZWN0b3InLCAxLCBub2RlLCAnbWF0ZXJpYWxUZXh0dXJlJywgJ21hdGVyaWFsJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBfaXNQYXRoSW5NYXNrID0gKHBhdGgsIGNoZWNrTWFza1ZhbHVlKSA9PiB7XG4gICAgICAgIGNvbnN0IG1hc2tJdGVtID0gdGhpcy5fbWFza1twYXRoXTtcbiAgICAgICAgaWYgKCFtYXNrSXRlbSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBlbHNlIGlmIChtYXNrSXRlbS5jaGlsZHJlbiB8fCAoY2hlY2tNYXNrVmFsdWUgJiYgbWFza0l0ZW0udmFsdWUgIT09IGZhbHNlKSkgcmV0dXJuIHRydWU7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuXG4gICAgX2lzUGF0aEFjdGl2ZShwYXRoKSB7XG4gICAgICAgIGlmICghdGhpcy5fbWFzaykgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgY29uc3Qgcm9vdE5vZGVOYW1lcyA9IFtwYXRoLmVudGl0eVBhdGhbMF0sIHRoaXMuZ3JhcGgubmFtZV07XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgcm9vdE5vZGVOYW1lcy5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgbGV0IGN1cnJFbnRpdHlQYXRoID0gcm9vdE5vZGVOYW1lc1tqXTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pc1BhdGhJbk1hc2soY3VyckVudGl0eVBhdGgsIHBhdGguZW50aXR5UGF0aC5sZW5ndGggPT09IDEpKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgcGF0aC5lbnRpdHlQYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY3VyckVudGl0eVBhdGggKz0gJy8nICsgcGF0aC5lbnRpdHlQYXRoW2ldO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pc1BhdGhJbk1hc2soY3VyckVudGl0eVBhdGgsIGkgPT09IHBhdGguZW50aXR5UGF0aC5sZW5ndGggLSAxKSkgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGZpbmROb2RlKHBhdGgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9pc1BhdGhBY3RpdmUocGF0aCkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG5vZGU7XG4gICAgICAgIGlmICh0aGlzLmdyYXBoKSB7XG4gICAgICAgICAgICBub2RlID0gdGhpcy5ncmFwaC5maW5kQnlQYXRoKHBhdGguZW50aXR5UGF0aCk7XG4gICAgICAgICAgICAvLyBpZiB0aGUgcGF0aCBpcyBub3QgZm91bmQgdW5kZXIgdGhlIGdpdmVuIHJvb3Qgbm9kZSwgdHJ5IHRvIGZpbmQgdGhlIHBhdGggdXNpbmcgdGhlIHJvb3Qgbm9kZSBhcyB0aGUgYmFzZSBvZiB0aGUgcGF0aCBpbnN0ZWFkXG4gICAgICAgICAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgICAgICAgICBub2RlID0gdGhpcy5ncmFwaC5maW5kQnlQYXRoKHBhdGguZW50aXR5UGF0aC5zbGljZSgxKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFub2RlKSB7XG4gICAgICAgICAgICBub2RlID0gdGhpcy5ub2Rlc1twYXRoLmVudGl0eVBhdGhbcGF0aC5lbnRpdHlQYXRoLmxlbmd0aCAtIDFdIHx8IFwiXCJdO1xuXG4gICAgICAgICAgICAvLyAjaWYgX0RFQlVHXG4gICAgICAgICAgICBjb25zdCBmYWxsYmFja0dyYXBoUGF0aCA9IEFuaW1CaW5kZXIuZW5jb2RlKHBhdGguZW50aXR5UGF0aFtwYXRoLmVudGl0eVBhdGgubGVuZ3RoIC0gMV0gfHwgXCJcIiwgJ2dyYXBoJywgcGF0aC5wcm9wZXJ0eVBhdGgpO1xuICAgICAgICAgICAgaWYgKHRoaXMudmlzaXRlZEZhbGxiYWNrR3JhcGhQYXRoc1tmYWxsYmFja0dyYXBoUGF0aF0gPT09IDEpIHtcbiAgICAgICAgICAgICAgICBEZWJ1Zy53YXJuKGBBbmltIEJpbmRlcjogTXVsdGlwbGUgYW5pbWF0aW9uIGN1cnZlcyB3aXRoIHRoZSBwYXRoICR7ZmFsbGJhY2tHcmFwaFBhdGh9IGFyZSBwcmVzZW50IGluIHRoZSAke3RoaXMuZ3JhcGgucGF0aH0gZ3JhcGggd2hpY2ggbWF5IHJlc3VsdCBpbiB0aGUgaW5jb3JyZWN0IGJpbmRpbmcgb2YgYW5pbWF0aW9uc2ApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFOdW1iZXIuaXNGaW5pdGUodGhpcy52aXNpdGVkRmFsbGJhY2tHcmFwaFBhdGhzW2ZhbGxiYWNrR3JhcGhQYXRoXSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZpc2l0ZWRGYWxsYmFja0dyYXBoUGF0aHNbZmFsbGJhY2tHcmFwaFBhdGhdID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy52aXNpdGVkRmFsbGJhY2tHcmFwaFBhdGhzW2ZhbGxiYWNrR3JhcGhQYXRoXSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gI2VuZGlmXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuXG4gICAgc3RhdGljIGNyZWF0ZUFuaW1UYXJnZXQoZnVuYywgdHlwZSwgdmFsdWVDb3VudCwgbm9kZSwgcHJvcGVydHlQYXRoLCBjb21wb25lbnRUeXBlKSB7XG4gICAgICAgIGNvbnN0IHRhcmdldFBhdGggPSBBbmltQmluZGVyLmVuY29kZShub2RlLnBhdGgsIGNvbXBvbmVudFR5cGUgPyBjb21wb25lbnRUeXBlIDogJ2VudGl0eScsIHByb3BlcnR5UGF0aCk7XG4gICAgICAgIHJldHVybiBuZXcgQW5pbVRhcmdldChmdW5jLCB0eXBlLCB2YWx1ZUNvdW50LCB0YXJnZXRQYXRoKTtcbiAgICB9XG5cbiAgICByZXNvbHZlKHBhdGgpIHtcbiAgICAgICAgY29uc3QgZW5jb2RlZFBhdGggPSBBbmltQmluZGVyLmVuY29kZShwYXRoLmVudGl0eVBhdGgsIHBhdGguY29tcG9uZW50LCBwYXRoLnByb3BlcnR5UGF0aCk7XG4gICAgICAgIGxldCB0YXJnZXQgPSB0aGlzLnRhcmdldENhY2hlW2VuY29kZWRQYXRoXTtcbiAgICAgICAgaWYgKHRhcmdldCkgcmV0dXJuIHRhcmdldDtcblxuICAgICAgICBjb25zdCBub2RlID0gdGhpcy5maW5kTm9kZShwYXRoKTtcbiAgICAgICAgaWYgKCFub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSB0aGlzLmhhbmRsZXJzW3BhdGgucHJvcGVydHlQYXRoXTtcbiAgICAgICAgaWYgKCFoYW5kbGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRhcmdldCA9IGhhbmRsZXIobm9kZSk7XG4gICAgICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudGFyZ2V0Q2FjaGVbZW5jb2RlZFBhdGhdID0gdGFyZ2V0O1xuXG4gICAgICAgIGlmICghdGhpcy5ub2RlQ291bnRzW25vZGUucGF0aF0pIHtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlTm9kZXMucHVzaChub2RlKTtcbiAgICAgICAgICAgIHRoaXMubm9kZUNvdW50c1tub2RlLnBhdGhdID0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubm9kZUNvdW50c1tub2RlLnBhdGhdKys7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cblxuICAgIHVucmVzb2x2ZShwYXRoKSB7XG4gICAgICAgIGlmIChwYXRoLmNvbXBvbmVudCAhPT0gJ2dyYXBoJylcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICBjb25zdCBub2RlID0gdGhpcy5ub2Rlc1twYXRoLmVudGl0eVBhdGhbcGF0aC5lbnRpdHlQYXRoLmxlbmd0aCAtIDFdIHx8IFwiXCJdO1xuXG4gICAgICAgIHRoaXMubm9kZUNvdW50c1tub2RlLnBhdGhdLS07XG4gICAgICAgIGlmICh0aGlzLm5vZGVDb3VudHNbbm9kZS5wYXRoXSA9PT0gMCkge1xuICAgICAgICAgICAgY29uc3QgYWN0aXZlTm9kZXMgPSB0aGlzLmFjdGl2ZU5vZGVzO1xuICAgICAgICAgICAgY29uc3QgaSA9IGFjdGl2ZU5vZGVzLmluZGV4T2Yobm9kZS5ub2RlKTsgIC8vIDooXG4gICAgICAgICAgICBjb25zdCBsZW4gPSBhY3RpdmVOb2Rlcy5sZW5ndGg7XG4gICAgICAgICAgICBpZiAoaSA8IGxlbiAtIDEpIHtcbiAgICAgICAgICAgICAgICBhY3RpdmVOb2Rlc1tpXSA9IGFjdGl2ZU5vZGVzW2xlbiAtIDFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWN0aXZlTm9kZXMucG9wKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBmbGFnIGFuaW1hdGluZyBub2RlcyBhcyBkaXJ0eVxuICAgIHVwZGF0ZShkZWx0YVRpbWUpIHtcbiAgICAgICAgY29uc3QgYWN0aXZlTm9kZXMgPSB0aGlzLmFjdGl2ZU5vZGVzO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFjdGl2ZU5vZGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBhY3RpdmVOb2Rlc1tpXS5fZGlydGlmeUxvY2FsKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3NpZ25NYXNrKG1hc2spIHtcbiAgICAgICAgaWYgKG1hc2sgIT09IHRoaXMuX21hc2spIHtcbiAgICAgICAgICAgIHRoaXMuX21hc2sgPSBtYXNrO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgRGVmYXVsdEFuaW1CaW5kZXIgfTtcbiJdLCJuYW1lcyI6WyJEZWZhdWx0QW5pbUJpbmRlciIsImNvbnN0cnVjdG9yIiwiZ3JhcGgiLCJfaXNQYXRoSW5NYXNrIiwicGF0aCIsImNoZWNrTWFza1ZhbHVlIiwibWFza0l0ZW0iLCJfbWFzayIsImNoaWxkcmVuIiwidmFsdWUiLCJub2RlcyIsImZsYXR0ZW4iLCJub2RlIiwibmFtZSIsImkiLCJsZW5ndGgiLCJ0YXJnZXRDYWNoZSIsInZpc2l0ZWRGYWxsYmFja0dyYXBoUGF0aHMiLCJmaW5kTWVzaEluc3RhbmNlcyIsIm9iamVjdCIsIkVudGl0eSIsInBhcmVudCIsIm1lc2hJbnN0YW5jZXMiLCJyZW5kZXIiLCJtb2RlbCIsIm5vZGVDb3VudHMiLCJhY3RpdmVOb2RlcyIsImhhbmRsZXJzIiwibG9jYWxQb3NpdGlvbiIsImZ1bmMiLCJzZXQiLCJjcmVhdGVBbmltVGFyZ2V0IiwibG9jYWxSb3RhdGlvbiIsImxvY2FsU2NhbGUiLCJ3ZWlnaHROYW1lIiwiaW5kZXhPZiIsInJlcGxhY2UiLCJOdW1iZXIiLCJtb3JwaEluc3RhbmNlIiwic2V0V2VpZ2h0IiwidGV4dHVyZU5hbWUiLCJtZXNoSW5zdGFuY2UiLCJ0ZXh0dXJlQXNzZXQiLCJhbmltQ29tcG9uZW50Iiwic3lzdGVtIiwiYXBwIiwiYXNzZXRzIiwiZ2V0IiwicmVzb3VyY2UiLCJ0eXBlIiwibWF0ZXJpYWwiLCJ1cGRhdGUiLCJfaXNQYXRoQWN0aXZlIiwicm9vdE5vZGVOYW1lcyIsImVudGl0eVBhdGgiLCJqIiwiY3VyckVudGl0eVBhdGgiLCJmaW5kTm9kZSIsImZpbmRCeVBhdGgiLCJzbGljZSIsImZhbGxiYWNrR3JhcGhQYXRoIiwiQW5pbUJpbmRlciIsImVuY29kZSIsInByb3BlcnR5UGF0aCIsIkRlYnVnIiwid2FybiIsImlzRmluaXRlIiwidmFsdWVDb3VudCIsImNvbXBvbmVudFR5cGUiLCJ0YXJnZXRQYXRoIiwiQW5pbVRhcmdldCIsInJlc29sdmUiLCJlbmNvZGVkUGF0aCIsImNvbXBvbmVudCIsInRhcmdldCIsImhhbmRsZXIiLCJwdXNoIiwidW5yZXNvbHZlIiwibGVuIiwicG9wIiwiZGVsdGFUaW1lIiwiX2RpcnRpZnlMb2NhbCIsImFzc2lnbk1hc2siLCJtYXNrIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBVUEsTUFBTUEsaUJBQU4sQ0FBd0I7RUFDcEJDLFdBQVcsQ0FBQ0MsS0FBRCxFQUFRO0FBQUEsSUFBQSxJQUFBLENBcUhuQkMsYUFySG1CLEdBcUhILENBQUNDLElBQUQsRUFBT0MsY0FBUCxLQUEwQjtBQUN0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
