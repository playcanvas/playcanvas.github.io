var t="\nvoid getTBN(vec3 tangent, vec3 binormal, vec3 normal) {\n\n\t\tvec3 B = cross(normal, vObjectSpaceUpW);\n\t\tvec3 T = cross(normal, B);\n\n\t\tif (dot(B,B)==0.0) // deal with case when vObjectSpaceUpW normal are parallel\n\t\t{\n\t\t\t\tfloat major=max(max(normal.x, normal.y), normal.z);\n\n\t\t\t\tif (normal.x == major)\n\t\t\t\t{\n\t\t\t\t\t\tB=cross(normal, vec3(0,1,0));\n\t\t\t\t\t\tT=cross(normal, B);\n\t\t\t\t}\n\t\t\t\telse if (normal.y == major)\n\t\t\t\t{\n\t\t\t\t\t\tB=cross(normal, vec3(0,0,1));\n\t\t\t\t\t\tT=cross(normal, B);\n\t\t\t\t}\n\t\t\t\telse if (normal.z == major)\n\t\t\t\t{\n\t\t\t\t\t\tB=cross(normal, vec3(1,0,0));\n\t\t\t\t\t\tT=cross(normal, B);\n\t\t\t\t}\n\t\t}\n\n\t\tdTBN = mat3(normalize(T), normalize(B), normalize(normal));\n}\n";export{t as default};
