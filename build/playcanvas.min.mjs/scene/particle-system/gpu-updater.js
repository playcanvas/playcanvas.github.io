import{math as t}from"../../core/math/math.js";import{Mat3 as e}from"../../core/math/mat3.js";import{Mat4 as s}from"../../core/math/mat4.js";import{Vec3 as n}from"../../core/math/vec3.js";import{CULLFACE_NONE as o}from"../../platform/graphics/constants.js";import{BlendState as a}from"../../platform/graphics/blend-state.js";import{DepthState as i}from"../../platform/graphics/depth-state.js";import{drawQuadWithShader as r}from"../graphics/quad-render-utils.js";import{EMITTERSHAPE_BOX as l}from"../constants.js";const c=new e,m=new e,d=new e;class h{constructor(t,e){this._emitter=t,this.frameRandomUniform=new Float32Array(3),this.emitterPosUniform=new Float32Array(3),this.emitterScaleUniform=new Float32Array([1,1,1]),this.worldBoundsMulUniform=new Float32Array(3),this.worldBoundsAddUniform=new Float32Array(3),this.inBoundsSizeUniform=new Float32Array(3),this.inBoundsCenterUniform=new Float32Array(3),this.constantParticleTexIN=e.scope.resolve("particleTexIN"),this.constantParticleTexOUT=e.scope.resolve("particleTexOUT"),this.constantEmitterPos=e.scope.resolve("emitterPos"),this.constantEmitterScale=e.scope.resolve("emitterScale"),this.constantSpawnBounds=e.scope.resolve("spawnBounds"),this.constantSpawnPosInnerRatio=e.scope.resolve("spawnPosInnerRatio"),this.constantSpawnBoundsSphere=e.scope.resolve("spawnBoundsSphere"),this.constantSpawnBoundsSphereInnerRatio=e.scope.resolve("spawnBoundsSphereInnerRatio"),this.constantInitialVelocity=e.scope.resolve("initialVelocity"),this.constantFrameRandom=e.scope.resolve("frameRandom"),this.constantDelta=e.scope.resolve("delta"),this.constantRate=e.scope.resolve("rate"),this.constantRateDiv=e.scope.resolve("rateDiv"),this.constantLifetime=e.scope.resolve("lifetime"),this.constantGraphSampleSize=e.scope.resolve("graphSampleSize"),this.constantGraphNumSamples=e.scope.resolve("graphNumSamples"),this.constantInternalTex0=e.scope.resolve("internalTex0"),this.constantInternalTex1=e.scope.resolve("internalTex1"),this.constantInternalTex2=e.scope.resolve("internalTex2"),this.constantInternalTex3=e.scope.resolve("internalTex3"),this.constantEmitterMatrix=e.scope.resolve("emitterMatrix"),this.constantEmitterMatrixInv=e.scope.resolve("emitterMatrixInv"),this.constantNumParticles=e.scope.resolve("numParticles"),this.constantNumParticlesPot=e.scope.resolve("numParticlesPot"),this.constantLocalVelocityDivMult=e.scope.resolve("localVelocityDivMult"),this.constantVelocityDivMult=e.scope.resolve("velocityDivMult"),this.constantRotSpeedDivMult=e.scope.resolve("rotSpeedDivMult"),this.constantSeed=e.scope.resolve("seed"),this.constantStartAngle=e.scope.resolve("startAngle"),this.constantStartAngle2=e.scope.resolve("startAngle2"),this.constantOutBoundsMul=e.scope.resolve("outBoundsMul"),this.constantOutBoundsAdd=e.scope.resolve("outBoundsAdd"),this.constantInBoundsSize=e.scope.resolve("inBoundsSize"),this.constantInBoundsCenter=e.scope.resolve("inBoundsCenter"),this.constantMaxVel=e.scope.resolve("maxVel"),this.constantFaceTangent=e.scope.resolve("faceTangent"),this.constantFaceBinorm=e.scope.resolve("faceBinorm")}_setInputBounds(){this.inBoundsSizeUniform[0]=this._emitter.prevWorldBoundsSize.x,this.inBoundsSizeUniform[1]=this._emitter.prevWorldBoundsSize.y,this.inBoundsSizeUniform[2]=this._emitter.prevWorldBoundsSize.z,this.constantInBoundsSize.setValue(this.inBoundsSizeUniform),this.inBoundsCenterUniform[0]=this._emitter.prevWorldBoundsCenter.x,this.inBoundsCenterUniform[1]=this._emitter.prevWorldBoundsCenter.y,this.inBoundsCenterUniform[2]=this._emitter.prevWorldBoundsCenter.z,this.constantInBoundsCenter.setValue(this.inBoundsCenterUniform)}randomize(){this.frameRandomUniform[0]=Math.random(),this.frameRandomUniform[1]=Math.random(),this.frameRandomUniform[2]=Math.random()}update(e,h,u,p,v){const B=this._emitter;e.setBlendState(a.DEFAULT),e.setDepthState(i.NODEPTH),e.setCullMode(o),this.randomize(),this.constantGraphSampleSize.setValue(1/B.precision),this.constantGraphNumSamples.setValue(B.precision),this.constantNumParticles.setValue(B.numParticles),this.constantNumParticlesPot.setValue(B.numParticlesPot),this.constantInternalTex0.setValue(B.internalTex0),this.constantInternalTex1.setValue(B.internalTex1),this.constantInternalTex2.setValue(B.internalTex2),this.constantInternalTex3.setValue(B.internalTex3);const f=B.meshInstance.node,S=null===f?n.ONE:f.localScale;if(B.pack8){this.worldBoundsMulUniform[0]=B.worldBoundsMul.x,this.worldBoundsMulUniform[1]=B.worldBoundsMul.y,this.worldBoundsMulUniform[2]=B.worldBoundsMul.z,this.constantOutBoundsMul.setValue(this.worldBoundsMulUniform),this.worldBoundsAddUniform[0]=B.worldBoundsAdd.x,this.worldBoundsAddUniform[1]=B.worldBoundsAdd.y,this.worldBoundsAddUniform[2]=B.worldBoundsAdd.z,this.constantOutBoundsAdd.setValue(this.worldBoundsAddUniform),this._setInputBounds();let t=B.maxVel*Math.max(Math.max(S.x,S.y),S.z);t=Math.max(t,1),this.constantMaxVel.setValue(t)}const x=null===f||B.localSpace?n.ZERO:f.getPosition(),T=null===f?s.IDENTITY:f.getWorldTransform();B.emitterShape===l?(c.setFromMat4(h),this.constantSpawnBounds.setValue(c.data),this.constantSpawnPosInnerRatio.setValue(u)):(this.constantSpawnBoundsSphere.setValue(B.emitterRadius),this.constantSpawnBoundsSphereInnerRatio.setValue(0===B.emitterRadius?0:B.emitterRadiusInner/B.emitterRadius)),this.constantInitialVelocity.setValue(B.initialVelocity),m.setFromMat4(T),T.invertTo3x3(d),this.emitterPosUniform[0]=x.x,this.emitterPosUniform[1]=x.y,this.emitterPosUniform[2]=x.z,this.constantEmitterPos.setValue(this.emitterPosUniform),this.constantFrameRandom.setValue(this.frameRandomUniform),this.constantDelta.setValue(p),this.constantRate.setValue(B.rate),this.constantRateDiv.setValue(B.rate2-B.rate),this.constantStartAngle.setValue(B.startAngle*t.DEG_TO_RAD),this.constantStartAngle2.setValue(B.startAngle2*t.DEG_TO_RAD),this.constantSeed.setValue(B.seed),this.constantLifetime.setValue(B.lifetime),this.emitterScaleUniform[0]=S.x,this.emitterScaleUniform[1]=S.y,this.emitterScaleUniform[2]=S.z,this.constantEmitterScale.setValue(this.emitterScaleUniform),this.constantEmitterMatrix.setValue(m.data),this.constantEmitterMatrixInv.setValue(d.data),this.constantLocalVelocityDivMult.setValue(B.localVelocityUMax),this.constantVelocityDivMult.setValue(B.velocityUMax),this.constantRotSpeedDivMult.setValue(B.rotSpeedUMax[0]);let U=B.swapTex?B.particleTexOUT:B.particleTexIN;U=B.beenReset?B.particleTexStart:U;const V=B.swapTex?B.particleTexIN:B.particleTexOUT;this.constantParticleTexIN.setValue(U),r(e,B.swapTex?B.rtParticleTexIN:B.rtParticleTexOUT,v?B.shaderParticleUpdateOnStop:B.loop?B.shaderParticleUpdateRespawn:B.shaderParticleUpdateNoRespawn),B.material.setParameter("particleTexOUT",U),B.material.setParameter("particleTexIN",V),B.beenReset=!1,B.swapTex=!B.swapTex,B.prevWorldBoundsSize.copy(B.worldBoundsSize),B.prevWorldBoundsCenter.copy(B.worldBounds.center),B.pack8&&this._setInputBounds()}}export{h as ParticleGPUUpdater};
