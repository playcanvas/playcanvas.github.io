/**
 * @license
 * PlayCanvas Engine v1.61.0-dev revision 334d3791b (DEBUG PROFILER)
 * Copyright 2011-2023 PlayCanvas Ltd. All rights reserved.
 */
import { CULLFACE_NONE, PRIMITIVE_TRISTRIP, SEMANTIC_POSITION, TYPE_FLOAT32, BUFFER_STATIC } from './constants.js';
import { VertexBuffer } from './vertex-buffer.js';
import { VertexFormat } from './vertex-format.js';
import { DebugGraphics } from './debug-graphics.js';
import { DeviceCache } from './device-cache.js';

const _postEffectQuadDraw = {
  type: PRIMITIVE_TRISTRIP,
  base: 0,
  count: 4,
  indexed: false
};

const postEffectDeviceCache = new DeviceCache();
function getPostEffectQuadVB(device) {
  return postEffectDeviceCache.get(device, () => {
    const vertexFormat = new VertexFormat(device, [{
      semantic: SEMANTIC_POSITION,
      components: 2,
      type: TYPE_FLOAT32
    }]);
    const positions = new Float32Array(8);
    positions.set([-1, -1, 1, -1, -1, 1, 1, 1]);
    return new VertexBuffer(device, vertexFormat, 4, BUFFER_STATIC, positions);
  });
}

function drawQuadWithShader(device, target, shader, rect, scissorRect, useBlend = false) {
  DebugGraphics.pushGpuMarker(device, "drawQuadWithShader");
  const oldRt = device.renderTarget;
  device.setRenderTarget(target);
  device.updateBegin();
  let x, y, w, h;
  let sx, sy, sw, sh;
  if (!rect) {
    w = target ? target.width : device.width;
    h = target ? target.height : device.height;
    x = 0;
    y = 0;
  } else {
    x = rect.x;
    y = rect.y;
    w = rect.z;
    h = rect.w;
  }
  if (!scissorRect) {
    sx = x;
    sy = y;
    sw = w;
    sh = h;
  } else {
    sx = scissorRect.x;
    sy = scissorRect.y;
    sw = scissorRect.z;
    sh = scissorRect.w;
  }
  const oldVx = device.vx;
  const oldVy = device.vy;
  const oldVw = device.vw;
  const oldVh = device.vh;
  device.setViewport(x, y, w, h);
  const oldSx = device.sx;
  const oldSy = device.sy;
  const oldSw = device.sw;
  const oldSh = device.sh;
  device.setScissor(sx, sy, sw, sh);
  const oldDepthTest = device.getDepthTest();
  const oldDepthWrite = device.getDepthWrite();
  const oldCullMode = device.getCullMode();
  const oldWR = device.writeRed;
  const oldWG = device.writeGreen;
  const oldWB = device.writeBlue;
  const oldWA = device.writeAlpha;
  device.setDepthTest(false);
  device.setDepthWrite(false);
  device.setCullMode(CULLFACE_NONE);
  device.setColorWrite(true, true, true, true);
  if (!useBlend) device.setBlending(false);
  device.setVertexBuffer(getPostEffectQuadVB(device), 0);
  device.setShader(shader);
  device.draw(_postEffectQuadDraw);
  device.setDepthTest(oldDepthTest);
  device.setDepthWrite(oldDepthWrite);
  device.setCullMode(oldCullMode);
  device.setColorWrite(oldWR, oldWG, oldWB, oldWA);
  device.updateEnd();
  device.setRenderTarget(oldRt);
  device.updateBegin();
  device.setViewport(oldVx, oldVy, oldVw, oldVh);
  device.setScissor(oldSx, oldSy, oldSw, oldSh);
  DebugGraphics.popGpuMarker(device);
}

function drawTexture(device, texture, target, shader, rect, scissorRect, useBlend = false) {
  shader = shader || device.getCopyShader();
  device.constantTexSource.setValue(texture);
  drawQuadWithShader(device, target, shader, rect, scissorRect, useBlend);
}

export { drawQuadWithShader, drawTexture };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLXBvc3QtZWZmZWN0LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvcGxhdGZvcm0vZ3JhcGhpY3Mvc2ltcGxlLXBvc3QtZWZmZWN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJVRkZFUl9TVEFUSUMsIENVTExGQUNFX05PTkUsIFBSSU1JVElWRV9UUklTVFJJUCwgU0VNQU5USUNfUE9TSVRJT04sIFRZUEVfRkxPQVQzMiB9IGZyb20gJy4vY29uc3RhbnRzLmpzJztcbmltcG9ydCB7IFZlcnRleEJ1ZmZlciB9IGZyb20gJy4vdmVydGV4LWJ1ZmZlci5qcyc7XG5pbXBvcnQgeyBWZXJ0ZXhGb3JtYXQgfSBmcm9tICcuL3ZlcnRleC1mb3JtYXQuanMnO1xuaW1wb3J0IHsgRGVidWdHcmFwaGljcyB9IGZyb20gJy4vZGVidWctZ3JhcGhpY3MuanMnO1xuaW1wb3J0IHsgRGV2aWNlQ2FjaGUgfSBmcm9tICcuL2RldmljZS1jYWNoZS5qcyc7XG5cbi8vIERyYXdzIHNoYWRlZCBmdWxsLXNjcmVlbiBxdWFkIGluIGEgc2luZ2xlIGNhbGxcbmNvbnN0IF9wb3N0RWZmZWN0UXVhZERyYXcgPSB7XG4gICAgdHlwZTogUFJJTUlUSVZFX1RSSVNUUklQLFxuICAgIGJhc2U6IDAsXG4gICAgY291bnQ6IDQsXG4gICAgaW5kZXhlZDogZmFsc2Vcbn07XG5cbi8vIERldmljZSBjYWNoZSBzdG9yaW5nIGEgcXVhZCB2ZXJ0ZXggYnVmZmVyXG5jb25zdCBwb3N0RWZmZWN0RGV2aWNlQ2FjaGUgPSBuZXcgRGV2aWNlQ2FjaGUoKTtcblxuZnVuY3Rpb24gZ2V0UG9zdEVmZmVjdFF1YWRWQihkZXZpY2UpIHtcbiAgICByZXR1cm4gcG9zdEVmZmVjdERldmljZUNhY2hlLmdldChkZXZpY2UsICgpID0+IHtcbiAgICAgICAgY29uc3QgdmVydGV4Rm9ybWF0ID0gbmV3IFZlcnRleEZvcm1hdChkZXZpY2UsIFt7XG4gICAgICAgICAgICBzZW1hbnRpYzogU0VNQU5USUNfUE9TSVRJT04sXG4gICAgICAgICAgICBjb21wb25lbnRzOiAyLFxuICAgICAgICAgICAgdHlwZTogVFlQRV9GTE9BVDMyXG4gICAgICAgIH1dKTtcbiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gbmV3IEZsb2F0MzJBcnJheSg4KTtcbiAgICAgICAgcG9zaXRpb25zLnNldChbLTEsIC0xLCAxLCAtMSwgLTEsIDEsIDEsIDFdKTtcbiAgICAgICAgcmV0dXJuIG5ldyBWZXJ0ZXhCdWZmZXIoZGV2aWNlLCB2ZXJ0ZXhGb3JtYXQsIDQsIEJVRkZFUl9TVEFUSUMsIHBvc2l0aW9ucyk7XG4gICAgfSk7XG59XG5cbi8qKlxuICogRHJhd3MgYSBzY3JlZW4tc3BhY2UgcXVhZCB1c2luZyBhIHNwZWNpZmljIHNoYWRlci4gTW9zdGx5IHVzZWQgYnkgcG9zdC1lZmZlY3RzLlxuICpcbiAqIEBwYXJhbSB7aW1wb3J0KCcuL2dyYXBoaWNzLWRldmljZS5qcycpLkdyYXBoaWNzRGV2aWNlfSBkZXZpY2UgLSBUaGUgZ3JhcGhpY3MgZGV2aWNlIHVzZWQgdG8gZHJhd1xuICogdGhlIHF1YWQuXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9yZW5kZXItdGFyZ2V0LmpzJykuUmVuZGVyVGFyZ2V0fHVuZGVmaW5lZH0gdGFyZ2V0IC0gVGhlIGRlc3RpbmF0aW9uIHJlbmRlclxuICogdGFyZ2V0LiBJZiB1bmRlZmluZWQsIHRhcmdldCBpcyB0aGUgZnJhbWUgYnVmZmVyLlxuICogQHBhcmFtIHtpbXBvcnQoJy4vc2hhZGVyLmpzJykuU2hhZGVyfSBzaGFkZXIgLSBUaGUgc2hhZGVyIHVzZWQgZm9yIHJlbmRlcmluZyB0aGUgcXVhZC4gVmVydGV4XG4gKiBzaGFkZXIgc2hvdWxkIGNvbnRhaW4gYGF0dHJpYnV0ZSB2ZWMyIHZlcnRleF9wb3NpdGlvbmAuXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vLi4vY29yZS9tYXRoL3ZlYzQuanMnKS5WZWM0fSBbcmVjdF0gLSBUaGUgdmlld3BvcnQgcmVjdGFuZ2xlIG9mIHRoZSBxdWFkLCBpblxuICogcGl4ZWxzLiBEZWZhdWx0cyB0byBmdWxsc2NyZWVuIChgMCwgMCwgdGFyZ2V0LndpZHRoLCB0YXJnZXQuaGVpZ2h0YCkuXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vLi4vY29yZS9tYXRoL3ZlYzQuanMnKS5WZWM0fSBbc2Npc3NvclJlY3RdIC0gVGhlIHNjaXNzb3IgcmVjdGFuZ2xlIG9mIHRoZVxuICogcXVhZCwgaW4gcGl4ZWxzLiBEZWZhdWx0cyB0byBmdWxsc2NyZWVuIChgMCwgMCwgdGFyZ2V0LndpZHRoLCB0YXJnZXQuaGVpZ2h0YCkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFt1c2VCbGVuZF0gLSBUcnVlIHRvIGVuYWJsZSBibGVuZGluZy4gRGVmYXVsdHMgdG8gZmFsc2UsIGRpc2FibGluZyBibGVuZGluZy5cbiAqL1xuZnVuY3Rpb24gZHJhd1F1YWRXaXRoU2hhZGVyKGRldmljZSwgdGFyZ2V0LCBzaGFkZXIsIHJlY3QsIHNjaXNzb3JSZWN0LCB1c2VCbGVuZCA9IGZhbHNlKSB7XG5cbiAgICBEZWJ1Z0dyYXBoaWNzLnB1c2hHcHVNYXJrZXIoZGV2aWNlLCBcImRyYXdRdWFkV2l0aFNoYWRlclwiKTtcblxuICAgIGNvbnN0IG9sZFJ0ID0gZGV2aWNlLnJlbmRlclRhcmdldDtcbiAgICBkZXZpY2Uuc2V0UmVuZGVyVGFyZ2V0KHRhcmdldCk7XG4gICAgZGV2aWNlLnVwZGF0ZUJlZ2luKCk7XG5cbiAgICBsZXQgeCwgeSwgdywgaDtcbiAgICBsZXQgc3gsIHN5LCBzdywgc2g7XG4gICAgaWYgKCFyZWN0KSB7XG4gICAgICAgIHcgPSB0YXJnZXQgPyB0YXJnZXQud2lkdGggOiBkZXZpY2Uud2lkdGg7XG4gICAgICAgIGggPSB0YXJnZXQgPyB0YXJnZXQuaGVpZ2h0IDogZGV2aWNlLmhlaWdodDtcbiAgICAgICAgeCA9IDA7XG4gICAgICAgIHkgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHggPSByZWN0Lng7XG4gICAgICAgIHkgPSByZWN0Lnk7XG4gICAgICAgIHcgPSByZWN0Lno7XG4gICAgICAgIGggPSByZWN0Lnc7XG4gICAgfVxuXG4gICAgaWYgKCFzY2lzc29yUmVjdCkge1xuICAgICAgICBzeCA9IHg7XG4gICAgICAgIHN5ID0geTtcbiAgICAgICAgc3cgPSB3O1xuICAgICAgICBzaCA9IGg7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc3ggPSBzY2lzc29yUmVjdC54O1xuICAgICAgICBzeSA9IHNjaXNzb3JSZWN0Lnk7XG4gICAgICAgIHN3ID0gc2Npc3NvclJlY3QuejtcbiAgICAgICAgc2ggPSBzY2lzc29yUmVjdC53O1xuICAgIH1cblxuICAgIGNvbnN0IG9sZFZ4ID0gZGV2aWNlLnZ4O1xuICAgIGNvbnN0IG9sZFZ5ID0gZGV2aWNlLnZ5O1xuICAgIGNvbnN0IG9sZFZ3ID0gZGV2aWNlLnZ3O1xuICAgIGNvbnN0IG9sZFZoID0gZGV2aWNlLnZoO1xuICAgIGRldmljZS5zZXRWaWV3cG9ydCh4LCB5LCB3LCBoKTtcbiAgICBjb25zdCBvbGRTeCA9IGRldmljZS5zeDtcbiAgICBjb25zdCBvbGRTeSA9IGRldmljZS5zeTtcbiAgICBjb25zdCBvbGRTdyA9IGRldmljZS5zdztcbiAgICBjb25zdCBvbGRTaCA9IGRldmljZS5zaDtcbiAgICBkZXZpY2Uuc2V0U2Npc3NvcihzeCwgc3ksIHN3LCBzaCk7XG5cbiAgICBjb25zdCBvbGREZXB0aFRlc3QgPSBkZXZpY2UuZ2V0RGVwdGhUZXN0KCk7XG4gICAgY29uc3Qgb2xkRGVwdGhXcml0ZSA9IGRldmljZS5nZXREZXB0aFdyaXRlKCk7XG4gICAgY29uc3Qgb2xkQ3VsbE1vZGUgPSBkZXZpY2UuZ2V0Q3VsbE1vZGUoKTtcbiAgICBjb25zdCBvbGRXUiA9IGRldmljZS53cml0ZVJlZDtcbiAgICBjb25zdCBvbGRXRyA9IGRldmljZS53cml0ZUdyZWVuO1xuICAgIGNvbnN0IG9sZFdCID0gZGV2aWNlLndyaXRlQmx1ZTtcbiAgICBjb25zdCBvbGRXQSA9IGRldmljZS53cml0ZUFscGhhO1xuICAgIGRldmljZS5zZXREZXB0aFRlc3QoZmFsc2UpO1xuICAgIGRldmljZS5zZXREZXB0aFdyaXRlKGZhbHNlKTtcbiAgICBkZXZpY2Uuc2V0Q3VsbE1vZGUoQ1VMTEZBQ0VfTk9ORSk7XG4gICAgZGV2aWNlLnNldENvbG9yV3JpdGUodHJ1ZSwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgaWYgKCF1c2VCbGVuZCkgZGV2aWNlLnNldEJsZW5kaW5nKGZhbHNlKTtcblxuICAgIGRldmljZS5zZXRWZXJ0ZXhCdWZmZXIoZ2V0UG9zdEVmZmVjdFF1YWRWQihkZXZpY2UpLCAwKTtcbiAgICBkZXZpY2Uuc2V0U2hhZGVyKHNoYWRlcik7XG5cbiAgICBkZXZpY2UuZHJhdyhfcG9zdEVmZmVjdFF1YWREcmF3KTtcblxuICAgIGRldmljZS5zZXREZXB0aFRlc3Qob2xkRGVwdGhUZXN0KTtcbiAgICBkZXZpY2Uuc2V0RGVwdGhXcml0ZShvbGREZXB0aFdyaXRlKTtcbiAgICBkZXZpY2Uuc2V0Q3VsbE1vZGUob2xkQ3VsbE1vZGUpO1xuICAgIGRldmljZS5zZXRDb2xvcldyaXRlKG9sZFdSLCBvbGRXRywgb2xkV0IsIG9sZFdBKTtcblxuICAgIGRldmljZS51cGRhdGVFbmQoKTtcblxuICAgIGRldmljZS5zZXRSZW5kZXJUYXJnZXQob2xkUnQpO1xuICAgIGRldmljZS51cGRhdGVCZWdpbigpO1xuXG4gICAgZGV2aWNlLnNldFZpZXdwb3J0KG9sZFZ4LCBvbGRWeSwgb2xkVncsIG9sZFZoKTtcbiAgICBkZXZpY2Uuc2V0U2Npc3NvcihvbGRTeCwgb2xkU3ksIG9sZFN3LCBvbGRTaCk7XG5cbiAgICBEZWJ1Z0dyYXBoaWNzLnBvcEdwdU1hcmtlcihkZXZpY2UpO1xufVxuXG4vKipcbiAqIERyYXdzIGEgdGV4dHVyZSBpbiBzY3JlZW4tc3BhY2UuIE1vc3RseSB1c2VkIGJ5IHBvc3QtZWZmZWN0cy5cbiAqXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9ncmFwaGljcy1kZXZpY2UuanMnKS5HcmFwaGljc0RldmljZX0gZGV2aWNlIC0gVGhlIGdyYXBoaWNzIGRldmljZSB1c2VkIHRvIGRyYXdcbiAqIHRoZSB0ZXh0dXJlLlxuICogQHBhcmFtIHtpbXBvcnQoJy4vdGV4dHVyZS5qcycpLlRleHR1cmV9IHRleHR1cmUgLSBUaGUgc291cmNlIHRleHR1cmUgdG8gYmUgZHJhd24uIEFjY2Vzc2libGUgYXNcbiAqIGB1bmlmb3JtIHNhbXBsZXIyRCAqIHNvdXJjZWAgaW4gc2hhZGVyLlxuICogQHBhcmFtIHtpbXBvcnQoJy4vcmVuZGVyLXRhcmdldC5qcycpLlJlbmRlclRhcmdldH0gW3RhcmdldF0gLSBUaGUgZGVzdGluYXRpb24gcmVuZGVyIHRhcmdldC5cbiAqIERlZmF1bHRzIHRvIHRoZSBmcmFtZSBidWZmZXIuXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi9zaGFkZXIuanMnKS5TaGFkZXJ9IFtzaGFkZXJdIC0gVGhlIHNoYWRlciB1c2VkIGZvciByZW5kZXJpbmcgdGhlIHRleHR1cmUuXG4gKiBEZWZhdWx0cyB0byB7QGxpbmsgR3JhcGhpY3NEZXZpY2UjZ2V0Q29weVNoYWRlcn0uXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vLi4vY29yZS9tYXRoL3ZlYzQuanMnKS5WZWM0fSBbcmVjdF0gLSBUaGUgdmlld3BvcnQgcmVjdGFuZ2xlIHRvIHVzZSBmb3IgdGhlXG4gKiB0ZXh0dXJlLCBpbiBwaXhlbHMuIERlZmF1bHRzIHRvIGZ1bGxzY3JlZW4gKGAwLCAwLCB0YXJnZXQud2lkdGgsIHRhcmdldC5oZWlnaHRgKS5cbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi8uLi9jb3JlL21hdGgvdmVjNC5qcycpLlZlYzR9IFtzY2lzc29yUmVjdF0gLSBUaGUgc2Npc3NvciByZWN0YW5nbGUgdG8gdXNlIGZvclxuICogdGhlIHRleHR1cmUsIGluIHBpeGVscy4gRGVmYXVsdHMgdG8gZnVsbHNjcmVlbiAoYDAsIDAsIHRhcmdldC53aWR0aCwgdGFyZ2V0LmhlaWdodGApLlxuICogQHBhcmFtIHtib29sZWFufSBbdXNlQmxlbmRdIC0gVHJ1ZSB0byBlbmFibGUgYmxlbmRpbmcuIERlZmF1bHRzIHRvIGZhbHNlLCBkaXNhYmxpbmcgYmxlbmRpbmcuXG4gKi9cbmZ1bmN0aW9uIGRyYXdUZXh0dXJlKGRldmljZSwgdGV4dHVyZSwgdGFyZ2V0LCBzaGFkZXIsIHJlY3QsIHNjaXNzb3JSZWN0LCB1c2VCbGVuZCA9IGZhbHNlKSB7XG4gICAgc2hhZGVyID0gc2hhZGVyIHx8IGRldmljZS5nZXRDb3B5U2hhZGVyKCk7XG4gICAgZGV2aWNlLmNvbnN0YW50VGV4U291cmNlLnNldFZhbHVlKHRleHR1cmUpO1xuICAgIGRyYXdRdWFkV2l0aFNoYWRlcihkZXZpY2UsIHRhcmdldCwgc2hhZGVyLCByZWN0LCBzY2lzc29yUmVjdCwgdXNlQmxlbmQpO1xufVxuXG5leHBvcnQgeyBkcmF3UXVhZFdpdGhTaGFkZXIsIGRyYXdUZXh0dXJlIH07XG4iXSwibmFtZXMiOlsiX3Bvc3RFZmZlY3RRdWFkRHJhdyIsInR5cGUiLCJQUklNSVRJVkVfVFJJU1RSSVAiLCJiYXNlIiwiY291bnQiLCJpbmRleGVkIiwicG9zdEVmZmVjdERldmljZUNhY2hlIiwiRGV2aWNlQ2FjaGUiLCJnZXRQb3N0RWZmZWN0UXVhZFZCIiwiZGV2aWNlIiwiZ2V0IiwidmVydGV4Rm9ybWF0IiwiVmVydGV4Rm9ybWF0Iiwic2VtYW50aWMiLCJTRU1BTlRJQ19QT1NJVElPTiIsImNvbXBvbmVudHMiLCJUWVBFX0ZMT0FUMzIiLCJwb3NpdGlvbnMiLCJGbG9hdDMyQXJyYXkiLCJzZXQiLCJWZXJ0ZXhCdWZmZXIiLCJCVUZGRVJfU1RBVElDIiwiZHJhd1F1YWRXaXRoU2hhZGVyIiwidGFyZ2V0Iiwic2hhZGVyIiwicmVjdCIsInNjaXNzb3JSZWN0IiwidXNlQmxlbmQiLCJEZWJ1Z0dyYXBoaWNzIiwicHVzaEdwdU1hcmtlciIsIm9sZFJ0IiwicmVuZGVyVGFyZ2V0Iiwic2V0UmVuZGVyVGFyZ2V0IiwidXBkYXRlQmVnaW4iLCJ4IiwieSIsInciLCJoIiwic3giLCJzeSIsInN3Iiwic2giLCJ3aWR0aCIsImhlaWdodCIsInoiLCJvbGRWeCIsInZ4Iiwib2xkVnkiLCJ2eSIsIm9sZFZ3IiwidnciLCJvbGRWaCIsInZoIiwic2V0Vmlld3BvcnQiLCJvbGRTeCIsIm9sZFN5Iiwib2xkU3ciLCJvbGRTaCIsInNldFNjaXNzb3IiLCJvbGREZXB0aFRlc3QiLCJnZXREZXB0aFRlc3QiLCJvbGREZXB0aFdyaXRlIiwiZ2V0RGVwdGhXcml0ZSIsIm9sZEN1bGxNb2RlIiwiZ2V0Q3VsbE1vZGUiLCJvbGRXUiIsIndyaXRlUmVkIiwib2xkV0ciLCJ3cml0ZUdyZWVuIiwib2xkV0IiLCJ3cml0ZUJsdWUiLCJvbGRXQSIsIndyaXRlQWxwaGEiLCJzZXREZXB0aFRlc3QiLCJzZXREZXB0aFdyaXRlIiwic2V0Q3VsbE1vZGUiLCJDVUxMRkFDRV9OT05FIiwic2V0Q29sb3JXcml0ZSIsInNldEJsZW5kaW5nIiwic2V0VmVydGV4QnVmZmVyIiwic2V0U2hhZGVyIiwiZHJhdyIsInVwZGF0ZUVuZCIsInBvcEdwdU1hcmtlciIsImRyYXdUZXh0dXJlIiwidGV4dHVyZSIsImdldENvcHlTaGFkZXIiLCJjb25zdGFudFRleFNvdXJjZSIsInNldFZhbHVlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQU9BLE1BQU1BLG1CQUFtQixHQUFHO0FBQ3hCQyxFQUFBQSxJQUFJLEVBQUVDLGtCQUFrQjtBQUN4QkMsRUFBQUEsSUFBSSxFQUFFLENBQUM7QUFDUEMsRUFBQUEsS0FBSyxFQUFFLENBQUM7QUFDUkMsRUFBQUEsT0FBTyxFQUFFLEtBQUE7QUFDYixDQUFDLENBQUE7O0FBR0QsTUFBTUMscUJBQXFCLEdBQUcsSUFBSUMsV0FBVyxFQUFFLENBQUE7QUFFL0MsU0FBU0MsbUJBQW1CLENBQUNDLE1BQU0sRUFBRTtBQUNqQyxFQUFBLE9BQU9ILHFCQUFxQixDQUFDSSxHQUFHLENBQUNELE1BQU0sRUFBRSxNQUFNO0FBQzNDLElBQUEsTUFBTUUsWUFBWSxHQUFHLElBQUlDLFlBQVksQ0FBQ0gsTUFBTSxFQUFFLENBQUM7QUFDM0NJLE1BQUFBLFFBQVEsRUFB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
