import"../../../core/tracing.js";import{PIXELFORMAT_DEPTHSTENCIL as e,SAMPLETYPE_DEPTH as t,SAMPLETYPE_UNFILTERABLE_FLOAT as r,PIXELFORMAT_RGBA32F as a,PIXELFORMAT_RGBA16F as s,pixelFormatByteSizes as i,PIXELFORMAT_A8 as o,PIXELFORMAT_L8 as u,PIXELFORMAT_LA8 as l,PIXELFORMAT_RGB565 as n,PIXELFORMAT_RGBA5551 as p,PIXELFORMAT_RGBA4 as d,PIXELFORMAT_RGB8 as m,PIXELFORMAT_RGBA8 as h,PIXELFORMAT_DXT1 as c,PIXELFORMAT_DXT3 as g,PIXELFORMAT_DXT5 as x,PIXELFORMAT_RGB16F as f,PIXELFORMAT_RGB32F as y,PIXELFORMAT_R32F as T,PIXELFORMAT_DEPTH as v,PIXELFORMAT_111110F as w,PIXELFORMAT_SRGB as b,PIXELFORMAT_SRGBA as U,PIXELFORMAT_ETC1 as L,PIXELFORMAT_ETC2_RGB as C,PIXELFORMAT_ETC2_RGBA as A,PIXELFORMAT_PVRTC_2BPP_RGB_1 as _,PIXELFORMAT_PVRTC_2BPP_RGBA_1 as F,PIXELFORMAT_PVRTC_4BPP_RGB_1 as M,PIXELFORMAT_PVRTC_4BPP_RGBA_1 as P,PIXELFORMAT_ASTC_4x4 as D,PIXELFORMAT_ATC_RGB as I,PIXELFORMAT_ATC_RGBA as V,PIXELFORMAT_BGRA8 as E,ADDRESS_REPEAT as O,ADDRESS_CLAMP_TO_EDGE as R,ADDRESS_MIRRORED_REPEAT as G}from"../constants.js";const N=[];N[o]="",N[u]="r8unorm",N[l]="rg8unorm",N[n]="",N[p]="",N[d]="",N[m]="rgba8unorm",N[h]="rgba8unorm",N[c]="",N[g]="",N[x]="",N[f]="",N[s]="rgba16float",N[y]="",N[a]="rgba32float",N[T]="r32float",N[v]="depth32float",N[e]="depth24plus-stencil8",N[w]="rg11b10ufloat",N[b]="",N[U]="",N[L]="",N[C]="",N[A]="",N[_]="",N[F]="",N[M]="",N[P]="",N[D]="",N[I]="",N[V]="",N[E]="bgra8unorm";const S=[];S[O]="repeat",S[R]="clamp-to-edge",S[G]="mirror-repeat";class B{constructor(e){this.gpuTexture=void 0,this.view=void 0,this.samplers=[],this.descr=void 0,this.format=void 0,this.texture=e,this.format=N[e.format],this.create(e.device)}create(t){const r=this.texture,a=t.wgpu;let s;this.descr={size:{width:r.width,height:r.height,depthOrArrayLayers:r.cubemap?6:1},format:this.format,mipLevelCount:1,sampleCount:1,dimension:r.volume?"3d":"2d",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC},this.gpuTexture=a.createTexture(this.descr),this.texture.format===e&&(s={format:"depth24plus",aspect:"depth-only"}),this.view=this.createView(s)}destroy(e){}getView(e){return this.uploadImmediate(e,this.texture),this.view}createView(e){var t,r,a,s,i,o,u;const l=null!=e?e:{},n=this.descr,p=this.texture,d={format:null!=(t=l.format)?t:n.format,dimension:null!=(r=l.dimension)?r:p.cubemap?"cube":p.volume?"3d":"2d",aspect:null!=(a=l.aspect)?a:"all",baseMipLevel:null!=(s=l.baseMipLevel)?s:0,mipLevelCount:null!=(i=l.mipLevelCount)?i:n.mipLevelCount,baseArrayLayer:null!=(o=l.baseArrayLayer)?o:0,arrayLayerCount:null!=(u=l.arrayLayerCount)?u:n.depthOrArrayLayers};return this.gpuTexture.createView(d)}getSampler(i,o){let u=this.samplers[o];if(!u){const l=this.texture,n={addressModeU:S[l.addressU],addressModeV:S[l.addressV],addressModeW:S[l.addressW]};!o&&l.compareOnRead&&(o=t),o===t?(n.compare="less",n.magFilter="linear",n.minFilter="linear"):o===r||this.texture.format===a||this.texture.format===e||this.texture.format===s?(n.magFilter="nearest",n.minFilter="nearest",n.mipmapFilter="nearest"):(n.magFilter="linear",n.minFilter="linear",n.mipmapFilter="linear"),u=i.wgpu.createSampler(n),this.samplers[o]=u}return u}loseContext(){}uploadImmediate(e,t){(t._needsUpload||t._needsMipmapsUpload)&&(this.uploadData(e),t._needsUpload=!1,t._needsMipmapsUpload=!1)}uploadData(e){const t=this.texture,r=e.wgpu;if(this.texture.cubemap)return;const a=t._levels[0];a&&(a instanceof ImageBitmap?r.queue.copyExternalImageToTexture({source:a},{texture:this.gpuTexture},this.descr.size):ArrayBuffer.isView(a)&&this.uploadTypedArrayData(r,a))}uploadTypedArrayData(e,t){var r;const a=this.texture,s={texture:this.gpuTexture,mipLevel:0},o=null!=(r=i[a.format])?r:0,u=a.width*o;a.height;const l={offset:0,bytesPerRow:u,rowsPerImage:a.height},n={width:a.width,height:a.height,depthOrArrayLayers:1};e.queue.writeTexture(s,t,l,n)}}export{B as WebgpuTexture};
