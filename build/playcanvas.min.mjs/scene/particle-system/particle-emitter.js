import"../../core/tracing.js";import"../../core/time.js";import{Curve as t}from"../../core/math/curve.js";import{CurveSet as e}from"../../core/math/curve-set.js";import{Mat4 as i}from"../../core/math/mat4.js";import{math as s}from"../../core/math/math.js";import{Quat as r}from"../../core/math/quat.js";import{Vec3 as a}from"../../core/math/vec3.js";import{BoundingBox as h}from"../../core/shape/bounding-box.js";import{FILTER_LINEAR as n,PRIMITIVE_TRIANGLES as o,CULLFACE_NONE as l,BUFFER_DYNAMIC as m,INDEXFORMAT_UINT16 as c,SEMANTIC_ATTR0 as d,TYPE_FLOAT32 as p,SEMANTIC_ATTR1 as u,SEMANTIC_ATTR2 as f,SEMANTIC_ATTR3 as x,SEMANTIC_ATTR4 as T,SEMANTIC_TEXCOORD0 as w,ADDRESS_CLAMP_TO_EDGE as S,PIXELFORMAT_RGBA8 as P,PIXELFORMAT_RGBA32F as y,FILTER_NEAREST as B}from"../../platform/graphics/constants.js";import{DeviceCache as g}from"../../platform/graphics/device-cache.js";import{IndexBuffer as M}from"../../platform/graphics/index-buffer.js";import{RenderTarget as v}from"../../platform/graphics/render-target.js";import{Texture as b}from"../../platform/graphics/texture.js";import{VertexBuffer as A}from"../../platform/graphics/vertex-buffer.js";import{VertexFormat as U}from"../../platform/graphics/vertex-format.js";import{ShaderProcessorOptions as q}from"../../platform/graphics/shader-processor-options.js";import{EMITTERSHAPE_BOX as I,PARTICLESORT_NONE as z,PARTICLEORIENTATION_SCREEN as E,PARTICLEORIENTATION_WORLD as V,PARTICLEMODE_GPU as C,BLEND_NORMAL as R}from"../constants.js";import{Mesh as F}from"../mesh.js";import{MeshInstance as D}from"../mesh-instance.js";import{Material as _}from"../materials/material.js";import{getProgramLibrary as N}from"../shader-lib/get-program-library.js";import{createShaderFromCode as G}from"../shader-lib/utils.js";import{shaderChunks as O}from"../shader-lib/chunks/chunks.js";import{particle as k}from"../shader-lib/programs/particle.js";import{ParticleCPUUpdater as L}from"./cpu-updater.js";import{ParticleGPUUpdater as j}from"./gpu-updater.js";const W=[[-1,-1],[1,-1],[1,1],[-1,1]];function X(t,e,i,s,r=y,a,h){let o=B;h&&r===P&&(o=n);const l=new b(t,{width:e,height:i,format:r,cubemap:!1,mipmaps:!1,minFilter:o,magFilter:o,addressU:S,addressV:S,name:"ParticleSystemTexture"}),m=l.lock();if(r===P){const t=new Uint8Array(s.length);for(let e=0;e<s.length;e++)t[e]=s[e]*a*255;s=t}return m.set(s),l.unlock(),l}function Y(t){return Math.max(Math.min(t,1),0)}const Q=new t([0,0,1,0]),Z=new t([0,1,1,1]),K=new e([0,0,1,0],[0,0,1,0],[0,0,1,0]),H=new e([0,1,1,1],[0,1,1,1],[0,1,1,1]);let J=2;const $=new Float32Array(3),tt=new i,et=new a,it=new a,st=new a;let rt,at;function ht(t,e){void 0!==at[t]&&null!==at[t]?rt[t]=at[t]:rt[t]=e}function nt(t,e,i){return(255*t<<16|255*e<<8|255*i)/(1<<24)}function ot(t,e){const i=t.length/3,s=new Array(4*i);for(let r=0;r<i;r++)s[4*r]=t[3*r],s[4*r+1]=t[3*r+1],s[4*r+2]=t[3*r+2],s[4*r+3]=nt(e[3*r],e[3*r+1],e[3*r+2]);return s}function lt(t,e){const i=e.length,s=t.length/i;for(let r=0;r<s;r++)for(let s=0;s<i;s++){const a=Math.abs(t[r*i+s]);e[s]=Math.max(e[s],a)}}function mt(t,e,i){const s=function(t,e){const i=new Float32Array(t.length);for(let s=0;s<t.length;s++)i[s]=t[s]-e[s];return i}(e,t);return lt(s,i),function(t,e){const i=e.length,s=t.length/i;for(let r=0;r<s;r++)for(let s=0;s<i;s++)t[r*i+s]/=0===e[s]?1:e[s],t[r*i+s]*=.5,t[r*i+s]+=.5}(s,i),s}const ct=new g;class dt{constructor(t,e){this.graphicsDevice=t;const i=t;this.precision=32,this._addTimeTime=0,rt=this,at=e,ht("numParticles",1),this.numParticles>t.maxTextureSize&&(this.numParticles=t.maxTextureSize),ht("rate",1),ht("rate2",this.rate),ht("lifetime",50),ht("emitterExtents",new a(0,0,0)),ht("emitterExtentsInner",new a(0,0,0)),ht("emitterRadius",0),ht("emitterRadiusInner",0),ht("emitterShape",I),ht("initialVelocity",1),ht("wrap",!1),ht("localSpace",!1),ht("screenSpace",!1),ht("wrapBounds",null),ht("colorMap",this.defaultParamTexture),ht("normalMap",null),ht("loop",!0),ht("preWarm",!1),ht("sort",z),ht("mode",C),ht("scene",null),ht("lighting",!1),ht("halfLambert",!1),ht("intensity",1),ht("stretch",0),ht("alignToMotion",!1),ht("depthSoftening",0),ht("mesh",null),ht("particleNormal",new a(0,1,0)),ht("orientation",E),ht("depthWrite",!1),ht("noFog",!1),ht("blendType",R),ht("node",null),ht("startAngle",0),ht("startAngle2",this.startAngle),ht("animTilesX",1),ht("animTilesY",1),ht("animStartFrame",0),ht("animNumFrames",1),ht("animNumAnimations",1),ht("animIndex",0),ht("randomizeAnimIndex",!1),ht("animSpeed",1),ht("animLoop",!0),this._gpuUpdater=new j(this,i),this._cpuUpdater=new L(this),this.constantLightCube=i.scope.resolve("lightCube[0]"),this.emitterPosUniform=new Float32Array(3),this.wrapBoundsUniform=new Float32Array(3),this.emitterScaleUniform=new Float32Array([1,1,1]),ht("colorGraph",H),ht("colorGraph2",this.colorGraph),ht("scaleGraph",Z),ht("scaleGraph2",this.scaleGraph),ht("alphaGraph",Z),ht("alphaGraph2",this.alphaGraph),ht("localVelocityGraph",K),ht("localVelocityGraph2",this.localVelocityGraph),ht("velocityGraph",K),ht("velocityGraph2",this.velocityGraph),ht("rotationSpeedGraph",Q),ht("rotationSpeedGraph2",this.rotationSpeedGraph),ht("radialSpeedGraph",Q),ht("radialSpeedGraph2",this.radialSpeedGraph),this.lightCube=new Float32Array(18),this.lightCubeDir=new Array(6),this.lightCubeDir[0]=new a(-1,0,0),this.lightCubeDir[1]=new a(1,0,0),this.lightCubeDir[2]=new a(0,-1,0),this.lightCubeDir[3]=new a(0,1,0),this.lightCubeDir[4]=new a(0,0,-1),this.lightCubeDir[5]=new a(0,0,1),this.animTilesParams=new Float32Array(2),this.animParams=new Float32Array(4),this.animIndexParams=new Float32Array(2),this.internalTex0=null,this.internalTex1=null,this.internalTex2=null,this.colorParam=null,this.vbToSort=null,this.vbOld=null,this.particleDistance=null,this.camera=null,this.swapTex=!1,this.useMesh=!0,this.useCpu=!t.supportsGpuParticles,this.pack8=!0,this.localBounds=new h,this.worldBoundsNoTrail=new h,this.worldBoundsTrail=[new h,new h],this.worldBounds=new h,this.worldBoundsSize=new a,this.prevWorldBoundsSize=new a,this.prevWorldBoundsCenter=new a,this.prevEmitterExtents=this.emitterExtents,this.prevEmitterRadius=this.emitterRadius,this.worldBoundsMul=new a,this.worldBoundsAdd=new a,this.timeToSwitchBounds=0,this.shaderParticleUpdateRespawn=null,this.shaderParticleUpdateNoRespawn=null,this.shaderParticleUpdateOnStop=null,this.numParticleVerts=0,this.numParticleIndices=0,this.material=null,this.meshInstance=null,this.drawOrder=0,this.seed=Math.random(),this.fixedTimeStep=1/60,this.maxSubSteps=10,this.simTime=0,this.simTimeTotal=0,this.beenReset=!1,this._layer=null,this.rebuild()}get defaultParamTexture(){return ct.get(this.graphicsDevice,(()=>{const t=16,e=new Float32Array(1024);for(let i=0;i<t;i++)for(let s=0;s<t;s++){const r=s+1-8.5,a=i+1-8.5,h=Y(1-Y(Math.sqrt(r*r+a*a)/t)-.5),n=i*t+s;e[4*n]=1,e[4*n+1]=1,e[4*n+2]=1,e[4*n+3]=h}const i=X(this.graphicsDevice,t,t,e,P,1,!0);return i.minFilter=n,i.magFilter=n,i}))}onChangeCamera(){this.regenShader(),this.resetMaterial()}calculateBoundsMad(){this.worldBoundsMul.x=1/this.worldBoundsSize.x,this.worldBoundsMul.y=1/this.worldBoundsSize.y,this.worldBoundsMul.z=1/this.worldBoundsSize.z,this.worldBoundsAdd.copy(this.worldBounds.center).mul(this.worldBoundsMul).mulScalar(-1),this.worldBoundsAdd.x+=.5,this.worldBoundsAdd.y+=.5,this.worldBoundsAdd.z+=.5}calculateWorldBounds(){if(!this.node)return;if(this.prevWorldBoundsSize.copy(this.worldBoundsSize),this.prevWorldBoundsCenter.copy(this.worldBounds.center),!this.useCpu){let t=!1;t=this.emitterShape===I?!this.emitterExtents.equals(this.prevEmitterExtents):!(this.emitterRadius===this.prevEmitterRadius),t&&this.calculateLocalBounds()}const t=this.node.getWorldTransform();this.localSpace?this.worldBoundsNoTrail.copy(this.localBounds):this.worldBoundsNoTrail.setFromTransformedAabb(this.localBounds,t),this.worldBoundsTrail[0].add(this.worldBoundsNoTrail),this.worldBoundsTrail[1].add(this.worldBoundsNoTrail);const e=this.simTimeTotal;e>=this.timeToSwitchBounds&&(this.worldBoundsTrail[0].copy(this.worldBoundsTrail[1]),this.worldBoundsTrail[1].copy(this.worldBoundsNoTrail),this.timeToSwitchBounds=e+this.lifetime),this.worldBounds.copy(this.worldBoundsTrail[0]),this.worldBoundsSize.copy(this.worldBounds.halfExtents).mulScalar(2),this.localSpace?(this.meshInstance.aabb.setFromTransformedAabb(this.worldBounds,t),this.meshInstance.mesh.aabb.setFromTransformedAabb(this.worldBounds,t)):(this.meshInstance.aabb.copy(this.worldBounds),this.meshInstance.mesh.aabb.copy(this.worldBounds)),this.meshInstance._aabbVer=1-this.meshInstance._aabbVer,this.pack8&&this.calculateBoundsMad()}resetWorldBounds(){this.node&&(this.worldBoundsNoTrail.setFromTransformedAabb(this.localBounds,this.localSpace?i.IDENTITY:this.node.getWorldTransform()),this.worldBoundsTrail[0].copy(this.worldBoundsNoTrail),this.worldBoundsTrail[1].copy(this.worldBoundsNoTrail),this.worldBounds.copy(this.worldBoundsTrail[0]),this.worldBoundsSize.copy(this.worldBounds.halfExtents).mulScalar(2),this.prevWorldBoundsSize.copy(this.worldBoundsSize),this.prevWorldBoundsCenter.copy(this.worldBounds.center),this.simTimeTotal=0,this.timeToSwitchBounds=0)}calculateLocalBounds(){let t=Number.MAX_VALUE,e=Number.MAX_VALUE,i=Number.MAX_VALUE,s=-Number.MAX_VALUE,r=-Number.MAX_VALUE,a=-Number.MAX_VALUE,h=0,n=0;const o=this.lifetime/this.precision,l=[this.qVelocity,this.qVelocity2],m=[this.qLocalVelocity,this.qLocalVelocity2],c=[0,0],d=[0,0],p=[0,0],u=[0,0],f=[0,0];let x,T,w;for(let S=0;S<this.precision+1;S++){const P=Math.min(S,this.precision-1);for(let h=0;h<2;h++)x=m[h][3*P+0]*o+c[h],T=m[h][3*P+1]*o+d[h],w=m[h][3*P+2]*o+p[h],t=Math.min(x,t),e=Math.min(T,e),i=Math.min(w,i),s=Math.max(x,s),r=Math.max(T,r),a=Math.max(w,a),c[h]=x,d[h]=T,p[h]=w;for(let t=0;t<2;t++)f[t]+=o*Math.sqrt(l[t][3*P+0]*l[t][3*P+0]+l[t][3*P+1]*l[t][3*P+1]+l[t][3*P+2]*l[t][3*P+2]);u[0]+=this.qRadialSpeed[P]*o,u[1]+=this.qRadialSpeed2[P]*o,h=Math.max(h,Math.max(Math.abs(u[0]),Math.abs(u[1]))),n=Math.max(n,this.qScale[P])}this.emitterShape===I?(x=.5*this.emitterExtents.x,T=.5*this.emitterExtents.y,w=.5*this.emitterExtents.z):(x=this.emitterRadius,T=this.emitterRadius,w=this.emitterRadius);const S=Math.max(f[0],f[1]);it.x=t-n-x-h-S,it.y=e-n-T-h-S,it.z=i-n-w-h-S,st.x=s+n+x+h+S,st.y=r+n+T+h+S,st.z=a+n+w+h+S,this.localBounds.setMinMax(it,st)}rebuild(){const t=this.graphicsDevice;if(null===this.colorMap&&(this.colorMap=this.defaultParamTexture),this.spawnBounds=this.emitterShape===I?this.emitterExtents:this.emitterRadius,this.useCpu=this.useCpu||this.sort>z||t.maxVertexTextures<=1||t.fragmentUniformsCount<64||t.forceCpuParticles||!t.extTextureFloat,this._destroyResources(),this.pack8=(this.pack8||!t.textureFloatRenderable)&&!this.useCpu,J=this.useCpu||this.pack8?4:2,this.useMesh=!1,this.mesh){this.numParticles*this.mesh.vertexBuffer.numVertices>65535||(this.useMesh=!0)}this.numParticlesPot=s.nextPowerOfTwo(this.numParticles),this.rebuildGraphs(),this.calculateLocalBounds(),this.resetWorldBounds(),this.node&&(this.worldBounds.setFromTransformedAabb(this.localBounds,this.localSpace?i.IDENTITY:this.node.getWorldTransform()),this.worldBoundsTrail[0].copy(this.worldBounds),this.worldBoundsTrail[1].copy(this.worldBounds),this.worldBoundsSize.copy(this.worldBounds.halfExtents).mulScalar(2),this.prevWorldBoundsSize.copy(this.worldBoundsSize),this.prevWorldBoundsCenter.copy(this.worldBounds.center),this.pack8&&this.calculateBoundsMad()),this.vbToSort=new Array(this.numParticles);for(let t=0;t<this.numParticles;t++)this.vbToSort[t]=[0,0];this.particleDistance=new Float32Array(this.numParticles),this._gpuUpdater.randomize(),this.particleTex=new Float32Array(this.numParticlesPot*J*4);const e=null===this.node||this.localSpace?a.ZERO:this.node.getPosition();this.emitterShape===I&&(null===this.node||this.localSpace?tt.setTRS(a.ZERO,r.IDENTITY,this.spawnBounds):tt.setTRS(a.ZERO,this.node.getRotation(),et.copy(this.spawnBounds).mul(this.node.localScale)),$[0]=0!==this.emitterExtents.x?this.emitterExtentsInner.x/this.emitterExtents.x:0,$[1]=0!==this.emitterExtents.y?this.emitterExtentsInner.y/this.emitterExtents.y:0,$[2]=0!==this.emitterExtents.z?this.emitterExtentsInner.z/this.emitterExtents.z:0);for(let t=0;t<this.numParticles;t++)this._cpuUpdater.calcSpawnPosition(this.particleTex,tt,$,e,t),this.useCpu&&(this.particleTex[4*t+3+2*this.numParticlesPot*4]=1);this.particleTexStart=new Float32Array(this.numParticlesPot*J*4);for(let t=0;t<this.particleTexStart.length;t++)this.particleTexStart[t]=this.particleTex[t];this.useCpu||(this.pack8?(this.particleTexIN=X(t,this.numParticlesPot,J,this.particleTex,P,1,!1),this.particleTexOUT=X(t,this.numParticlesPot,J,this.particleTex,P,1,!1),this.particleTexStart=X(t,this.numParticlesPot,J,this.particleTexStart,P,1,!1)):(this.particleTexIN=X(t,this.numParticlesPot,J,this.particleTex),this.particleTexOUT=X(t,this.numParticlesPot,J,this.particleTex),this.particleTexStart=X(t,this.numParticlesPot,J,this.particleTexStart)),this.rtParticleTexIN=new v({colorBuffer:this.particleTexIN,depth:!1}),this.rtParticleTexOUT=new v({colorBuffer:this.particleTexOUT,depth:!1}),this.swapTex=!1);const h=(this.localSpace?"#define LOCAL_SPACE\n":"")+O.particleUpdaterInitPS+(this.pack8?O.particleInputRgba8PS+O.particleOutputRgba8PS:O.particleInputFloatPS+O.particleOutputFloatPS)+(this.emitterShape===I?O.particleUpdaterAABBPS:O.particleUpdaterSpherePS)+O.particleUpdaterStartPS,n=h+O.particleUpdaterRespawnPS+O.particleUpdaterEndPS,m=h+O.particleUpdaterNoRespawnPS+O.particleUpdaterEndPS,c=h+O.particleUpdaterOnStopPS+O.particleUpdaterEndPS,d=this.emitterShape+""+this.pack8+this.localSpace;this.shaderParticleUpdateRespawn=G(t,O.fullscreenQuadVS,n,"fsQuad0"+d),this.shaderParticleUpdateNoRespawn=G(t,O.fullscreenQuadVS,m,"fsQuad1"+d),this.shaderParticleUpdateOnStop=G(t,O.fullscreenQuadVS,c,"fsQuad2"+d),this.numParticleVerts=this.useMesh?this.mesh.vertexBuffer.numVertices:4,this.numParticleIndices=this.useMesh?this.mesh.indexBuffer[0].numIndices:6,this._allocate(this.numParticles);const p=new F(t);p.vertexBuffer=this.vertexBuffer,p.indexBuffer[0]=this.indexBuffer,p.primitive[0].type=o,p.primitive[0].base=0,p.primitive[0].count=this.numParticles*this.numParticleIndices,p.primitive[0].indexed=!0,this.material=new _,this.material.name=this.node.name,this.material.cull=l,this.material.alphaWrite=!1,this.material.blendType=this.blendType,this.material.depthWrite=this.depthWrite,this.material.emitter=this,this.regenShader(),this.resetMaterial();const u=!this.meshInstance||this.meshInstance.visible;this.meshInstance=new D(p,this.material,this.node),this.meshInstance.pick=!1,this.meshInstance.updateKey(),this.meshInstance.cull=!0,this.meshInstance._noDepthDrawGl1=!0,this.localSpace?this.meshInstance.aabb.setFromTransformedAabb(this.worldBounds,this.node.getWorldTransform()):this.meshInstance.aabb.copy(this.worldBounds),this.meshInstance._updateAabb=!1,this.meshInstance.visible=u,this._initializeTextures(),this.resetTime(),this.addTime(0,!1),this.preWarm&&this.prewarm(this.lifetime)}_isAnimated(){return this.animNumFrames>=1&&(this.animTilesX>1||this.animTilesY>1)&&(this.colorMap&&this.colorMap!==this.defaultParamTexture||this.normalMap)}rebuildGraphs(){const t=this.precision,e=this.graphicsDevice;this.qLocalVelocity=this.localVelocityGraph.quantize(t),this.qVelocity=this.velocityGraph.quantize(t),this.qColor=this.colorGraph.quantizeClamped(t,0,1),this.qRotSpeed=this.rotationSpeedGraph.quantize(t),this.qScale=this.scaleGraph.quantize(t),this.qAlpha=this.alphaGraph.quantize(t),this.qRadialSpeed=this.radialSpeedGraph.quantize(t),this.qLocalVelocity2=this.localVelocityGraph2.quantize(t),this.qVelocity2=this.velocityGraph2.quantize(t),this.qColor2=this.colorGraph2.quantizeClamped(t,0,1),this.qRotSpeed2=this.rotationSpeedGraph2.quantize(t),this.qScale2=this.scaleGraph2.quantize(t),this.qAlpha2=this.alphaGraph2.quantize(t),this.qRadialSpeed2=this.radialSpeedGraph2.quantize(t);for(let e=0;e<t;e++)this.qRotSpeed[e]*=s.DEG_TO_RAD,this.qRotSpeed2[e]*=s.DEG_TO_RAD;if(this.localVelocityUMax=new Float32Array(3),this.velocityUMax=new Float32Array(3),this.colorUMax=new Float32Array(3),this.rotSpeedUMax=[0],this.scaleUMax=[0],this.alphaUMax=[0],this.radialSpeedUMax=[0],this.qLocalVelocityDiv=mt(this.qLocalVelocity,this.qLocalVelocity2,this.localVelocityUMax),this.qVelocityDiv=mt(this.qVelocity,this.qVelocity2,this.velocityUMax),this.qColorDiv=mt(this.qColor,this.qColor2,this.colorUMax),this.qRotSpeedDiv=mt(this.qRotSpeed,this.qRotSpeed2,this.rotSpeedUMax),this.qScaleDiv=mt(this.qScale,this.qScale2,this.scaleUMax),this.qAlphaDiv=mt(this.qAlpha,this.qAlpha2,this.alphaUMax),this.qRadialSpeedDiv=mt(this.qRadialSpeed,this.qRadialSpeed2,this.radialSpeedUMax),this.pack8){const t=[0,0,0];lt(this.qVelocity,t);const e=[0,0,0];lt(this.qVelocity2,e);const i=[0,0,0];lt(this.qLocalVelocity,i);const s=[0,0,0];lt(this.qLocalVelocity2,s);const r=[0];lt(this.qRadialSpeed,r);const a=[0];lt(this.qRadialSpeed2,a);let h=Math.max(t[0],e[0]);h=Math.max(h,t[1]),h=Math.max(h,e[1]),h=Math.max(h,t[2]),h=Math.max(h,e[2]);let n=Math.max(i[0],s[0]);n=Math.max(n,i[1]),n=Math.max(n,s[1]),n=Math.max(n,i[2]),n=Math.max(n,s[2]);const o=Math.max(r[0],a[0]);this.maxVel=h+n+o}this.useCpu||(this.internalTex0=X(e,t,1,ot(this.qLocalVelocity,this.qLocalVelocityDiv)),this.internalTex1=X(e,t,1,ot(this.qVelocity,this.qVelocityDiv)),this.internalTex2=X(e,t,1,function(t,e,i,s,r){const a=new Array(4*t.length);for(let h=0;h<t.length;h++)a[4*h]=t[h],a[4*h+1]=e[h],a[4*h+2]=0,a[4*h+3]=nt(i[h],s[h],r[h]);return a}(this.qRotSpeed,this.qScale,this.qScaleDiv,this.qRotSpeedDiv,this.qAlphaDiv)),this.internalTex3=X(e,t,1,function(t,e){const i=new Array(4*t.length);for(let s=0;s<t.length;s++)i[4*s]=t[s],i[4*s+1]=e[s],i[4*s+2]=0,i[4*s+3]=0;return i}(this.qRadialSpeed,this.qRadialSpeedDiv))),this.colorParam=X(e,t,1,function(t,e){const i=new Array(4*e.length);for(let s=0;s<e.length;s++)i[4*s]=t[3*s],i[4*s+1]=t[3*s+1],i[4*s+2]=t[3*s+2],i[4*s+3]=e[s];return i}(this.qColor,this.qAlpha),P,1,!0)}_initializeTextures(){this.colorMap&&(this.material.setParameter("colorMap",this.colorMap),this.lighting&&this.normalMap&&this.material.setParameter("normalMap",this.normalMap))}regenShader(){const t=N(this.graphicsDevice);t.register("particle",k);const e=null!==this.normalMap;this.normalOption=0,this.lighting&&(this.normalOption=e?2:1),this.material.getShaderVariant=function(e,i,s,r,a,h,n,o){this.emitter.scene&&this.emitter.camera!==this.emitter.scene._activeCamera&&(this.emitter.camera=this.emitter.scene._activeCamera,this.emitter.onChangeCamera());const l=this.emitter.inTools,m=new q(n,o);return t.getProgram("particle",{useCpu:this.emitter.useCpu,normal:this.emitter.normalOption,halflambert:this.emitter.halfLambert,stretch:this.emitter.stretch,alignToMotion:this.emitter.alignToMotion,soft:this.emitter.depthSoftening,mesh:this.emitter.useMesh,gamma:this.emitter.scene?this.emitter.scene.gammaCorrection:0,toneMap:this.emitter.scene?this.emitter.scene.toneMapping:0,fog:this.emitter.scene&&!this.emitter.noFog?this.emitter.scene.fog:"none",wrap:this.emitter.wrap&&this.emitter.wrapBounds,localSpace:this.emitter.localSpace,screenSpace:!l&&this.emitter.screenSpace,blend:this.blendType,animTex:this.emitter._isAnimated(),animTexLoop:this.emitter.animLoop,pack8:this.emitter.pack8,customFace:this.emitter.orientation!==E},m)},this.material.shader=this.material.getShaderVariant()}resetMaterial(){const t=this.material;t.setParameter("stretch",this.stretch),this._isAnimated()&&(t.setParameter("animTexTilesParams",this.animTilesParams),t.setParameter("animTexParams",this.animParams),t.setParameter("animTexIndexParams",this.animIndexParams)),t.setParameter("colorMult",this.intensity),this.useCpu||(t.setParameter("internalTex0",this.internalTex0),t.setParameter("internalTex1",this.internalTex1),t.setParameter("internalTex2",this.internalTex2),t.setParameter("internalTex3",this.internalTex3)),t.setParameter("colorParam",this.colorParam),t.setParameter("numParticles",this.numParticles),t.setParameter("numParticlesPot",this.numParticlesPot),t.setParameter("lifetime",this.lifetime),t.setParameter("rate",this.rate),t.setParameter("rateDiv",this.rate2-this.rate),t.setParameter("seed",this.seed),t.setParameter("scaleDivMult",this.scaleUMax[0]),t.setParameter("alphaDivMult",this.alphaUMax[0]),t.setParameter("radialSpeedDivMult",this.radialSpeedUMax[0]),t.setParameter("graphNumSamples",this.precision),t.setParameter("graphSampleSize",1/this.precision),t.setParameter("emitterScale",new Float32Array([1,1,1])),this.pack8&&(this._gpuUpdater._setInputBounds(),t.setParameter("inBoundsSize",this._gpuUpdater.inBoundsSizeUniform),t.setParameter("inBoundsCenter",this._gpuUpdater.inBoundsCenterUniform),t.setParameter("maxVel",this.maxVel)),this.wrap&&this.wrapBounds&&(this.wrapBoundsUniform[0]=this.wrapBounds.x,this.wrapBoundsUniform[1]=this.wrapBounds.y,this.wrapBoundsUniform[2]=this.wrapBounds.z,t.setParameter("wrapBounds",this.wrapBoundsUniform)),this.colorMap&&t.setParameter("colorMap",this.colorMap),this.lighting&&this.normalMap&&t.setParameter("normalMap",this.normalMap),this.depthSoftening>0&&t.setParameter("softening",1/(this.depthSoftening*this.depthSoftening*100)),this.stretch>0&&(t.cull=l),this._compParticleFaceParams()}_compParticleFaceParams(){let t,e;if(this.orientation===E)t=new Float32Array([1,0,0]),e=new Float32Array([0,0,1]);else{let s;if(this.orientation===V)s=this.particleNormal.normalize();else{s=(null===this.node?i.IDENTITY:this.node.getWorldTransform()).transformVector(this.particleNormal).normalize()}const r=new a(1,0,0);1===Math.abs(r.dot(s))&&r.set(0,0,1);const h=(new a).cross(s,r).normalize();r.cross(h,s).normalize(),t=new Float32Array([r.x,r.y,r.z]),e=new Float32Array([h.x,h.y,h.z])}this.material.setParameter("faceTangent",t),this.material.setParameter("faceBinorm",e)}_allocate(t){const e=t*this.numParticleVerts,i=t*this.numParticleIndices;if(void 0===this.vertexBuffer||this.vertexBuffer.getNumVertices()!==e){if(this.useCpu){const t=[{semantic:d,components:4,type:p},{semantic:u,components:4,type:p},{semantic:f,components:4,type:p},{semantic:x,components:1,type:p},{semantic:T,components:this.useMesh?4:2,type:p}],s=new U(this.graphicsDevice,t);this.vertexBuffer=new A(this.graphicsDevice,s,e,m),this.indexBuffer=new M(this.graphicsDevice,c,i)}else{const t=[{semantic:d,components:4,type:p}];this.useMesh&&t.push({semantic:u,components:2,type:p});const s=new U(this.graphicsDevice,t);this.vertexBuffer=new A(this.graphicsDevice,s,e,m),this.indexBuffer=new M(this.graphicsDevice,c,i)}const s=new Float32Array(this.vertexBuffer.lock());let r,a,h;if(this.useMesh){r=new Float32Array(this.mesh.vertexBuffer.lock()),a=r.length/this.mesh.vertexBuffer.numVertices;for(let t=0;t<this.mesh.vertexBuffer.format.elements.length;t++)if(this.mesh.vertexBuffer.format.elements[t].name===w){h=this.mesh.vertexBuffer.format.elements[t].offset/4;break}}for(let t=0;t<e;t++){const e=Math.floor(t/this.numParticleVerts);if(this.useMesh){const i=t%this.numParticleVerts;s[6*t]=r[i*a],s[6*t+1]=r[i*a+1],s[6*t+2]=r[i*a+2],s[6*t+3]=e,s[6*t+4]=r[i*a+h+0],s[6*t+5]=1-r[i*a+h+1]}else{const i=t%4;s[4*t]=W[i][0],s[4*t+1]=W[i][1],s[4*t+2]=0,s[4*t+3]=e}}this.useCpu&&(this.vbCPU=new Float32Array(s),this.vbOld=new Float32Array(this.vbCPU.length)),this.vertexBuffer.unlock(),this.useMesh&&this.mesh.vertexBuffer.unlock();let n=0;const o=new Uint16Array(this.indexBuffer.lock());this.useMesh&&(r=new Uint16Array(this.mesh.indexBuffer[0].lock()));for(let e=0;e<t;e++)if(this.useMesh)for(let t=0;t<this.numParticleIndices;t++)o[e*this.numParticleIndices+t]=r[t]+e*this.numParticleVerts;else{const t=4*e;o[n++]=t,o[n++]=t+1,o[n++]=t+2,o[n++]=t,o[n++]=t+2,o[n++]=t+3}this.indexBuffer.unlock(),this.useMesh&&this.mesh.indexBuffer[0].unlock()}}reset(){if(this.beenReset=!0,this.seed=Math.random(),this.material.setParameter("seed",this.seed),this.useCpu)for(let t=0;t<this.particleTexStart.length;t++)this.particleTex[t]=this.particleTexStart[t];else this._initializeTextures();this.resetWorldBounds(),this.resetTime();const t=this.loop;this.loop=!0,this.addTime(0,!1),this.loop=t,this.preWarm&&this.prewarm(this.lifetime)}prewarm(t){const e=t/this.lifetime,i=Math.min(Math.floor(e*this.precision),this.precision),s=t/i;for(let t=0;t<i;t++)this.addTime(s,!1)}resetTime(){this.endTime=function(t){const e=Math.max(t.rate,t.rate2)*t.numParticles+t.lifetime;return Date.now()+1e3*e}(this)}finishFrame(){this.useCpu&&this.vertexBuffer.unlock()}addTime(t,e){const i=this.graphicsDevice;if(this.simTimeTotal+=t,this.calculateWorldBounds(),this._isAnimated()){const t=this.animTilesParams;t[0]=1/this.animTilesX,t[1]=1/this.animTilesY;const e=this.animParams;e[0]=this.animStartFrame,e[1]=this.animNumFrames*this.animSpeed,e[2]=this.animNumFrames-1,e[3]=this.animNumAnimations-1;const i=this.animIndexParams;i[0]=this.animIndex,i[1]=this.randomizeAnimIndex}let s;this.scene&&this.camera!==this.scene._activeCamera&&(this.camera=this.scene._activeCamera,this.onChangeCamera()),this.emitterShape===I&&($[0]=0!==this.emitterExtents.x?this.emitterExtentsInner.x/this.emitterExtents.x:0,$[1]=0!==this.emitterExtents.y?this.emitterExtentsInner.y/this.emitterExtents.y:0,$[2]=0!==this.emitterExtents.z?this.emitterExtentsInner.z/this.emitterExtents.z:0,null===this.meshInstance.node?tt.setTRS(a.ZERO,r.IDENTITY,this.emitterExtents):tt.setTRS(a.ZERO,this.meshInstance.node.getRotation(),et.copy(this.emitterExtents).mul(this.meshInstance.node.localScale)));const h=null===this.meshInstance.node?a.ONE:this.meshInstance.node.localScale;if(this.emitterScaleUniform[0]=h.x,this.emitterScaleUniform[1]=h.y,this.emitterScaleUniform[2]=h.z,this.material.setParameter("emitterScale",this.emitterScaleUniform),this.localSpace&&this.meshInstance.node&&(s=this.meshInstance.node.getPosition(),this.emitterPosUniform[0]=s.x,this.emitterPosUniform[1]=s.y,this.emitterPosUniform[2]=s.z,this.material.setParameter("emitterPos",this.emitterPosUniform)),this._compParticleFaceParams(),this.useCpu){const i=new Float32Array(this.vertexBuffer.lock());this._cpuUpdater.update(i,this.vbToSort,this.particleTex,tt,$,s,t,e)}else this._gpuUpdater.update(i,tt,$,t,e);this.loop||Date.now()>this.endTime&&(this.onFinished&&this.onFinished(),this.meshInstance.visible=!1),this.meshInstance&&(this.meshInstance.drawOrder=this.drawOrder)}_destroyResources(){this.particleTexIN&&(this.particleTexIN.destroy(),this.particleTexIN=null),this.particleTexOUT&&(this.particleTexOUT.destroy(),this.particleTexOUT=null),this.particleTexStart&&this.particleTexStart.destroy&&(this.particleTexStart.destroy(),this.particleTexStart=null),this.rtParticleTexIN&&(this.rtParticleTexIN.destroy(),this.rtParticleTexIN=null),this.rtParticleTexOUT&&(this.rtParticleTexOUT.destroy(),this.rtParticleTexOUT=null),this.internalTex0&&(this.internalTex0.destroy(),this.internalTex0=null),this.internalTex1&&(this.internalTex1.destroy(),this.internalTex1=null),this.internalTex2&&(this.internalTex2.destroy(),this.internalTex2=null),this.internalTex3&&(this.internalTex3.destroy(),this.internalTex3=null),this.colorParam&&(this.colorParam.destroy(),this.colorParam=null),this.vertexBuffer&&(this.vertexBuffer.destroy(),this.vertexBuffer=void 0),this.indexBuffer&&(this.indexBuffer.destroy(),this.indexBuffer=void 0),this.material&&(this.material.destroy(),this.material=null)}destroy(){this.camera=null,this._destroyResources()}}export{dt as ParticleEmitter};
