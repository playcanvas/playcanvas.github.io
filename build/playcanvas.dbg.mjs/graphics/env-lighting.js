/**
 * @license
 * PlayCanvas Engine v1.57.1 revision 256dd83c2 (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { Vec4 } from '../math/vec4.js';
import { Texture } from './texture.js';
import { reprojectTexture } from './reproject-texture.js';
import { PIXELFORMAT_R8_G8_B8_A8, TEXTURETYPE_DEFAULT, ADDRESS_CLAMP_TO_EDGE, TEXTUREPROJECTION_EQUIRECT, TEXTURETYPE_RGBM, PIXELFORMAT_RGBA16F, PIXELFORMAT_RGBA32F } from './constants.js';
import { DebugGraphics } from './debug-graphics.js';

const fixCubemapSeams = true;
const RGBA8_TYPE = TEXTURETYPE_RGBM;

const calcLevels = (width, height = 0) => {
  return 1 + Math.floor(Math.log2(Math.max(width, height)));
};

const supportsFloat16 = device => {
  return device.extTextureHalfFloat && device.textureHalfFloatRenderable;
};

const supportsFloat32 = device => {
  return device.extTextureFloat && device.textureFloatRenderable;
};

const lightingSourcePixelFormat = device => {
  return supportsFloat16(device) ? PIXELFORMAT_RGBA16F : supportsFloat32(device) ? PIXELFORMAT_RGBA32F : PIXELFORMAT_R8_G8_B8_A8;
};

const lightingPixelFormat = device => {
  return PIXELFORMAT_R8_G8_B8_A8;
};

const createCubemap = (device, size, format, mipmaps) => {
  return new Texture(device, {
    name: `lighting-${size}`,
    cubemap: true,
    width: size,
    height: size,
    format: format,
    type: format === PIXELFORMAT_R8_G8_B8_A8 ? RGBA8_TYPE : TEXTURETYPE_DEFAULT,
    addressU: ADDRESS_CLAMP_TO_EDGE,
    addressV: ADDRESS_CLAMP_TO_EDGE,
    fixCubemapSeams: fixCubemapSeams,
    mipmaps: !!mipmaps
  });
};

class EnvLighting {
  static generateSkyboxCubemap(source, size) {
    const device = source.device;
    DebugGraphics.pushGpuMarker(device, "genSkyboxCubemap");
    const result = createCubemap(device, size || (source.cubemap ? source.width : source.width / 4), PIXELFORMAT_R8_G8_B8_A8, false);
    reprojectTexture(source, result, {
      numSamples: 1024
    });
    DebugGraphics.popGpuMarker(device);
    return result;
  }

  static generateLightingSource(source, options) {
    const device = source.device;
    DebugGraphics.pushGpuMarker(device, "genLightingSource");
    const format = lightingSourcePixelFormat(device);
    const result = (options == null ? void 0 : options.target) || new Texture(device, {
      name: `lighting-source`,
      cubemap: true,
      width: (options == null ? void 0 : options.size) || 128,
      height: (options == null ? void 0 : options.size) || 128,
      format: format,
      type: format === PIXELFORMAT_R8_G8_B8_A8 ? RGBA8_TYPE : TEXTURETYPE_DEFAULT,
      addressU: ADDRESS_CLAMP_TO_EDGE,
      addressV: ADDRESS_CLAMP_TO_EDGE,
      fixCubemapSeams: false,
      mipmaps: true
    });
    reprojectTexture(source, result, {
      numSamples: source.mipmaps ? 1 : 1024
    });
    DebugGraphics.popGpuMarker(device);
    return result;
  }

  static generateAtlas(source, options) {
    const device = source.device;
    const format = lightingPixelFormat();
    DebugGraphics.pushGpuMarker(device, "genAtlas");
    const result = (options == null ? void 0 : options.target) || new Texture(device, {
      name: 'envAtlas',
      width: (options == null ? void 0 : options.size) || 512,
      height: (options == null ? void 0 : options.size) || 512,
      format: format,
      type: RGBA8_TYPE ,
      projection: TEXTUREPROJECTION_EQUIRECT,
      addressU: ADDRESS_CLAMP_TO_EDGE,
      addressV: ADDRESS_CLAMP_TO_EDGE,
      mipmaps: false
    });
    DebugGraphics.pushGpuMarker(device, "mipmaps");
    const s = result.width / 512;
    const rect = new Vec4(0, 0, 512 * s, 256 * s);
    const levels = calcLevels(256) - calcLevels(4);

    for (let i = 0; i < levels; ++i) {
      reprojectTexture(source, result, {
        numSamples: 1,
        rect: rect,
        seamPixels: s
      });
      rect.x += rect.w;
      rect.y += rect.w;
      rect.z = Math.max(1, Math.floor(rect.z * 0.5));
      rect.w = Math.max(1, Math.floor(rect.w * 0.5));
    }

    DebugGraphics.popGpuMarker(device);
    DebugGraphics.pushGpuMarker(device, "reflections");
    rect.set(0, 256 * s, 256 * s, 128 * s);

    for (let i = 1; i < 7; ++i) {
      reprojectTexture(source, result, {
        numSamples: (options == null ? void 0 : options.numReflectionSamples) || 1024,
        distribution: (options == null ? void 0 : options.distribution) || 'ggx',
        specularPower: Math.max(1, 2048 >> i * 2),
        rect: rect,
        seamPixels: s
      });
      rect.y += rect.w;
      rect.z = Math.max(1, Math.floor(rect.z * 0.5));
      rect.w = Math.max(1, Math.floor(rect.w * 0.5));
    }

    DebugGraphics.popGpuMarker(device);
    DebugGraphics.pushGpuMarker(device, "ambient");
    rect.set(128 * s, (256 + 128) * s, 64 * s, 32 * s);
    reprojectTexture(source, result, {
      numSamples: (options == null ? void 0 : options.numAmbientSamples) || 2048,
      distribution: 'lambert',
      rect: rect,
      seamPixels: s
    });
    DebugGraphics.popGpuMarker(device);
    DebugGraphics.popGpuMarker(device);
    return result;
  }

  static generatePrefilteredAtlas(sources, options) {
    const device = sources[0].device;
    const format = sources[0].format;
    const type = sources[0].type;
    DebugGraphics.pushGpuMarker(device, "genPrefilteredAtlas");
    const result = (options == null ? void 0 : options.target) || new Texture(device, {
      name: 'envPrefilteredAtlas',
      width: (options == null ? void 0 : options.size) || 512,
      height: (options == null ? void 0 : options.size) || 512,
      format: format,
      type: type,
      projection: TEXTUREPROJECTION_EQUIRECT,
      addressU: ADDRESS_CLAMP_TO_EDGE,
      addressV: ADDRESS_CLAMP_TO_EDGE,
      mipmaps: false
    });
    DebugGraphics.pushGpuMarker(device, "mipmaps");
    const s = result.width / 512;
    const rect = new Vec4(0, 0, 512 * s, 256 * s);
    const levels = calcLevels(512);

    for (let i = 0; i < levels; ++i) {
      reprojectTexture(sources[0], result, {
        numSamples: 1,
        rect: rect,
        seamPixels: s
      });
      rect.x += rect.w;
      rect.y += rect.w;
      rect.z = Math.max(1, Math.floor(rect.z * 0.5));
      rect.w = Math.max(1, Math.floor(rect.w * 0.5));
    }

    DebugGraphics.popGpuMarker(device);
    DebugGraphics.pushGpuMarker(device, "reflections");
    rect.set(0, 256 * s, 256 * s, 128 * s);

    for (let i = 1; i < sources.length; ++i) {
      reprojectTexture(sources[i], result, {
        numSamples: 1,
        rect: rect,
        seamPixels: s
      });
      rect.y += rect.w;
      rect.z = Math.max(1, Math.floor(rect.z * 0.5));
      rect.w = Math.max(1, Math.floor(rect.w * 0.5));
    }

    DebugGraphics.popGpuMarker(device);
    DebugGraphics.pushGpuMarker(device, "ambient");
    rect.set(128 * s, (256 + 128) * s, 64 * s, 32 * s);

    if (options != null && options.legacyAmbient) {
      reprojectTexture(sources[5], result, {
        numSamples: 1,
        rect: rect,
        seamPixels: s
      });
    } else {
      reprojectTexture(sources[0], result, {
        numSamples: (options == null ? void 0 : options.numSamples) || 2048,
        distribution: 'lambert',
        rect: rect,
        seamPixels: s
      });
    }

    DebugGraphics.popGpuMarker(device);
    DebugGraphics.popGpuMarker(device);
    return result;
  }

}

export { EnvLighting };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
