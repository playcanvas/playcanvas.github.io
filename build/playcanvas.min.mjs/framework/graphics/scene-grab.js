import{DEVICETYPE_WEBGPU as e,FILTER_NEAREST as r,FILTER_LINEAR_MIPMAP_LINEAR as t,FILTER_LINEAR as a,ADDRESS_CLAMP_TO_EDGE as n,PIXELFORMAT_DEPTHSTENCIL as o,PIXELFORMAT_RGBA8 as i}from"../../platform/graphics/constants.js";import{RenderTarget as s}from"../../platform/graphics/render-target.js";import{Texture as l}from"../../platform/graphics/texture.js";import{LAYERID_DEPTH as d,SHADER_DEPTH as h,LAYERID_WORLD as c}from"../../scene/constants.js";import{Layer as p}from"../../scene/layer.js";const u=["uSceneDepthMap","uDepthMap"],g=["uSceneColorMap","texture_grabPass"];class f{constructor(r){this.application=r,this.device=r.graphicsDevice,this.layer=null,this.device.webgl2||this.device.deviceType===e?this.initMainPath():this.initFallbackPath()}setupUniform(e,r,t){(r?u:g).forEach((r=>e.scope.resolve(r).setValue(t)))}allocateTexture(e,o,i,s,d,h){return new l(e,{name:i,format:s,width:o?o.colorBuffer.width:e.width,height:o?o.colorBuffer.height:e.height,mipmaps:h,minFilter:d?r:h?t:a,magFilter:d?r:a,addressU:n,addressV:n})}getSourceColorFormat(e){var r;return null!=(r=null==e?void 0:e.format)?r:this.device.framebufferFormat}shouldReallocate(e,r,t){if(t){if((null==e?void 0:e.colorBuffer.format)!==this.getSourceColorFormat(r))return!0}const a=(null==r?void 0:r.width)||this.device.width,n=(null==r?void 0:r.height)||this.device.height;return!e||a!==e.width||n!==e.height}allocateRenderTarget(e,r,t,a,n,o,i){const l=i?u:g,d=this.allocateTexture(t,r,l[0],a,n,o);return e?(e.destroyFrameBuffers(),n?e._depthBuffer=d:e._colorBuffer=d):e=new s({name:"renderTargetSceneGrab",colorBuffer:n?null:d,depthBuffer:n?d:null,depth:!n,stencil:t.supportsStencil,autoResolve:!1}),e}releaseRenderTarget(e){e&&(e.destroyTextureBuffers(),e.destroy())}initMainPath(){const r=this.application,t=this;this.layer=new p({enabled:!1,name:"Depth",id:d,onDisable:function(){t.releaseRenderTarget(this.depthRenderTarget),this.depthRenderTarget=null,t.releaseRenderTarget(this.colorRenderTarget),this.colorRenderTarget=null},onPreRenderOpaque:function(a){const n=r.graphicsDevice,i=this.cameras[a];if(i.renderSceneColorMap){var s;if(t.shouldReallocate(this.colorRenderTarget,null==(s=i.renderTarget)?void 0:s.colorBuffer,!0)){var l;t.releaseRenderTarget(this.colorRenderTarget);const e=t.getSourceColorFormat(null==(l=i.renderTarget)?void 0:l.colorBuffer);this.colorRenderTarget=t.allocateRenderTarget(this.colorRenderTarget,i.renderTarget,n,e,!1,!0,!1)}const r=this.colorRenderTarget.colorBuffer;n.deviceType===e?n.copyRenderTarget(i.renderTarget,this.colorRenderTarget,!0,!1):(n.copyRenderTarget(n.renderTarget,this.colorRenderTarget,!0,!1),n.activeTexture(n.maxCombinedTextures-1),n.bindTexture(r),n.gl.generateMipmap(r.impl._glTarget)),t.setupUniform(n,!1,r)}var d;i.renderSceneDepthMap&&(t.shouldReallocate(this.depthRenderTarget,null==(d=i.renderTarget)?void 0:d.depthBuffer)&&(t.releaseRenderTarget(this.depthRenderTarget),this.depthRenderTarget=t.allocateRenderTarget(this.depthRenderTarget,i.renderTarget,n,o,!0,!1,!0)),n.copyRenderTarget(n.renderTarget,this.depthRenderTarget,!1,!0),t.setupUniform(n,!0,this.depthRenderTarget.depthBuffer))},onPostRenderOpaque:function(e){}})}initFallbackPath(){const e=this.application,r=this;this.layer=new p({enabled:!1,name:"Depth",id:d,shaderPass:h,onEnable:function(){this.depthRenderTarget=new s({name:"depthRenderTarget-webgl1",depth:!0,stencil:e.graphicsDevice.supportsStencil,autoResolve:!1,graphicsDevice:e.graphicsDevice}),this.renderTarget=this.depthRenderTarget},onDisable:function(){this.depthRenderTarget.destroyTextureBuffers(),this.renderTarget=null,r.releaseRenderTarget(this.colorRenderTarget),this.colorRenderTarget=null},onPostCull:function(t){const a=e.graphicsDevice,n=this.cameras[t];if(n.renderSceneDepthMap){var o;this.depthRenderTarget.depthBuffer&&!r.shouldReallocate(this.depthRenderTarget,null==(o=n.renderTarget)?void 0:o.depthBuffer)||(this.depthRenderTarget.destroyTextureBuffers(),this.depthRenderTarget=r.allocateRenderTarget(this.depthRenderTarget,n.renderTarget,a,i,!1,!1,!0));const s=this.instances.visibleOpaque[t],l=s.list,d=e.scene.layers,h=d.subLayerEnabled,p=d.subLayerList,u=e.scene.layers.getLayerById(c).renderTarget,g=this.cameras[t];let f=0;const T=d.layerList;for(let e=0;e<T.length;e++){const r=T[e];if(r===this)break;if(r.renderTarget!==u||!r.enabled||!h[e])continue;const t=r.cameras.indexOf(g);if(t<0)continue;let a=p[e]?r.instances.visibleTransparent[t]:r.instances.visibleOpaque[t];const n=a.length;a=a.list;for(let e=0;e<n;e++){const r=a[e];r.material&&r.material.depthWrite&&!r._noDepthDrawGl1&&(l[f]=r,f++)}}s.length=f}},onPreRenderOpaque:function(t){const a=e.graphicsDevice,n=this.cameras[t];if(n.renderSceneColorMap){var o;if(r.shouldReallocate(this.colorRenderTarget,null==(o=n.renderTarget)?void 0:o.colorBuffer)){var i;r.releaseRenderTarget(this.colorRenderTarget);const e=r.getSourceColorFormat(null==(i=n.renderTarget)?void 0:i.colorBuffer);this.colorRenderTarget=r.allocateRenderTarget(this.colorRenderTarget,n.renderTarget,a,e,!1,!1,!1)}const e=this.colorRenderTarget._colorBuffer;e.impl._glTexture||e.impl.initialize(a,e),a.bindTexture(e);const t=a.gl;t.copyTexImage2D(t.TEXTURE_2D,0,e.impl._glFormat,0,0,e.width,e.height,0),e._needsUpload=!1,e._needsMipmapsUpload=!1,r.setupUniform(a,!1,e)}n.renderSceneDepthMap&&r.setupUniform(a,!0,this.depthRenderTarget.colorBuffer)},onDrawCall:function(){e.graphicsDevice.setColorWrite(!0,!0,!0,!0)},onPostRenderOpaque:function(e){if(this.cameras[e].renderSceneDepthMap){this.instances.visibleOpaque[e].length=0}}})}patch(e){e.onEnable=this.layer.onEnable,e.onDisable=this.layer.onDisable,e.onPreRenderOpaque=this.layer.onPreRenderOpaque,e.onPostRenderOpaque=this.layer.onPostRenderOpaque,e.shaderPass=this.layer.shaderPass,e.onPostCull=this.layer.onPostCull,e.onDrawCall=this.layer.onDrawCall}}export{f as SceneGrab};
