import"../../../core/tracing.js";import{WebgpuVertexBufferLayout as e}from"./webgpu-vertex-buffer-layout.js";const t=["point-list","line-list",void 0,"line-strip","triangle-list","triangle-strip",void 0],r=["add","subtract","reverse-subtract","min","max"],o=["zero","one","src","one-minus-src","dst","one-minus-dst","src-alpha","src-alpha-saturated","one-minus-src-alpha","dst-alpha","one-minus-dst-alpha","constant","one-minus-constant"],a=["never","less","equal","less-equal","greater","not-equal","greater-equal","always"],i=[];class l{constructor(t){this.device=t,this.vertexBufferLayout=new e,this.cache=new Map}get(e,r,o,a,i,l,n,s){const c=this.getKey(e,r,o,a,i,l,n,s);let p=this.cache.get(c);if(!p){const u=t[e.type],h=this.getPipelineLayout(l),d=this.vertexBufferLayout.get(r,o);p=this.create(u,a,i,h,n,s,d),this.cache.set(c,p)}return p}getKey(e,t,r,o,a,i,l,n){let s="";for(let e=0;e<i.length;e++)s+=i[e].key;const c=this.vertexBufferLayout.getKey(t,r),p=a.impl.key;return c+o.impl.vertexCode+o.impl.fragmentCode+p+e.type+s+l.key+n.key}getPipelineLayout(e){e.forEach((e=>{i.push(e.bindGroupLayout)}));const t={bindGroupLayouts:i},r=this.device.wgpu.createPipelineLayout(t);return i.length=0,r}getBlend(e){let t;return e.blend&&(t={color:{operation:r[e.colorOp],srcFactor:o[e.colorSrcFactor],dstFactor:o[e.colorDstFactor]},alpha:{operation:r[e.alphaOp],srcFactor:o[e.alphaSrcFactor],dstFactor:o[e.alphaDstFactor]}}),t}getDepthStencil(e,t){let r;const{depth:o,stencil:i}=t;return(o||i)&&(r={format:t.impl.depthFormat},o?(r.depthWriteEnabled=e.write,r.depthCompare=a[e.func]):(r.depthWriteEnabled=!1,r.depthCompare="always")),r}create(e,t,r,o,a,i,l){const n=this.device.wgpu,s=t.impl,c={vertex:{module:s.getVertexShaderModule(),entryPoint:s.vertexEntryPoint,buffers:l},primitive:{topology:e,cullMode:"none"},depthStencil:this.getDepthStencil(i,r),multisample:{count:r.samples},layout:o};if(r.impl.colorFormat){let e=0;a.redWrite&&(e|=GPUColorWrite.RED),a.greenWrite&&(e|=GPUColorWrite.GREEN),a.blueWrite&&(e|=GPUColorWrite.BLUE),a.alphaWrite&&(e|=GPUColorWrite.ALPHA),c.fragment={module:s.getFragmentShaderModule(),entryPoint:s.fragmentEntryPoint,targets:[{format:r.impl.colorFormat,writeMask:e,blend:this.getBlend(a)}]}}return n.createRenderPipeline(c)}}export{l as WebgpuRenderPipeline};
