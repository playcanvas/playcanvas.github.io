/**
 * @license
 * PlayCanvas Engine v1.57.1 revision 256dd83c2 (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { Vec3 } from './vec3.js';

class Mat3 {
  constructor() {
    const data = new Float32Array(9);
    data[0] = data[4] = data[8] = 1;
    this.data = data;
  }

  clone() {
    const cstr = this.constructor;
    return new cstr().copy(this);
  }

  copy(rhs) {
    const src = rhs.data;
    const dst = this.data;
    dst[0] = src[0];
    dst[1] = src[1];
    dst[2] = src[2];
    dst[3] = src[3];
    dst[4] = src[4];
    dst[5] = src[5];
    dst[6] = src[6];
    dst[7] = src[7];
    dst[8] = src[8];
    return this;
  }

  set(src) {
    const dst = this.data;
    dst[0] = src[0];
    dst[1] = src[1];
    dst[2] = src[2];
    dst[3] = src[3];
    dst[4] = src[4];
    dst[5] = src[5];
    dst[6] = src[6];
    dst[7] = src[7];
    dst[8] = src[8];
    return this;
  }

  equals(rhs) {
    const l = this.data;
    const r = rhs.data;
    return l[0] === r[0] && l[1] === r[1] && l[2] === r[2] && l[3] === r[3] && l[4] === r[4] && l[5] === r[5] && l[6] === r[6] && l[7] === r[7] && l[8] === r[8];
  }

  isIdentity() {
    const m = this.data;
    return m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 0 && m[4] === 1 && m[5] === 0 && m[6] === 0 && m[7] === 0 && m[8] === 1;
  }

  setIdentity() {
    const m = this.data;
    m[0] = 1;
    m[1] = 0;
    m[2] = 0;
    m[3] = 0;
    m[4] = 1;
    m[5] = 0;
    m[6] = 0;
    m[7] = 0;
    m[8] = 1;
    return this;
  }

  toString() {
    return '[' + this.data.join(', ') + ']';
  }

  transpose() {
    const m = this.data;
    let tmp;
    tmp = m[1];
    m[1] = m[3];
    m[3] = tmp;
    tmp = m[2];
    m[2] = m[6];
    m[6] = tmp;
    tmp = m[5];
    m[5] = m[7];
    m[7] = tmp;
    return this;
  }

  setFromMat4(m) {
    const src = m.data;
    const dst = this.data;
    dst[0] = src[0];
    dst[1] = src[1];
    dst[2] = src[2];
    dst[3] = src[4];
    dst[4] = src[5];
    dst[5] = src[6];
    dst[6] = src[8];
    dst[7] = src[9];
    dst[8] = src[10];
    return this;
  }

  transformVector(vec, res = new Vec3()) {
    const m = this.data;
    const x = vec.x;
    const y = vec.y;
    const z = vec.z;
    res.x = x * m[0] + y * m[3] + z * m[6];
    res.y = x * m[1] + y * m[4] + z * m[7];
    res.z = x * m[2] + y * m[5] + z * m[8];
    return res;
  }

}

Mat3.IDENTITY = Object.freeze(new Mat3());
Mat3.ZERO = Object.freeze(new Mat3().set([0, 0, 0, 0, 0, 0, 0, 0, 0]));

export { Mat3 };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0My5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL21hdGgvbWF0My5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWZWMzIH0gZnJvbSAnLi92ZWMzLmpzJztcblxuLyoqIEB0eXBlZGVmIHtpbXBvcnQoJy4vbWF0NC5qcycpLk1hdDR9IE1hdDQgKi9cblxuLyoqXG4gKiBBIDN4MyBtYXRyaXguXG4gKi9cbmNsYXNzIE1hdDMge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBNYXQzIGluc3RhbmNlLiBJdCBpcyBpbml0aWFsaXplZCB0byB0aGUgaWRlbnRpdHkgbWF0cml4LlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvLyBDcmVhdGUgYW4gaWRlbnRpdHkgbWF0cml4LiBOb3RlIHRoYXQgYSBuZXcgRmxvYXQzMkFycmF5IGhhcyBhbGwgZWxlbWVudHMgc2V0XG4gICAgICAgIC8vIHRvIHplcm8gYnkgZGVmYXVsdCwgc28gd2Ugb25seSBuZWVkIHRvIHNldCB0aGUgcmVsZXZhbnQgZWxlbWVudHMgdG8gb25lLlxuICAgICAgICBjb25zdCBkYXRhID0gbmV3IEZsb2F0MzJBcnJheSg5KTtcbiAgICAgICAgZGF0YVswXSA9IGRhdGFbNF0gPSBkYXRhWzhdID0gMTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogTWF0cml4IGVsZW1lbnRzIGluIHRoZSBmb3JtIG9mIGEgZmxhdCBhcnJheS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHR5cGUge0Zsb2F0MzJBcnJheX1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGR1cGxpY2F0ZSBvZiB0aGUgc3BlY2lmaWVkIG1hdHJpeC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHt0aGlzfSBBIGR1cGxpY2F0ZSBtYXRyaXguXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB2YXIgc3JjID0gbmV3IHBjLk1hdDMoKS50cmFuc2xhdGUoMTAsIDIwLCAzMCk7XG4gICAgICogdmFyIGRzdCA9IHNyYy5jbG9uZSgpO1xuICAgICAqIGNvbnNvbGUubG9nKFwiVGhlIHR3byBtYXRyaWNlcyBhcmUgXCIgKyAoc3JjLmVxdWFscyhkc3QpID8gXCJlcXVhbFwiIDogXCJkaWZmZXJlbnRcIikpO1xuICAgICAqL1xuICAgIGNsb25lKCkge1xuICAgICAgICAvKiogQHR5cGUge3RoaXN9ICovXG4gICAgICAgIGNvbnN0IGNzdHIgPSB0aGlzLmNvbnN0cnVjdG9yO1xuICAgICAgICByZXR1cm4gbmV3IGNzdHIoKS5jb3B5KHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyB0aGUgY29udGVudHMgb2YgYSBzb3VyY2UgM3gzIG1hdHJpeCB0byBhIGRlc3RpbmF0aW9uIDN4MyBtYXRyaXguXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge01hdDN9IHJocyAtIEEgM3gzIG1hdHJpeCB0byBiZSBjb3BpZWQuXG4gICAgICogQHJldHVybnMge01hdDN9IFNlbGYgZm9yIGNoYWluaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIHNyYyA9IG5ldyBwYy5NYXQzKCkudHJhbnNsYXRlKDEwLCAyMCwgMzApO1xuICAgICAqIHZhciBkc3QgPSBuZXcgcGMuTWF0MygpO1xuICAgICAqIGRzdC5jb3B5KHNyYyk7XG4gICAgICogY29uc29sZS5sb2coXCJUaGUgdHdvIG1hdHJpY2VzIGFyZSBcIiArIChzcmMuZXF1YWxzKGRzdCkgPyBcImVxdWFsXCIgOiBcImRpZmZlcmVudFwiKSk7XG4gICAgICovXG4gICAgY29weShyaHMpIHtcbiAgICAgICAgY29uc3Qgc3JjID0gcmhzLmRhdGE7XG4gICAgICAgIGNvbnN0IGRzdCA9IHRoaXMuZGF0YTtcblxuICAgICAgICBkc3RbMF0gPSBzcmNbMF07XG4gICAgICAgIGRzdFsxXSA9IHNyY1sxXTtcbiAgICAgICAgZHN0WzJdID0gc3JjWzJdO1xuICAgICAgICBkc3RbM10gPSBzcmNbM107XG4gICAgICAgIGRzdFs0XSA9IHNyY1s0XTtcbiAgICAgICAgZHN0WzVdID0gc3JjWzVdO1xuICAgICAgICBkc3RbNl0gPSBzcmNbNl07XG4gICAgICAgIGRzdFs3XSA9IHNyY1s3XTtcbiAgICAgICAgZHN0WzhdID0gc3JjWzhdO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyB0aGUgY29udGVudHMgb2YgYSBzb3VyY2UgYXJyYXlbOV0gdG8gYSBkZXN0aW5hdGlvbiAzeDMgbWF0cml4LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJbXX0gc3JjIC0gQW4gYXJyYXlbOV0gdG8gYmUgY29waWVkLlxuICAgICAqIEByZXR1cm5zIHtNYXQzfSBTZWxmIGZvciBjaGFpbmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciBkc3QgPSBuZXcgcGMuTWF0MygpO1xuICAgICAqIGRzdC5zZXQoWzAsIDEsIDIsIDMsIDQsIDUsIDYsIDcsIDhdKTtcbiAgICAgKi9cbiAgICBzZXQoc3JjKSB7XG4gICAgICAgIGNvbnN0IGRzdCA9IHRoaXMuZGF0YTtcblxuICAgICAgICBkc3RbMF0gPSBzcmNbMF07XG4gICAgICAgIGRzdFsxXSA9IHNyY1sxXTtcbiAgICAgICAgZHN0WzJdID0gc3JjWzJdO1xuICAgICAgICBkc3RbM10gPSBzcmNbM107XG4gICAgICAgIGRzdFs0XSA9IHNyY1s0XTtcbiAgICAgICAgZHN0WzVdID0gc3JjWzVdO1xuICAgICAgICBkc3RbNl0gPSBzcmNbNl07XG4gICAgICAgIGRzdFs3XSA9IHNyY1s3XTtcbiAgICAgICAgZHN0WzhdID0gc3JjWzhdO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcG9ydHMgd2hldGhlciB0d28gbWF0cmljZXMgYXJlIGVxdWFsLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtNYXQzfSByaHMgLSBUaGUgb3RoZXIgbWF0cml4LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBtYXRyaWNlcyBhcmUgZXF1YWwgYW5kIGZhbHNlIG90aGVyd2lzZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciBhID0gbmV3IHBjLk1hdDMoKS50cmFuc2xhdGUoMTAsIDIwLCAzMCk7XG4gICAgICogdmFyIGIgPSBuZXcgcGMuTWF0MygpO1xuICAgICAqIGNvbnNvbGUubG9nKFwiVGhlIHR3byBtYXRyaWNlcyBhcmUgXCIgKyAoYS5lcXVhbHMoYikgPyBcImVxdWFsXCIgOiBcImRpZmZlcmVudFwiKSk7XG4gICAgICovXG4gICAgZXF1YWxzKHJocykge1xuICAgICAgICBjb25zdCBsID0gdGhpcy5kYXRhO1xuICAgICAgICBjb25zdCByID0gcmhzLmRhdGE7XG5cbiAgICAgICAgcmV0dXJuICgobFswXSA9PT0gclswXSkgJiZcbiAgICAgICAgICAgICAgICAobFsxXSA9PT0gclsxXSkgJiZcbiAgICAgICAgICAgICAgICAobFsyXSA9PT0gclsyXSkgJiZcbiAgICAgICAgICAgICAgICAobFszXSA9PT0gclszXSkgJiZcbiAgICAgICAgICAgICAgICAobFs0XSA9PT0gcls0XSkgJiZcbiAgICAgICAgICAgICAgICAobFs1XSA9PT0gcls1XSkgJiZcbiAgICAgICAgICAgICAgICAobFs2XSA9PT0gcls2XSkgJiZcbiAgICAgICAgICAgICAgICAobFs3XSA9PT0gcls3XSkgJiZcbiAgICAgICAgICAgICAgICAobFs4XSA9PT0gcls4XSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlcG9ydHMgd2hldGhlciB0aGUgc3BlY2lmaWVkIG1hdHJpeCBpcyB0aGUgaWRlbnRpdHkgbWF0cml4LlxuICAgICAqXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIG1hdHJpeCBpcyBpZGVudGl0eSBhbmQgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIG0gPSBuZXcgcGMuTWF0MygpO1xuICAgICAqIGNvbnNvbGUubG9nKFwiVGhlIG1hdHJpeCBpcyBcIiArIChtLmlzSWRlbnRpdHkoKSA/IFwiaWRlbnRpdHlcIiA6IFwibm90IGlkZW50aXR5XCIpKTtcbiAgICAgKi9cbiAgICBpc0lkZW50aXR5KCkge1xuICAgICAgICBjb25zdCBtID0gdGhpcy5kYXRhO1xuICAgICAgICByZXR1cm4gKChtWzBdID09PSAxKSAmJlxuICAgICAgICAgICAgICAgIChtWzFdID09PSAwKSAmJlxuICAgICAgICAgICAgICAgIChtWzJdID09PSAwKSAmJlxuICAgICAgICAgICAgICAgIChtWzNdID09PSAwKSAmJlxuICAgICAgICAgICAgICAgIChtWzRdID09PSAxKSAmJlxuICAgICAgICAgICAgICAgIChtWzVdID09PSAwKSAmJlxuICAgICAgICAgICAgICAgIChtWzZdID09PSAwKSAmJlxuICAgICAgICAgICAgICAgIChtWzddID09PSAwKSAmJlxuICAgICAgICAgICAgICAgIChtWzhdID09PSAxKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbWF0cml4IHRvIHRoZSBpZGVudGl0eSBtYXRyaXguXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7TWF0M30gU2VsZiBmb3IgY2hhaW5pbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBtLnNldElkZW50aXR5KCk7XG4gICAgICogY29uc29sZS5sb2coXCJUaGUgbWF0cml4IGlzIFwiICsgKG0uaXNJZGVudGl0eSgpID8gXCJpZGVudGl0eVwiIDogXCJub3QgaWRlbnRpdHlcIikpO1xuICAgICAqL1xuICAgIHNldElkZW50aXR5KCkge1xuICAgICAgICBjb25zdCBtID0gdGhpcy5kYXRhO1xuICAgICAgICBtWzBdID0gMTtcbiAgICAgICAgbVsxXSA9IDA7XG4gICAgICAgIG1bMl0gPSAwO1xuXG4gICAgICAgIG1bM10gPSAwO1xuICAgICAgICBtWzRdID0gMTtcbiAgICAgICAgbVs1XSA9IDA7XG5cbiAgICAgICAgbVs2XSA9IDA7XG4gICAgICAgIG1bN10gPSAwO1xuICAgICAgICBtWzhdID0gMTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgbWF0cml4IHRvIHN0cmluZyBmb3JtLlxuICAgICAqXG4gICAgICogQHJldHVybnMge3N0cmluZ30gVGhlIG1hdHJpeCBpbiBzdHJpbmcgZm9ybS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciBtID0gbmV3IHBjLk1hdDMoKTtcbiAgICAgKiAvLyBPdXRwdXRzIFsxLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAxXVxuICAgICAqIGNvbnNvbGUubG9nKG0udG9TdHJpbmcoKSk7XG4gICAgICovXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiAnWycgKyB0aGlzLmRhdGEuam9pbignLCAnKSArICddJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgdGhlIHRyYW5zcG9zZSBvZiB0aGUgc3BlY2lmaWVkIDN4MyBtYXRyaXguXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7TWF0M30gU2VsZiBmb3IgY2hhaW5pbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB2YXIgbSA9IG5ldyBwYy5NYXQzKCk7XG4gICAgICpcbiAgICAgKiAvLyBUcmFuc3Bvc2UgaW4gcGxhY2VcbiAgICAgKiBtLnRyYW5zcG9zZSgpO1xuICAgICAqL1xuICAgIHRyYW5zcG9zZSgpIHtcbiAgICAgICAgY29uc3QgbSA9IHRoaXMuZGF0YTtcblxuICAgICAgICBsZXQgdG1wO1xuICAgICAgICB0bXAgPSBtWzFdOyBtWzFdID0gbVszXTsgbVszXSA9IHRtcDtcbiAgICAgICAgdG1wID0gbVsyXTsgbVsyXSA9IG1bNl07IG1bNl0gPSB0bXA7XG4gICAgICAgIHRtcCA9IG1bNV07IG1bNV0gPSBtWzddOyBtWzddID0gdG1wO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBzcGVjaWZpZWQgNHg0IG1hdHJpeCB0byBhIE1hdDMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge01hdDR9IG0gLSBUaGUgNHg0IG1hdHJpeCB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtNYXQzfSBTZWxmIGZvciBjaGFpbmluZy5cbiAgICAgKi9cbiAgICBzZXRGcm9tTWF0NChtKSB7XG4gICAgICAgIGNvbnN0IHNyYyA9IG0uZGF0YTtcbiAgICAgICAgY29uc3QgZHN0ID0gdGhpcy5kYXRhO1xuXG4gICAgICAgIGRzdFswXSA9IHNyY1swXTtcbiAgICAgICAgZHN0WzFdID0gc3JjWzFdO1xuICAgICAgICBkc3RbMl0gPSBzcmNbMl07XG5cbiAgICAgICAgZHN0WzNdID0gc3JjWzRdO1xuICAgICAgICBkc3RbNF0gPSBzcmNbNV07XG4gICAgICAgIGRzdFs1XSA9IHNyY1s2XTtcblxuICAgICAgICBkc3RbNl0gPSBzcmNbOF07XG4gICAgICAgIGRzdFs3XSA9IHNyY1s5XTtcbiAgICAgICAgZHN0WzhdID0gc3JjWzEwXTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmFuc2Zvcm1zIGEgMy1kaW1lbnNpb25hbCB2ZWN0b3IgYnkgYSAzeDMgbWF0cml4LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtWZWMzfSB2ZWMgLSBUaGUgMy1kaW1lbnNpb25hbCB2ZWN0b3IgdG8gYmUgdHJhbnNmb3JtZWQuXG4gICAgICogQHBhcmFtIHtWZWMzfSBbcmVzXSAtIEFuIG9wdGlvbmFsIDMtZGltZW5zaW9uYWwgdmVjdG9yIHRvIHJlY2VpdmUgdGhlIHJlc3VsdCBvZiB0aGVcbiAgICAgKiB0cmFuc2Zvcm1hdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7VmVjM30gVGhlIGlucHV0IHZlY3RvciB2IHRyYW5zZm9ybWVkIGJ5IHRoZSBjdXJyZW50IGluc3RhbmNlLlxuICAgICAqL1xuICAgIHRyYW5zZm9ybVZlY3Rvcih2ZWMsIHJlcyA9IG5ldyBWZWMzKCkpIHtcbiAgICAgICAgY29uc3QgbSA9IHRoaXMuZGF0YTtcblxuICAgICAgICBjb25zdCB4ID0gdmVjLng7XG4gICAgICAgIGNvbnN0IHkgPSB2ZWMueTtcbiAgICAgICAgY29uc3QgeiA9IHZlYy56O1xuXG4gICAgICAgIHJlcy54ID0geCAqIG1bMF0gKyB5ICogbVszXSArIHogKiBtWzZdO1xuICAgICAgICByZXMueSA9IHggKiBtWzFdICsgeSAqIG1bNF0gKyB6ICogbVs3XTtcbiAgICAgICAgcmVzLnogPSB4ICogbVsyXSArIHkgKiBtWzVdICsgeiAqIG1bOF07XG5cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIGNvbnN0YW50IG1hdHJpeCBzZXQgdG8gdGhlIGlkZW50aXR5LlxuICAgICAqXG4gICAgICogQHR5cGUge01hdDN9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgc3RhdGljIElERU5USVRZID0gT2JqZWN0LmZyZWV6ZShuZXcgTWF0MygpKTtcblxuICAgIC8qKlxuICAgICAqIEEgY29uc3RhbnQgbWF0cml4IHdpdGggYWxsIGVsZW1lbnRzIHNldCB0byAwLlxuICAgICAqXG4gICAgICogQHR5cGUge01hdDN9XG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgc3RhdGljIFpFUk8gPSBPYmplY3QuZnJlZXplKG5ldyBNYXQzKCkuc2V0KFswLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwXSkpO1xufVxuXG5leHBvcnQgeyBNYXQzIH07XG4iXSwibmFtZXMiOlsiTWF0MyIsImNvbnN0cnVjdG9yIiwiZGF0YSIsIkZsb2F0MzJBcnJheSIsImNsb25lIiwiY3N0ciIsImNvcHkiLCJyaHMiLCJzcmMiLCJkc3QiLCJzZXQiLCJlcXVhbHMiLCJsIiwiciIsImlzSWRlbnRpdHkiLCJtIiwic2V0SWRlbnRpdHkiLCJ0b1N0cmluZyIsImpvaW4iLCJ0cmFuc3Bvc2UiLCJ0bXAiLCJzZXRGcm9tTWF0NCIsInRyYW5zZm9ybVZlY3RvciIsInZlYyIsInJlcyIsIlZlYzMiLCJ4IiwieSIsInoiLCJJREVOVElUWSIsIk9iamVjdCIsImZyZWV6ZSIsIlpFUk8iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFPQSxNQUFNQSxJQUFOLENBQVc7QUFJUEMsRUFBQUEsV0FBVyxHQUFHO0FBR1YsSUFBQSxNQUFNQyxJQUFJLEdBQUcsSUFBSUMsWUFBSixDQUFpQixDQUFqQixDQUFiLENBQUE7QUFDQUQsSUFBQUEsSUFBSSxDQUFDLENBQUQsQ0FBSixHQUFVQSxJQUFJLENBQUMsQ0FBRCxDQUFKLEdBQVVBLElBQUksQ0FBQyxDQUFELENBQUosR0FBVSxDQUE5QixDQUFBO0lBT0EsSUFBS0EsQ0FBQUEsSUFBTCxHQUFZQSxJQUFaLENBQUE7QUFDSCxHQUFBOztBQVdERSxFQUFBQSxLQUFLLEdBQUc7SUFFSixNQUFNQyxJQUFJLEdBQUcsSUFBQSxDQUFLSixXQUFsQixDQUFBO0FBQ0EsSUFBQSxPQUFPLElBQUlJLElBQUosRUFBQSxDQUFXQyxJQUFYLENBQWdCLElBQWhCLENBQVAsQ0FBQTtBQUNILEdBQUE7O0VBYURBLElBQUksQ0FBQ0MsR0FBRCxFQUFNO0FBQ04sSUFBQSxNQUFNQyxHQUFHLEdBQUdELEdBQUcsQ0FBQ0wsSUFBaEIsQ0FBQTtJQUNBLE1BQU1PLEdBQUcsR0FBRyxJQUFBLENBQUtQLElBQWpCLENBQUE7QUFFQU8sSUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTRCxHQUFHLENBQUMsQ0FBRCxDQUFaLENBQUE7QUFDQUMsSUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTRCxHQUFHLENBQUMsQ0FBRCxDQUFaLENBQUE7QUFDQUMsSUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTRCxHQUFHLENBQUMsQ0FBRCxDQUFaLENBQUE7QUFDQUMsSUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTRCxHQUFHLENBQUMsQ0FBRCxDQUFaLENBQUE7QUFDQUMsSUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTRCxHQUFHLENBQUMsQ0FBRCxDQUFaLENBQUE7QUFDQUMsSUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTRCxHQUFHLENBQUMsQ0FBRCxDQUFaLENBQUE7QUFDQUMsSUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTRCxHQUFHLENBQUMsQ0FBRCxDQUFaLENBQUE7QUFDQUMsSUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTRCxHQUFHLENBQUMsQ0FBRCxDQUFaLENBQUE7QUFDQUMsSUFBQUEsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTRCxHQUFHLENBQUMsQ0FBRCxDQUFaLENBQUE7QUFFQSxJQUFBLE9BQU8sSUFBUCxDQUFBO0FBQ0gsR0FBQTs7RUFXREUsR0FBRyxDQUFDRixHQUFELEVBQU07SUFDTCxNQUFNQyxHQUFHLEdBQUcsSUFBQSxDQUFLUCxJQUFqQixDQUFBO0FBRUFPLElBQUFBLEdBQUcsQ0FBQyxDQUFELENBQUgsR0FBU0QsR0FBRyxDQUFDLENBQUQsQ0FBWixDQUFBO0FBQ0FDLElBQUFBLEdBQUcsQ0FBQyxDQUFELENBQUgsR0FBU0QsR0FBRyxDQUFDLENBQUQsQ0FBWixDQUFBO0FBQ0FDLElBQUFBLEdBQUcsQ0FBQyxDQUFELENBQUgsR0FBU0QsR0FBRyxDQUFDLENBQUQsQ0FBWixDQUFBO0FBQ0FDLElBQUFBLEdBQUcsQ0FBQyxDQUFELENBQUgsR0FBU0QsR0FBRyxDQUFDLENBQUQsQ0FBWixDQUFBO0FBQ0FDLElBQUFBLEdBQUcsQ0FBQyxDQUFELENBQUgsR0FBU0QsR0FBRyxDQUFDLENBQUQsQ0FBWixDQUFBO0FBQ0FDLElBQUFBLEdBQUcsQ0FBQyxDQUFELENBQUgsR0FBU0QsR0FBRyxDQUFDLENBQUQsQ0FBWixDQUFBO0FBQ0FDLElBQUFBLEdBQUcsQ0FBQyxDQUFELENBQUgsR0FBU0QsR0FBRyxDQUFDLENBQUQsQ0FBWixDQUFBO0FBQ0FDLElBQUFBLEdBQUcsQ0FBQyxDQUFELENBQUgsR0FBU0QsR0FBRyxDQUFDLENBQUQsQ0FBWixD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
