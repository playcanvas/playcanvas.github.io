import"../../../core/tracing.js";class e{constructor(e){this.initialized=!1,this.colorFormat=void 0,this.key=void 0,this.depthFormat=void 0,this.hasStencil=void 0,this.multisampledColorBuffer=void 0,this.depthTexture=null,this.depthTextureInternal=!1,this.assignedColorTexture=null,this.renderPassDescriptor={},this.renderTarget=e,e.colorBuffer&&(this.colorFormat=e.colorBuffer.impl.format),this.updateKey()}destroy(e){var t,s;(this.initialized=!1,this.depthTextureInternal)&&(null==(s=this.depthTexture)||s.destroy(),this.depthTexture=null);this.assignedColorTexture=null,null==(t=this.multisampledColorBuffer)||t.destroy(),this.multisampledColorBuffer=null}updateKey(){const e=this.renderTarget;this.key=`${this.colorFormat}-${e.depth?this.depthFormat:""}-${e.samples}`}setDepthFormat(e){this.depthFormat=e,this.hasStencil="depth24plus-stencil8"===e}assignColorTexture(e){this.assignedColorTexture=e;const t=e.createView(),s=this.renderPassDescriptor.colorAttachments[0];this.renderTarget.samples>1?s.resolveTarget=t:s.view=t,this.colorFormat=e.format,this.updateKey()}init(e,t){const s=e.wgpu,{samples:r,width:i,height:o,depth:l,depthBuffer:a}=t;if(l||a){if(a)this.depthTexture=a.impl.gpuTexture,this.setDepthFormat(a.impl.format);else{this.setDepthFormat("depth24plus-stencil8");const e={size:[i,o,1],dimension:"2d",sampleCount:r,format:this.depthFormat,usage:GPUTextureUsage.RENDER_ATTACHMENT};r<=1&&(e.usage|=GPUTextureUsage.COPY_SRC),this.depthTexture=s.createTexture(e),this.depthTextureInternal=!0}this.renderPassDescriptor.depthStencilAttachment={view:this.depthTexture.createView()}}const h={};this.renderPassDescriptor.colorAttachments=[];const d=t.colorBuffer;let p=null;if(d&&(p=d.impl.getView(e),d.cubemap&&(p=d.impl.createView({dimension:"2d",baseArrayLayer:t.face,arrayLayerCount:1}))),r>1){const e={size:[i,o,1],dimension:"2d",sampleCount:r,format:this.colorFormat,usage:GPUTextureUsage.RENDER_ATTACHMENT};this.multisampledColorBuffer=s.createTexture(e),h.view=this.multisampledColorBuffer.createView(),h.resolveTarget=p}else h.view=p;(h.view||this.colorFormat)&&this.renderPassDescriptor.colorAttachments.push(h),this.initialized=!0}setupForRenderPass(e){var t;const s=null==(t=this.renderPassDescriptor.colorAttachments)?void 0:t[0];s&&(s.clearValue=e.colorOps.clearValue,s.loadOp=e.colorOps.clear?"clear":"load",s.storeOp=e.colorOps.store?"store":"discard");const r=this.renderPassDescriptor.depthStencilAttachment;r&&(r.depthClearValue=e.depthStencilOps.clearDepthValue,r.depthLoadOp=e.depthStencilOps.clearDepth?"clear":"load",r.depthStoreOp=e.depthStencilOps.storeDepth?"store":"discard",r.depthReadOnly=!1,this.hasStencil&&(r.stencilClearValue=e.depthStencilOps.clearStencilValue,r.stencilLoadOp=e.depthStencilOps.clearStencil?"clear":"load",r.stencilStoreOp=e.depthStencilOps.storeStencil?"store":"discard",r.stencilReadOnly=!1))}loseContext(){this.initialized=!1}resolve(e,t,s,r){}}export{e as WebgpuRenderTarget};
