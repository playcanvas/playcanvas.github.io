import{Asset as t}from"../../../asset/asset.js";import{Entity as e}from"../../../framework/entity.js";import{MeshInstance as s}from"../../../scene/mesh-instance.js";import{MorphInstance as n}from"../../../scene/morph-instance.js";import{SkinInstance as a}from"../../../scene/skin-instance.js";import{SkinInstanceCache as r}from"../../../scene/skin-instance-cache.js";import{Model as i}from"../../../scene/model.js";import"../../../core/tracing.js";class o{constructor(t,e,s,n){const a=function(t,n,a){const r=o.createAsset(e.name,t,n,a);return s.add(r),r},r=[];for(let e=0;e<t.renders.length;++e)r.push(a("render",t.renders[e],e));const i=[];for(let e=0;e<t.materials.length;++e)i.push(a("material",t.materials[e],e));const l=[];for(let e=0;e<t.animations.length;++e)l.push(a("animation",t.animations[e],e));this.data=t,this._model=null,this._assetName=e.name,this._assets=s,this._defaultMaterial=n,this.renders=r,this.materials=i,this.textures=t.textures,this.animations=l}get model(){if(!this._model){const t=o.createModel(this.data,this._defaultMaterial),e=o.createAsset(this._assetName,"model",t,0);this._assets.add(e),this._model=e}return this._model}static createAsset(e,s,n,a){const r=new t(e+"/"+s+"/"+a,s,{url:""});return r.resource=n,r.loaded=!0,r}instantiateModelEntity(t){const s=new e;return s.addComponent("model",Object.assign({type:"asset",asset:this.model},t)),s}instantiateRenderEntity(t){const a=this._defaultMaterial,i=[],l=function(t,e,r,o,l,h,c){const m=l[r.id],d=void 0===m?a:o[m],u=new s(r,d);return r.morph&&(u.morphInstance=new n(r.morph)),c.hasOwnProperty("skin")&&i.push({meshInstance:u,rootBone:t,entity:e}),u},h=(s,n,a)=>{const r=new e;n._cloneInternal(r),s||(s=r);let i=null,o=null;for(let t=0;t<a.nodes.length;t++){if(a.nodes[t]===n){const e=a.gltf.nodes[t];if(e.hasOwnProperty("mesh")){const t=a.renders[e.mesh].meshes;o=this.renders[e.mesh];for(var c=0;c<t.length;c++){const n=t[c];if(n){const t=l(s,r,n,a.materials,a.meshDefaultMaterials,a.skins,e);i||(i=[]),i.push(t)}}}if(a.lights){const t=a.lights.get(e);t&&r.addChild(t.clone())}if(a.cameras){const t=a.cameras.get(e);t&&t.camera.system.cloneComponent(t,r)}}}i&&(r.addComponent("render",Object.assign({type:"asset",meshInstances:i,rootBone:s},t)),r.render.assignAsset(o));const m=n.children;for(let t=0;t<m.length;t++){const e=h(s,m[t],a);r.addChild(e)}return r},c=[];for(const t of this.data.scenes)c.push(h(null,t,this.data));return i.forEach((t=>{t.meshInstance.skinInstance=r.createCachedSkinInstance(t.meshInstance.mesh.skin,t.rootBone,t.entity)})),o.createSceneHierarchy(c,"Entity")}getMaterialVariants(){return this.data.variants?Object.keys(this.data.variants):[]}applyMaterialVariant(t,e){const s=e?this.data.variants[e]:null;if(void 0===s)return;const n=t.findComponents("render");for(let t=0;t<n.length;t++){const e=n[t];this._applyMaterialVariant(s,e.meshInstances)}}applyMaterialVariantInstances(t,e){const s=e?this.data.variants[e]:null;void 0!==s&&this._applyMaterialVariant(s,t)}_applyMaterialVariant(t,e){e.forEach((e=>{if(null===t)e.material=this._defaultMaterial;else{const s=this.data.meshVariants[e.mesh.id];s&&(e.material=this.data.materials[s[t]])}}))}static createSceneHierarchy(t,e){let s=null;if(1===t.length)s=t[0];else{s=new e("SceneGroup");for(const e of t)s.addChild(e)}return s}static createModel(t,e){const r=function(a,r,i,o,l,h,c){const m=t.meshDefaultMaterials[r.id],d=void 0===m?e:l[m],u=new s(r,d,h);if(r.morph){const t=new n(r.morph);u.morphInstance=t,a.morphInstances.push(t)}if(c.hasOwnProperty("skin")){const t=c.skin,e=i[t];r.skin=e;const s=o[t];u.skinInstance=s,a.skinInstances.push(s)}a.meshInstances.push(u)},l=new i,h=[];for(const e of t.skins){const t=new a(e);t.bones=e.bones,h.push(t)}l.graph=o.createSceneHierarchy(t.scenes,"GraphNode");for(let e=0;e<t.nodes.length;e++){const s=t.nodes[e];if(s.root===l.graph){const n=t.gltf.nodes[e];if(n.hasOwnProperty("mesh")){const e=t.renders[n.mesh].meshes;for(var c=0;c<e.length;c++){const a=e[c];a&&r(l,a,t.skins,h,t.materials,s,n)}}}}return l}destroy(){const t=this._assets,e=function(e){t.remove(e),e.unload()},s=function(t){t.forEach((function(t){e(t)}))};this.animations&&(s(this.animations),this.animations=null),this.textures&&(s(this.textures),this.textures=null),this.materials&&(s(this.materials),this.materials=null),this.renders&&(s(this.renders),this.renders=null),this._model&&(e(this._model),this._model=null),this.data=null,this.assets=null}}export{o as GlbContainerResource};
