/**
 * @license
 * PlayCanvas Engine v1.57.1 revision 256dd83c2 (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { EventHandler } from '../core/event-handler.js';
import { platform } from '../core/platform.js';
import { now } from '../core/time.js';
import { ScopeSpace } from './scope-space.js';
import { ProgramLibrary } from './program-library.js';
import { PRIMITIVE_TRIFAN, PRIMITIVE_POINTS } from './constants.js';
import { Debug } from '../core/debug.js';

const EVENT_RESIZE = 'resizecanvas';

class GraphicsDevice extends EventHandler {
  constructor(canvas) {
    super();
    this.canvas = void 0;
    this.deviceType = void 0;
    this.scope = void 0;
    this.boneLimit = void 0;
    this.maxAnisotropy = void 0;
    this.maxCubeMapSize = void 0;
    this.maxTextureSize = void 0;
    this.maxVolumeSize = void 0;
    this.precision = void 0;
    this.renderTarget = null;
    this.insideRenderPass = false;
    this.supportsInstancing = void 0;
    this.supportsUniformBuffers = false;
    this.textureFloatRenderable = void 0;
    this.textureHalfFloatRenderable = void 0;
    this.canvas = canvas;
    this._width = 0;
    this._height = 0;
    this._maxPixelRatio = 1;
    this.shaders = [];
    this.buffers = [];
    this.textures = [];
    this.targets = [];
    this._vram = {
      texShadow: 0,
      texAsset: 0,
      texLightmap: 0,
      tex: 0,
      vb: 0,
      ib: 0,
      ub: 0
    };
    this._shaderStats = {
      vsCompiled: 0,
      fsCompiled: 0,
      linked: 0,
      materialShaders: 0,
      compileTime: 0
    };
    this.initializeContextCaches();
    this._drawCallsPerFrame = 0;
    this._shaderSwitchesPerFrame = 0;
    this._primsPerFrame = [];

    for (let i = PRIMITIVE_POINTS; i <= PRIMITIVE_TRIFAN; i++) {
      this._primsPerFrame[i] = 0;
    }

    this._renderTargetCreationTime = 0;
    this.scope = new ScopeSpace("Device");
    this.textureBias = this.scope.resolve("textureBias");
    this.textureBias.setValue(0.0);
    this.programLib = new ProgramLibrary(this);
  }

  destroy() {
    this.fire('destroy');
  }

  postDestroy() {
    this.scope = null;
    this.canvas = null;
  }

  toJSON(key) {
    return undefined;
  }

  initializeContextCaches() {
    this.indexBuffer = null;
    this.vertexBuffers = [];
    this.shader = null;
    this.renderTarget = null;
  }

  getProgramLibrary() {
    return this.programLib;
  }

  setProgramLibrary(programLib) {
    this.programLib = programLib;
  }

  setRenderTarget(renderTarget) {
    this.renderTarget = renderTarget;
  }

  setIndexBuffer(indexBuffer) {
    this.indexBuffer = indexBuffer;
  }

  setVertexBuffer(vertexBuffer) {
    if (vertexBuffer) {
      this.vertexBuffers.push(vertexBuffer);
    }
  }

  getRenderTarget() {
    return this.renderTarget;
  }

  initRenderTarget(target) {
    if (target.initialized) return;
    const startTime = now();
    this.fire('fbo:create', {
      timestamp: startTime,
      target: this
    });
    target.init();
    this.targets.push(target);
    this._renderTargetCreationTime += now() - startTime;
  }

  _isBrowserInterface(texture) {
    return typeof HTMLCanvasElement !== 'undefined' && texture instanceof HTMLCanvasElement || typeof HTMLImageElement !== 'undefined' && texture instanceof HTMLImageElement || typeof HTMLVideoElement !== 'undefined' && texture instanceof HTMLVideoElement || typeof ImageBitmap !== 'undefined' && texture instanceof ImageBitmap;
  }

  resizeCanvas(width, height) {
    this._width = width;
    this._height = height;
    const ratio = Math.min(this._maxPixelRatio, platform.browser ? window.devicePixelRatio : 1);
    width = Math.floor(width * ratio);
    height = Math.floor(height * ratio);

    if (this.canvas.width !== width || this.canvas.height !== height) {
      this.canvas.width = width;
      this.canvas.height = height;
      this.fire(EVENT_RESIZE, width, height);
    }
  }

  setResolution(width, height) {
    this._width = width;
    this._height = height;
    this.canvas.width = width;
    this.canvas.height = height;
    this.fire(EVENT_RESIZE, width, height);
  }

  updateClientRect() {
    this.clientRect = this.canvas.getBoundingClientRect();
  }

  get width() {
    Debug.error("GraphicsDevice.width is not implemented on current device.");
    return this.canvas.width;
  }

  get height() {
    Debug.error("GraphicsDevice.height is not implemented on current device.");
    return this.canvas.height;
  }

  set fullscreen(fullscreen) {
    Debug.error("GraphicsDevice.fullscreen is not implemented on current device.");
  }

  get fullscreen() {
    Debug.error("GraphicsDevice.fullscreen is not implemented on current device.");
    return false;
  }

  set maxPixelRatio(ratio) {
    this._maxPixelRatio = ratio;
    this.resizeCanvas(this._width, this._height);
  }

  get maxPixelRatio() {
    return this._maxPixelRatio;
  }

  getBoneLimit() {
    return this.boneLimit;
  }

  setBoneLimit(maxBones) {
    this.boneLimit = maxBones;
  }

}

export { GraphicsDevice };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JhcGhpY3MtZGV2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZ3JhcGhpY3MvZ3JhcGhpY3MtZGV2aWNlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50SGFuZGxlciB9IGZyb20gJy4uL2NvcmUvZXZlbnQtaGFuZGxlci5qcyc7XG5pbXBvcnQgeyBwbGF0Zm9ybSB9IGZyb20gJy4uL2NvcmUvcGxhdGZvcm0uanMnO1xuaW1wb3J0IHsgbm93IH0gZnJvbSAnLi4vY29yZS90aW1lLmpzJztcblxuaW1wb3J0IHsgU2NvcGVTcGFjZSB9IGZyb20gJy4vc2NvcGUtc3BhY2UuanMnO1xuaW1wb3J0IHsgUHJvZ3JhbUxpYnJhcnkgfSBmcm9tICcuL3Byb2dyYW0tbGlicmFyeS5qcyc7XG5cbmltcG9ydCB7XG4gICAgUFJJTUlUSVZFX1BPSU5UUywgUFJJTUlUSVZFX1RSSUZBTlxufSBmcm9tICcuL2NvbnN0YW50cy5qcyc7XG5pbXBvcnQgeyBEZWJ1ZyB9IGZyb20gJy4uL2NvcmUvZGVidWcuanMnO1xuXG5jb25zdCBFVkVOVF9SRVNJWkUgPSAncmVzaXplY2FudmFzJztcblxuLyoqIEB0eXBlZGVmIHtpbXBvcnQoJy4vcmVuZGVyLXRhcmdldC5qcycpLlJlbmRlclRhcmdldH0gUmVuZGVyVGFyZ2V0ICovXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi9zaGFkZXIuanMnKS5TaGFkZXJ9IFNoYWRlciAqL1xuLyoqIEB0eXBlZGVmIHtpbXBvcnQoJy4vdGV4dHVyZS5qcycpLlRleHR1cmV9IFRleHR1cmUgKi9cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KCcuL2luZGV4LWJ1ZmZlci5qcycpLkluZGV4QnVmZmVyfSBJbmRleEJ1ZmZlciAqL1xuLyoqIEB0eXBlZGVmIHtpbXBvcnQoJy4vdmVydGV4LWJ1ZmZlci5qcycpLlZlcnRleEJ1ZmZlcn0gVmVydGV4QnVmZmVyICovXG5cbi8qKlxuICogVGhlIGdyYXBoaWNzIGRldmljZSBtYW5hZ2VzIHRoZSB1bmRlcmx5aW5nIGdyYXBoaWNzIGNvbnRleHQuIEl0IGlzIHJlc3BvbnNpYmxlIGZvciBzdWJtaXR0aW5nXG4gKiByZW5kZXIgc3RhdGUgY2hhbmdlcyBhbmQgZ3JhcGhpY3MgcHJpbWl0aXZlcyB0byB0aGUgaGFyZHdhcmUuIEEgZ3JhcGhpY3MgZGV2aWNlIGlzIHRpZWQgdG8gYVxuICogc3BlY2lmaWMgY2FudmFzIEhUTUwgZWxlbWVudC4gSXQgaXMgdmFsaWQgdG8gaGF2ZSBtb3JlIHRoYW4gb25lIGNhbnZhcyBlbGVtZW50IHBlciBwYWdlIGFuZFxuICogY3JlYXRlIGEgbmV3IGdyYXBoaWNzIGRldmljZSBhZ2FpbnN0IGVhY2guXG4gKlxuICogQGF1Z21lbnRzIEV2ZW50SGFuZGxlclxuICovXG5jbGFzcyBHcmFwaGljc0RldmljZSBleHRlbmRzIEV2ZW50SGFuZGxlciB7XG4gICAgLyoqXG4gICAgICogVGhlIGNhbnZhcyBET00gZWxlbWVudCB0aGF0IHByb3ZpZGVzIHRoZSB1bmRlcmx5aW5nIFdlYkdMIGNvbnRleHQgdXNlZCBieSB0aGUgZ3JhcGhpY3MgZGV2aWNlLlxuICAgICAqXG4gICAgICogQHR5cGUge0hUTUxDYW52YXNFbGVtZW50fVxuICAgICAqL1xuICAgIGNhbnZhcztcblxuICAgIC8qKlxuICAgICAqIFRoZSBncmFwaGljcyBkZXZpY2UgdHlwZSwgREVWSUNFVFlQRV9XRUJHTCBvciBERVZJQ0VUWVBFX1dFQkdQVS5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIGRldmljZVR5cGU7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2NvcGUgbmFtZXNwYWNlIGZvciBzaGFkZXIgYXR0cmlidXRlcyBhbmQgdmFyaWFibGVzLlxuICAgICAqXG4gICAgICogQHR5cGUge1Njb3BlU3BhY2V9XG4gICAgICovXG4gICAgc2NvcGU7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbWF4aW11bSBudW1iZXIgb2Ygc3VwcG9ydGVkIGJvbmVzIHVzaW5nIHVuaWZvcm0gYnVmZmVycy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgYm9uZUxpbWl0O1xuXG4gICAgLyoqXG4gICAgICogVGhlIG1heGltdW0gc3VwcG9ydGVkIHRleHR1cmUgYW5pc290cm9weSBzZXR0aW5nLlxuICAgICAqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBtYXhBbmlzb3Ryb3B5O1xuXG4gICAgLyoqXG4gICAgICogVGhlIG1heGltdW0gc3VwcG9ydGVkIGRpbWVuc2lvbiBvZiBhIGN1YmUgbWFwLlxuICAgICAqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBtYXhDdWJlTWFwU2l6ZTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBtYXhpbXVtIHN1cHBvcnRlZCBkaW1lbnNpb24gb2YgYSB0ZXh0dXJlLlxuICAgICAqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBtYXhUZXh0dXJlU2l6ZTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBtYXhpbXVtIHN1cHBvcnRlZCBkaW1lbnNpb24gb2YgYSAzRCB0ZXh0dXJlIChhbnkgYXhpcykuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIG1heFZvbHVtZVNpemU7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaGlnaGVzdCBzaGFkZXIgcHJlY2lzaW9uIHN1cHBvcnRlZCBieSB0aGlzIGdyYXBoaWNzIGRldmljZS4gQ2FuIGJlICdoaXBocCcsICdtZWRpdW1wJyBvclxuICAgICAqICdsb3dwJy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgcHJlY2lzaW9uO1xuXG4gICAgLyoqXG4gICAgICogQ3VycmVudGx5IGFjdGl2ZSByZW5kZXIgdGFyZ2V0LlxuICAgICAqXG4gICAgICogQHR5cGUge1JlbmRlclRhcmdldH1cbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgcmVuZGVyVGFyZ2V0ID0gbnVsbDtcblxuICAgIC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cbiAgICBpbnNpZGVSZW5kZXJQYXNzID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBUcnVlIGlmIGhhcmR3YXJlIGluc3RhbmNpbmcgaXMgc3VwcG9ydGVkLlxuICAgICAqXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgc3VwcG9ydHNJbnN0YW5jaW5nO1xuXG4gICAgLyoqXG4gICAgICogVHJ1ZSBpZiB0aGUgZGV2aWNlIHN1cHBvcnRzIHVuaWZvcm0gYnVmZmVycy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBzdXBwb3J0c1VuaWZvcm1CdWZmZXJzID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBUcnVlIGlmIDMyLWJpdCBmbG9hdGluZy1wb2ludCB0ZXh0dXJlcyBjYW4gYmUgdXNlZCBhcyBhIGZyYW1lIGJ1ZmZlci5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHRleHR1cmVGbG9hdFJlbmRlcmFibGU7XG5cbiAgICAgLyoqXG4gICAgICAqIFRydWUgaWYgMTYtYml0IGZsb2F0aW5nLXBvaW50IHRleHR1cmVzIGNhbiBiZSB1c2VkIGFzIGEgZnJhbWUgYnVmZmVyLlxuICAgICAgKlxuICAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgICovXG4gICAgdGV4dHVyZUhhbGZGbG9hdFJlbmRlcmFibGU7XG5cbiAgICBjb25zdHJ1Y3RvcihjYW52YXMpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcblxuICAgICAgICAvLyBsb2NhbCB3aWR0aC9oZWlnaHQgd2l0aG91dCBwaXhlbFJhdGlvIGFwcGxpZWRcbiAgICAgICAgdGhpcy5fd2lkdGggPSAwO1xuICAgICAgICB0aGlzLl9oZWlnaHQgPSAwO1xuXG4gICAgICAgIHRoaXMuX21heFBpeGVsUmF0aW8gPSAxO1xuXG4gICAgICAgIC8vIEFycmF5IG9mIG9iamVjdHMgdGhhdCBuZWVkIHRvIGJlIHJlLWluaXRpYWxpemVkIGFmdGVyIGEgY29udGV4dCByZXN0b3JlIGV2ZW50XG4gICAgICAgIC8qKiBAdHlwZSB7U2hhZGVyW119ICovXG4gICAgICAgIHRoaXMuc2hhZGVycyA9IFtdO1xuXG4gICAgICAgIHRoaXMuYnVmZmVycyA9IFtdO1xuXG4gICAgICAgIC8qKiBAdHlwZSB7VGV4dHVyZVtdfSAqL1xuICAgICAgICB0aGlzLnRleHR1cmVzID0gW107XG5cbiAgICAgICAgLyoqIEB0eXBlIHtSZW5kZXJUYXJnZXRbXX0gKi9cbiAgICAgICAgdGhpcy50YXJnZXRzID0gW107XG5cbiAgICAgICAgdGhpcy5fdnJhbSA9IHtcbiAgICAgICAgICAgIC8vICNpZiBfUFJPRklMRVJcbiAgICAgICAgICAgIHRleFNoYWRvdzogMCxcbiAgICAgICAgICAgIHRleEFzc2V0OiAwLFxuICAgICAgICAgICAgdGV4TGlnaHRtYXA6IDAsXG4gICAgICAgICAgICAvLyAjZW5kaWZcbiAgICAgICAgICAgIHRleDogMCxcbiAgICAgICAgICAgIHZiOiAwLFxuICAgICAgICAgICAgaWI6IDAsXG4gICAgICAgICAgICB1YjogMFxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuX3NoYWRlclN0YXRzID0ge1xuICAgICAgICAgICAgdnNDb21waWxlZDogMCxcbiAgICAgICAgICAgIGZzQ29tcGlsZWQ6IDAsXG4gICAgICAgICAgICBsaW5rZWQ6IDAsXG4gICAgICAgICAgICBtYXRlcmlhbFNoYWRlcnM6IDAsXG4gICAgICAgICAgICBjb21waWxlVGltZTogMFxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZUNvbnRleHRDYWNoZXMoKTtcblxuICAgICAgICAvLyBQcm9maWxlciBzdGF0c1xuICAgICAgICB0aGlzLl9kcmF3Q2FsbHNQZXJGcmFtZSA9IDA7XG4gICAgICAgIHRoaXMuX3NoYWRlclN3aXRjaGVzUGVyRnJhbWUgPSAwO1xuXG4gICAgICAgIHRoaXMuX3ByaW1zUGVyRnJhbWUgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IFBSSU1JVElWRV9QT0lOVFM7IGkgPD0gUFJJTUlUSVZFX1RSSUZBTjsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLl9wcmltc1BlckZyYW1lW2ldID0gMDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yZW5kZXJUYXJnZXRDcmVhdGlvblRpbWUgPSAwO1xuXG4gICAgICAgIC8vIENyZWF0ZSB0aGUgU2NvcGVOYW1lc3BhY2UgZm9yIHNoYWRlciBhdHRyaWJ1dGVzIGFuZCB2YXJpYWJsZXNcbiAgICAgICAgdGhpcy5zY29wZSA9IG5ldyBTY29wZVNwYWNlKFwiRGV2aWNlXCIpO1xuXG4gICAgICAgIHRoaXMudGV4dHVyZUJpYXMgPSB0aGlzLnNjb3BlLnJlc29sdmUoXCJ0ZXh0dXJlQmlhc1wiKTtcbiAgICAgICAgdGhpcy50ZXh0dXJlQmlhcy5zZXRWYWx1ZSgwLjApO1xuXG4gICAgICAgIC8vIENyZWF0ZSB0aGUgcHJvZ3JhbSBsaWJyYXJ5IGluc3RhbmNlXG4gICAgICAgIHRoaXMucHJvZ3JhbUxpYiA9IG5ldyBQcm9ncmFtTGlicmFyeSh0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIHRoZSBjYW52YXMgaXMgcmVzaXplZC5cbiAgICAgKlxuICAgICAqIEBldmVudCBHcmFwaGljc0RldmljZSNyZXNpemVjYW52YXNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggLSBUaGUgbmV3IHdpZHRoIG9mIHRoZSBjYW52YXMgaW4gcGl4ZWxzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHQgLSBUaGUgbmV3IGhlaWdodCBvZiB0aGUgY2FudmFzIGluIHBpeGVscy5cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3kgdGhlIGdyYXBoaWNzIGRldmljZS5cbiAgICAgKi9cbiAgICBkZXN0cm95KCkge1xuICAgICAgICAvLyBmaXJlIHRoZSBkZXN0cm95IGV2ZW50LlxuICAgICAgICAvLyB0ZXh0dXJlcyBhbmQgb3RoZXIgZGV2aWNlIHJlc291cmNlcyBtYXkgZGVzdHJveSB0aGVtc2VsdmVzIGluIHJlc3BvbnNlLlxuICAgICAgICB0aGlzLmZpcmUoJ2Rlc3Ryb3knKTtcbiAgICB9XG5cbiAgICAvLyBleGVjdXRlcyBhZnRlciB0aGUgZXh0ZW5kZWQgY2xhc3NlcyBoYXZlIGV4ZWN1dGVkIHRoZWlyIGRlc3Ryb3kgZnVuY3Rpb25cbiAgICBwb3N0RGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5zY29wZSA9IG51bGw7XG4gICAgICAgIHRoaXMuY2FudmFzID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBkb24ndCBzdHJpbmdpZnkgR3JhcGhpY3NEZXZpY2UgdG8gSlNPTiBieSBKU09OLnN0cmluZ2lmeVxuICAgIHRvSlNPTihrZXkpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBpbml0aWFsaXplQ29udGV4dENhY2hlcygpIHtcbiAgICAgICAgdGhpcy5pbmRleEJ1ZmZlciA9IG51bGw7XG4gICAgICAgIHRoaXMudmVydGV4QnVmZmVycyA9IFtdO1xuICAgICAgICB0aGlzLnNoYWRlciA9IG51bGw7XG4gICAgICAgIHRoaXMucmVuZGVyVGFyZ2V0ID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXRyaWV2ZXMgdGhlIHByb2dyYW0gbGlicmFyeSBhc3NpZ25lZCB0byB0aGUgc3BlY2lmaWVkIGdyYXBoaWNzIGRldmljZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtQcm9ncmFtTGlicmFyeX0gVGhlIHByb2dyYW0gbGlicmFyeSBhc3NpZ25lZCB0byB0aGUgZGV2aWNlLlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBnZXRQcm9ncmFtTGlicmFyeSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvZ3JhbUxpYjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIGEgcHJvZ3JhbSBsaWJyYXJ5IHRvIHRoZSBzcGVjaWZpZWQgZGV2aWNlLiBCeSBkZWZhdWx0LCBhIGdyYXBoaWNzIGRldmljZSBpcyBjcmVhdGVkXG4gICAgICogd2l0aCBhIHByb2dyYW0gbGlicmFyeSB0aGF0IG1hbmFnZXMgYWxsIG9mIHRoZSBwcm9ncmFtcyB0aGF0IGFyZSB1c2VkIHRvIHJlbmRlciBhbnlcbiAgICAgKiBncmFwaGljYWwgcHJpbWl0aXZlcy4gSG93ZXZlciwgdGhpcyBmdW5jdGlvbiBhbGxvd3MgdGhlIHVzZXIgdG8gcmVwbGFjZSB0aGUgZXhpc3RpbmcgcHJvZ3JhbVxuICAgICAqIGxpYnJhcnkgd2l0aCBhIG5ldyBvbmUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1Byb2dyYW1MaWJyYXJ5fSBwcm9ncmFtTGliIC0gVGhlIHByb2dyYW0gbGlicmFyeSB0byBhc3NpZ24gdG8gdGhlIGRldmljZS5cbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgc2V0UHJvZ3JhbUxpYnJhcnkocHJvZ3JhbUxpYikge1xuICAgICAgICB0aGlzLnByb2dyYW1MaWIgPSBwcm9ncmFtTGliO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHNwZWNpZmllZCByZW5kZXIgdGFyZ2V0IG9uIHRoZSBkZXZpY2UuIElmIG51bGwgaXMgcGFzc2VkIGFzIGEgcGFyYW1ldGVyLCB0aGUgYmFja1xuICAgICAqIGJ1ZmZlciBiZWNvbWVzIHRoZSBjdXJyZW50IHRhcmdldCBmb3IgYWxsIHJlbmRlcmluZyBvcGVyYXRpb25zLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtSZW5kZXJUYXJnZXR9IHJlbmRlclRhcmdldCAtIFRoZSByZW5kZXIgdGFyZ2V0IHRvIGFjdGl2YXRlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gU2V0IGEgcmVuZGVyIHRhcmdldCB0byByZWNlaXZlIGFsbCByZW5kZXJpbmcgb3V0cHV0XG4gICAgICogZGV2aWNlLnNldFJlbmRlclRhcmdldChyZW5kZXJUYXJnZXQpO1xuICAgICAqXG4gICAgICogLy8gU2V0IHRoZSBiYWNrIGJ1ZmZlciB0byByZWNlaXZlIGFsbCByZW5kZXJpbmcgb3V0cHV0XG4gICAgICogZGV2aWNlLnNldFJlbmRlclRhcmdldChudWxsKTtcbiAgICAgKi9cbiAgICBzZXRSZW5kZXJUYXJnZXQocmVuZGVyVGFyZ2V0KSB7XG4gICAgICAgIHRoaXMucmVuZGVyVGFyZ2V0ID0gcmVuZGVyVGFyZ2V0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGN1cnJlbnQgaW5kZXggYnVmZmVyIG9uIHRoZSBncmFwaGljcyBkZXZpY2UuIE9uIHN1YnNlcXVlbnQgY2FsbHMgdG9cbiAgICAgKiB7QGxpbmsgR3JhcGhpY3NEZXZpY2UjZHJhd30sIHRoZSBzcGVjaWZpZWQgaW5kZXggYnVmZmVyIHdpbGwgYmUgdXNlZCB0byBwcm92aWRlIGluZGV4IGRhdGFcbiAgICAgKiBmb3IgYW55IGluZGV4ZWQgcHJpbWl0aXZlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7SW5kZXhCdWZmZXJ9IGluZGV4QnVmZmVyIC0gVGhlIGluZGV4IGJ1ZmZlciB0byBhc3NpZ24gdG8gdGhlIGRldmljZS5cbiAgICAgKi9cbiAgICBzZXRJbmRleEJ1ZmZlcihpbmRleEJ1ZmZlcikge1xuICAgICAgICAvLyBTdG9yZSB0aGUgaW5kZXggYnVmZmVyXG4gICAgICAgIHRoaXMuaW5kZXhCdWZmZXIgPSBpbmRleEJ1ZmZlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBjdXJyZW50IHZlcnRleCBidWZmZXIgb24gdGhlIGdyYXBoaWNzIGRldmljZS4gT24gc3Vic2VxdWVudCBjYWxscyB0b1xuICAgICAqIHtAbGluayBHcmFwaGljc0RldmljZSNkcmF3fSwgdGhlIHNwZWNpZmllZCB2ZXJ0ZXggYnVmZmVyKHMpIHdpbGwgYmUgdXNlZCB0byBwcm92aWRlIHZlcnRleFxuICAgICAqIGRhdGEgZm9yIGFueSBwcmltaXRpdmVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtWZXJ0ZXhCdWZmZXJ9IHZlcnRleEJ1ZmZlciAtIFRoZSB2ZXJ0ZXggYnVmZmVyIHRvIGFzc2lnbiB0byB0aGUgZGV2aWNlLlxuICAgICAqL1xuICAgIHNldFZlcnRleEJ1ZmZlcih2ZXJ0ZXhCdWZmZXIpIHtcblxuICAgICAgICBpZiAodmVydGV4QnVmZmVyKSB7XG4gICAgICAgICAgICB0aGlzLnZlcnRleEJ1ZmZlcnMucHVzaCh2ZXJ0ZXhCdWZmZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUXVlcmllcyB0aGUgY3VycmVudGx5IHNldCByZW5kZXIgdGFyZ2V0IG9uIHRoZSBkZXZpY2UuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7UmVuZGVyVGFyZ2V0fSBUaGUgY3VycmVudCByZW5kZXIgdGFyZ2V0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gR2V0IHRoZSBjdXJyZW50IHJlbmRlciB0YXJnZXRcbiAgICAgKiB2YXIgcmVuZGVyVGFyZ2V0ID0gZGV2aWNlLmdldFJlbmRlclRhcmdldCgpO1xuICAgICAqL1xuICAgIGdldFJlbmRlclRhcmdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyVGFyZ2V0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemUgcmVuZGVyIHRhcmdldCBiZWZvcmUgaXQgY2FuIGJlIHVzZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1JlbmRlclRhcmdldH0gdGFyZ2V0IC0gVGhlIHJlbmRlciB0YXJnZXQgdG8gYmUgaW5pdGlhbGl6ZWQuXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIGluaXRSZW5kZXJUYXJnZXQodGFyZ2V0KSB7XG5cbiAgICAgICAgaWYgKHRhcmdldC5pbml0aWFsaXplZCkgcmV0dXJuO1xuXG4gICAgICAgIC8vICNpZiBfUFJPRklMRVJcbiAgICAgICAgY29uc3Qgc3RhcnRUaW1lID0gbm93KCk7XG4gICAgICAgIHRoaXMuZmlyZSgnZmJvOmNyZWF0ZScsIHtcbiAgICAgICAgICAgIHRpbWVzdGFtcDogc3RhcnRUaW1lLFxuICAgICAgICAgICAgdGFyZ2V0OiB0aGlzXG4gICAgICAgIH0pO1xuICAgICAgICAvLyAjZW5kaWZcblxuICAgICAgICB0YXJnZXQuaW5pdCgpO1xuICAgICAgICB0aGlzLnRhcmdldHMucHVzaCh0YXJnZXQpO1xuXG4gICAgICAgIC8vICNpZiBfUFJPRklMRVJcbiAgICAgICAgdGhpcy5fcmVuZGVyVGFyZ2V0Q3JlYXRpb25UaW1lICs9IG5vdygpIC0gc3RhcnRUaW1lO1xuICAgICAgICAvLyAjZW5kaWZcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBvcnRzIHdoZXRoZXIgYSB0ZXh0dXJlIHNvdXJjZSBpcyBhIGNhbnZhcywgaW1hZ2UsIHZpZGVvIG9yIEltYWdlQml0bWFwLlxuICAgICAqXG4gICAgICogQHBhcmFtIHsqfSB0ZXh0dXJlIC0gVGV4dHVyZSBzb3VyY2UgZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdGV4dHVyZSBpcyBhIGNhbnZhcywgaW1hZ2UsIHZpZGVvIG9yIEltYWdlQml0bWFwIGFuZCBmYWxzZVxuICAgICAqIG90aGVyd2lzZS5cbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgX2lzQnJvd3NlckludGVyZmFjZSh0ZXh0dXJlKSB7XG4gICAgICAgIHJldHVybiAodHlwZW9mIEhUTUxDYW52YXNFbGVtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0ZXh0dXJlIGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQpIHx8XG4gICAgICAgICAgICAgICAgKHR5cGVvZiBIVE1MSW1hZ2VFbGVtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0ZXh0dXJlIGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudCkgfHxcbiAgICAgICAgICAgICAgICAodHlwZW9mIEhUTUxWaWRlb0VsZW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHRleHR1cmUgaW5zdGFuY2VvZiBIVE1MVmlkZW9FbGVtZW50KSB8fFxuICAgICAgICAgICAgICAgICh0eXBlb2YgSW1hZ2VCaXRtYXAgIT09ICd1bmRlZmluZWQnICYmIHRleHR1cmUgaW5zdGFuY2VvZiBJbWFnZUJpdG1hcCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgd2lkdGggYW5kIGhlaWdodCBvZiB0aGUgY2FudmFzLCB0aGVuIGZpcmVzIHRoZSBgcmVzaXplY2FudmFzYCBldmVudC4gTm90ZSB0aGF0IHRoZVxuICAgICAqIHNwZWNpZmllZCB3aWR0aCBhbmQgaGVpZ2h0IHZhbHVlcyB3aWxsIGJlIG11bHRpcGxpZWQgYnkgdGhlIHZhbHVlIG9mXG4gICAgICoge0BsaW5rIEdyYXBoaWNzRGV2aWNlI21heFBpeGVsUmF0aW99IHRvIGdpdmUgdGhlIGZpbmFsIHJlc3VsdGFudCB3aWR0aCBhbmQgaGVpZ2h0IGZvciB0aGVcbiAgICAgKiBjYW52YXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGggLSBUaGUgbmV3IHdpZHRoIG9mIHRoZSBjYW52YXMuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodCAtIFRoZSBuZXcgaGVpZ2h0IG9mIHRoZSBjYW52YXMuXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIHJlc2l6ZUNhbnZhcyh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIHRoaXMuX3dpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuX2hlaWdodCA9IGhlaWdodDtcblxuICAgICAgICBjb25zdCByYXRpbyA9IE1hdGgubWluKHRoaXMuX21heFBpeGVsUmF0aW8sIHBsYXRmb3JtLmJyb3dzZXIgPyB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA6IDEpO1xuICAgICAgICB3aWR0aCA9IE1hdGguZmxvb3Iod2lkdGggKiByYXRpbyk7XG4gICAgICAgIGhlaWdodCA9IE1hdGguZmxvb3IoaGVpZ2h0ICogcmF0aW8pO1xuXG4gICAgICAgIGlmICh0aGlzLmNhbnZhcy53aWR0aCAhPT0gd2lkdGggfHwgdGhpcy5jYW52YXMuaGVpZ2h0ICE9PSBoZWlnaHQpIHtcbiAgICAgICAgICAgIHRoaXMuY2FudmFzLndpZHRoID0gd2lkdGg7XG4gICAgICAgICAgICB0aGlzLmNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgICAgICB0aGlzLmZpcmUoRVZFTlRfUkVTSVpFLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHdpZHRoIGFuZCBoZWlnaHQgb2YgdGhlIGNhbnZhcywgdGhlbiBmaXJlcyB0aGUgYHJlc2l6ZWNhbnZhc2AgZXZlbnQuIE5vdGUgdGhhdCB0aGVcbiAgICAgKiB2YWx1ZSBvZiB7QGxpbmsgR3JhcGhpY3NEZXZpY2UjbWF4UGl4ZWxSYXRpb30gaXMgaWdub3JlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aCAtIFRoZSBuZXcgd2lkdGggb2YgdGhlIGNhbnZhcy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0IC0gVGhlIG5ldyBoZWlnaHQgb2YgdGhlIGNhbnZhcy5cbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgc2V0UmVzb2x1dGlvbih3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIHRoaXMuX3dpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuX2hlaWdodCA9IGhlaWdodDtcbiAgICAgICAgdGhpcy5jYW52YXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICB0aGlzLmZpcmUoRVZFTlRfUkVTSVpFLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICB9XG5cbiAgICB1cGRhdGVDbGllbnRSZWN0KCkge1xuICAgICAgICB0aGlzLmNsaWVudFJlY3QgPSB0aGlzLmNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXaWR0aCBvZiB0aGUgYmFjayBidWZmZXIgaW4gcGl4ZWxzLlxuICAgICAqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBnZXQgd2lkdGgoKSB7XG4gICAgICAgIERlYnVnLmVycm9yKFwiR3JhcGhpY3NEZXZpY2Uud2lkdGggaXMgbm90IGltcGxlbWVudGVkIG9uIGN1cnJlbnQgZGV2aWNlLlwiKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FudmFzLndpZHRoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhlaWdodCBvZiB0aGUgYmFjayBidWZmZXIgaW4gcGl4ZWxzLlxuICAgICAqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBnZXQgaGVpZ2h0KCkge1xuICAgICAgICBEZWJ1Zy5lcnJvcihcIkdyYXBoaWNzRGV2aWNlLmhlaWdodCBpcyBub3QgaW1wbGVtZW50ZWQgb24gY3VycmVudCBkZXZpY2UuXCIpO1xuICAgICAgICByZXR1cm4gdGhpcy5jYW52YXMuaGVpZ2h0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZ1bGxzY3JlZW4gbW9kZS5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIHNldCBmdWxsc2NyZWVuKGZ1bGxzY3JlZW4pIHtcbiAgICAgICAgRGVidWcuZXJyb3IoXCJHcmFwaGljc0RldmljZS5mdWxsc2NyZWVuIGlzIG5vdCBpbXBsZW1lbnRlZCBvbiBjdXJyZW50IGRldmljZS5cIik7XG4gICAgfVxuXG4gICAgZ2V0IGZ1bGxzY3JlZW4oKSB7XG4gICAgICAgIERlYnVnLmVycm9yKFwiR3JhcGhpY3NEZXZpY2UuZnVsbHNjcmVlbiBpcyBub3QgaW1wbGVtZW50ZWQgb24gY3VycmVudCBkZXZpY2UuXCIpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWF4aW11bSBwaXhlbCByYXRpby5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgc2V0IG1heFBpeGVsUmF0aW8ocmF0aW8pIHtcbiAgICAgICAgdGhpcy5fbWF4UGl4ZWxSYXRpbyA9IHJhdGlvO1xuICAgICAgICB0aGlzLnJlc2l6ZUNhbnZhcyh0aGlzLl93aWR0aCwgdGhpcy5faGVpZ2h0KTtcbiAgICB9XG5cbiAgICBnZXQgbWF4UGl4ZWxSYXRpbygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21heFBpeGVsUmF0aW87XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUXVlcmllcyB0aGUgbWF4aW11bSBudW1iZXIgb2YgYm9uZXMgdGhhdCBjYW4gYmUgcmVmZXJlbmNlZCBieSBhIHNoYWRlci4gVGhlIHNoYWRlclxuICAgICAqIGdlbmVyYXRvcnMgKHByb2dyYW1saWIpIHVzZSB0aGlzIG51bWJlciB0byBzcGVjaWZ5IHRoZSBtYXRyaXggYXJyYXkgc2l6ZSBvZiB0aGUgdW5pZm9ybVxuICAgICAqICdtYXRyaXhfcG9zZVswXScuIFRoZSB2YWx1ZSBpcyBjYWxjdWxhdGVkIGJhc2VkIG9uIHRoZSBudW1iZXIgb2YgYXZhaWxhYmxlIHVuaWZvcm0gdmVjdG9yc1xuICAgICAqIGF2YWlsYWJsZSBhZnRlciBzdWJ0cmFjdGluZyB0aGUgbnVtYmVyIHRha2VuIGJ5IGEgdHlwaWNhbCBoZWF2eXdlaWdodCBzaGFkZXIuIElmIGEgZGlmZmVyZW50XG4gICAgICogbnVtYmVyIGlzIHJlcXVpcmVkLCBpdCBjYW4gYmUgdHVuZWQgdmlhIHtAbGluayBHcmFwaGljc0RldmljZSNzZXRCb25lTGltaXR9LlxuICAgICAqXG4gICAgICogQHJldHVybnMge251bWJlcn0gVGhlIG1heGltdW0gbnVtYmVyIG9mIGJvbmVzIHRoYXQgY2FuIGJlIHN1cHBvcnRlZCBieSB0aGUgaG9zdCBoYXJkd2FyZS5cbiAgICAgKiBAaWdub3JlXG4gICAgICovXG4gICAgZ2V0Qm9uZUxpbWl0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ib25lTGltaXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBtYXhpbXVtIG51bWJlciBvZiBib25lcyB0aGF0IHRoZSBkZXZpY2UgY2FuIHN1cHBvcnQgb24gdGhlIGN1cnJlbnQgaGFyZHdhcmUuXG4gICAgICogVGhpcyBmdW5jdGlvbiBhbGxvd3MgdGhlIGRlZmF1bHQgY2FsY3VsYXRlZCB2YWx1ZSBiYXNlZCBvbiBhdmFpbGFibGUgdmVjdG9yIHVuaWZvcm1zIHRvIGJlXG4gICAgICogb3ZlcnJpZGRlbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtYXhCb25lcyAtIFRoZSBtYXhpbXVtIG51bWJlciBvZiBib25lcyBzdXBwb3J0ZWQgYnkgdGhlIGhvc3QgaGFyZHdhcmUuXG4gICAgICogQGlnbm9yZVxuICAgICAqL1xuICAgIHNldEJvbmVMaW1pdChtYXhCb25lcykge1xuICAgICAgICB0aGlzLmJvbmVMaW1pdCA9IG1heEJvbmVzO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgR3JhcGhpY3NEZXZpY2UgfTtcbiJdLCJuYW1lcyI6WyJFVkVOVF9SRVNJWkUiLCJHcmFwaGljc0RldmljZSIsIkV2ZW50SGFuZGxlciIsImNvbnN0cnVjdG9yIiwiY2FudmFzIiwiZGV2aWNlVHlwZSIsInNjb3BlIiwiYm9uZUxpbWl0IiwibWF4QW5pc290cm9weSIsIm1heEN1YmVNYXBTaXplIiwibWF4VGV4dHVyZVNpemUiLCJtYXhWb2x1bWVTaXplIiwicHJlY2lzaW9uIiwicmVuZGVyVGFyZ2V0IiwiaW5zaWRlUmVuZGVyUGFzcyIsInN1cHBvcnRzSW5zdGFuY2luZyIsInN1cHBvcnRzVW5pZm9ybUJ1ZmZlcnMiLCJ0ZXh0dXJlRmxvYXRSZW5kZXJhYmxlIiwidGV4dHVyZUhhbGZGbG9hdFJlbmRlcmFibGUiLCJfd2lkdGgiLCJfaGVpZ2h0IiwiX21heFBpeGVsUmF0aW8iLCJzaGFkZXJzIiwiYnVmZmVycyIsInRleHR1cmVzIiwidGFyZ2V0cyIsIl92cmFtIiwidGV4U2hhZG93IiwidGV4QXNzZXQiLCJ0ZXhMaWdodG1hcCIsInRleCIsInZiIiwiaWIiLCJ1YiIsIl9zaGFkZXJTdGF0cyIsInZzQ29tcGlsZWQiLCJmc0NvbXBpbGVkIiwibGlua2VkIiwibWF0ZXJpYWxTaGFkZXJzIiwiY29tcGlsZVRpbWUiLCJpbml0aWFsaXplQ29udGV4dENhY2hlcyIsIl9kcmF3Q2FsbHNQZXJGcmFtZSIsIl9zaGFkZXJTd2l0Y2hlc1BlckZyYW1lIiwiX3ByaW1zUGVyRnJhbWUiLCJpIiwiUFJJTUlUSVZFX1BPSU5UUyIsIlBSSU1JVElWRV9UUklGQU4iLCJfcmVuZGVyVGFyZ2V0Q3JlYXRpb25UaW1lIiwiU2NvcGVTcGFjZSIsInRleHR1cmVCaWFzIiwicmVzb2x2ZSIsInNldFZhbHVlIiwicHJvZ3JhbUxpYiIsIlByb2dyYW1MaWJyYXJ5IiwiZGVzdHJveSIsImZpcmUiLCJwb3N0RGVzdHJveSIsInRvSlNPTiIsImtleSIsInVuZGVmaW5lZCIsImluZGV4QnVmZmVyIiwidmVydGV4QnVmZmVycyIsInNoYWRlciIsImdldFByb2dyYW1MaWJyYXJ5Iiwic2V0UHJvZ3JhbUxpYnJhcnkiLCJzZXRSZW5kZXJUYXJnZXQiLCJzZXRJbmRleEJ1ZmZlciIsInNldFZlcnRleEJ1ZmZlciIsInZlcnRleEJ1ZmZlciIsInB1c2giLCJnZXRSZW5kZXJUYXJnZXQiLCJpbml0UmVuZGVyVGFyZ2V0IiwidGFyZ2V0IiwiaW5pdGlhbGl6ZWQiLCJzdGFydFRpbWUiLCJub3ciLCJ0aW1lc3RhbXAiLCJpbml0IiwiX2lzQnJvd3NlckludGVyZmFjZSIsInRleHR1cmUiLCJIVE1MQ2FudmFzRWxlbWVudCIsIkhUTUxJbWFnZUVsZW1lbnQiLCJIVE1MVmlkZW9FbGVtZW50IiwiSW1hZ2VCaXRtYXAiLCJyZXNpemVDYW52YXMiLCJ3aWR0aCIsImhlaWdodCIsInJhdGlvIiwiTWF0aCIsIm1pbiIsInBsYXRmb3JtIiwiYnJvd3NlciIsIndpbmRvdyIsImRldmljZVBpeGVsUmF0aW8iLCJmbG9vciIsInNldFJlc29sdXRpb24iLCJ1cGRhdGVDbGllbnRSZWN0IiwiY2xpZW50UmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIkRlYnVnIiwiZXJyb3IiLCJmdWxsc2NyZWVuIiwibWF4UGl4ZWxSYXRpbyIsImdldEJvbmVMaW1pdCIsInNldEJvbmVMaW1pdCIsIm1heEJvbmVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBWUEsTUFBTUEsWUFBWSxHQUFHLGNBQXJCLENBQUE7O0FBZ0JBLE1BQU1DLGNBQU4sU0FBNkJDLFlBQTdCLENBQTBDO0VBMEd0Q0MsV0FBVyxDQUFDQyxNQUFELEVBQVM7QUFDaEIsSUFBQSxLQUFBLEVBQUEsQ0FBQTtBQURnQixJQUFBLElBQUEsQ0FwR3BCQSxNQW9Hb0IsR0FBQSxLQUFBLENBQUEsQ0FBQTtBQUFBLElBQUEsSUFBQSxDQTVGcEJDLFVBNEZvQixHQUFBLEtBQUEsQ0FBQSxDQUFBO0FBQUEsSUFBQSxJQUFBLENBckZwQkMsS0FxRm9CLEdBQUEsS0FBQSxDQUFBLENBQUE7QUFBQSxJQUFBLElBQUEsQ0E5RXBCQyxTQThFb0IsR0FBQSxLQUFBLENBQUEsQ0FBQTtBQUFBLElBQUEsSUFBQSxDQXZFcEJDLGFBdUVvQixHQUFBLEtBQUEsQ0FBQSxDQUFBO0FBQUEsSUFBQSxJQUFBLENBaEVwQkMsY0FnRW9CLEdBQUEsS0FBQSxDQUFBLENBQUE7QUFBQSxJQUFBLElBQUEsQ0F6RHBCQyxjQXlEb0IsR0FBQSxLQUFBLENBQUEsQ0FBQTtBQUFBLElBQUEsSUFBQSxDQWxEcEJDLGFBa0RvQixHQUFBLEtBQUEsQ0FBQSxDQUFBO0FBQUEsSUFBQSxJQUFBLENBMUNwQkMsU0EwQ29CLEdBQUEsS0FBQSxDQUFBLENBQUE7SUFBQSxJQWxDcEJDLENBQUFBLFlBa0NvQixHQWxDTCxJQWtDSyxDQUFBO0lBQUEsSUEvQnBCQyxDQUFBQSxnQkErQm9CLEdBL0JELEtBK0JDLENBQUE7QUFBQSxJQUFBLElBQUEsQ0F4QnBCQyxrQkF3Qm9CLEdBQUEsS0FBQSxDQUFBLENBQUE7SUFBQSxJQWhCcEJDLENBQUFBLHNCQWdCb0Is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
