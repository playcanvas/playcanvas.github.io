import"../../core/tracing.js";import{FILTER_NEAREST as e,FILTER_LINEAR_MIPMAP_LINEAR as r,FILTER_LINEAR as t,ADDRESS_CLAMP_TO_EDGE as a,PIXELFORMAT_DEPTHSTENCIL as n,PIXELFORMAT_RGBA8 as o}from"../../platform/graphics/constants.js";import{RenderTarget as s}from"../../platform/graphics/render-target.js";import{Texture as i}from"../../platform/graphics/texture.js";import{BlendState as l}from"../../platform/graphics/blend-state.js";import{LAYERID_DEPTH as d,SHADER_DEPTH as h,LAYERID_WORLD as c}from"../constants.js";import{Layer as u}from"../layer.js";const g=["uSceneDepthMap","uDepthMap"],p=["uSceneColorMap","texture_grabPass"];class f{constructor(e,r){this.scene=r,this.device=e,this.layer=null,this.device.webgl2||this.device.isWebGPU?this.initMainPath():this.initFallbackPath()}static requiresRenderPass(e,r){return!e.webgl2&&!e.isWebGPU&&r.renderSceneDepthMap}setupUniform(e,r,t){(r?g:p).forEach((r=>e.scope.resolve(r).setValue(t)))}allocateTexture(n,o,s,l,d,h){return new i(n,{name:s,format:l,width:o?o.colorBuffer.width:n.width,height:o?o.colorBuffer.height:n.height,mipmaps:h,minFilter:d?e:h?r:t,magFilter:d?e:t,addressU:a,addressV:a})}getSourceColorFormat(e){var r;return null!=(r=null==e?void 0:e.format)?r:this.device.framebufferFormat}shouldReallocate(e,r,t){if(t){if((null==e?void 0:e.colorBuffer.format)!==this.getSourceColorFormat(r))return!0}const a=(null==r?void 0:r.width)||this.device.width,n=(null==r?void 0:r.height)||this.device.height;return!e||a!==e.width||n!==e.height}allocateRenderTarget(e,r,t,a,n,o,i){const l=i?g:p,d=this.allocateTexture(t,r,l[0],a,n,o);return e?(e.destroyFrameBuffers(),n?e._depthBuffer=d:e._colorBuffer=d):e=new s({name:"renderTargetSceneGrab",colorBuffer:n?null:d,depthBuffer:n?d:null,depth:!n,stencil:t.supportsStencil,autoResolve:!1}),e}releaseRenderTarget(e){e&&(e.destroyTextureBuffers(),e.destroy())}initMainPath(){const e=this.device,r=this;this.layer=new u({enabled:!1,name:"Depth",id:d,onDisable:function(){r.releaseRenderTarget(this.depthRenderTarget),this.depthRenderTarget=null,r.releaseRenderTarget(this.colorRenderTarget),this.colorRenderTarget=null},onPreRenderOpaque:function(t){const a=this.cameras[t];if(a.renderSceneColorMap){var o;if(r.shouldReallocate(this.colorRenderTarget,null==(o=a.renderTarget)?void 0:o.colorBuffer,!0)){var s;r.releaseRenderTarget(this.colorRenderTarget);const t=r.getSourceColorFormat(null==(s=a.renderTarget)?void 0:s.colorBuffer);this.colorRenderTarget=r.allocateRenderTarget(this.colorRenderTarget,a.renderTarget,e,t,!1,!0,!1)}const t=this.colorRenderTarget.colorBuffer;e.isWebGPU?e.copyRenderTarget(a.renderTarget,this.colorRenderTarget,!0,!1):(e.copyRenderTarget(e.renderTarget,this.colorRenderTarget,!0,!1),e.activeTexture(e.maxCombinedTextures-1),e.bindTexture(t),e.gl.generateMipmap(t.impl._glTarget)),r.setupUniform(e,!1,t)}var i;a.renderSceneDepthMap&&(r.shouldReallocate(this.depthRenderTarget,null==(i=a.renderTarget)?void 0:i.depthBuffer)&&(r.releaseRenderTarget(this.depthRenderTarget),this.depthRenderTarget=r.allocateRenderTarget(this.depthRenderTarget,a.renderTarget,e,n,!0,!1,!0)),e.copyRenderTarget(e.renderTarget,this.depthRenderTarget,!1,!0),r.setupUniform(e,!0,this.depthRenderTarget.depthBuffer))},onPostRenderOpaque:function(e){}})}initFallbackPath(){const e=this,r=this.device,t=this.scene;this.layer=new u({enabled:!1,name:"Depth",id:d,shaderPass:h,onEnable:function(){this.depthRenderTarget=new s({name:"depthRenderTarget-webgl1",depth:!0,stencil:r.supportsStencil,autoResolve:!1,graphicsDevice:r}),this.renderTarget=this.depthRenderTarget},onDisable:function(){this.depthRenderTarget.destroyTextureBuffers(),this.renderTarget=null,e.releaseRenderTarget(this.colorRenderTarget),this.colorRenderTarget=null},onPostCull:function(a){const n=this.cameras[a];if(n.renderSceneDepthMap){var s;this.depthRenderTarget.depthBuffer&&!e.shouldReallocate(this.depthRenderTarget,null==(s=n.renderTarget)?void 0:s.depthBuffer)||(this.depthRenderTarget.destroyTextureBuffers(),this.depthRenderTarget=e.allocateRenderTarget(this.depthRenderTarget,n.renderTarget,r,o,!1,!1,!0));const i=this.instances.visibleOpaque[a],l=i.list,d=t.layers,h=d.subLayerEnabled,u=d.subLayerList,g=d.getLayerById(c).renderTarget;let p=0;const f=d.layerList;for(let e=0;e<f.length;e++){const r=f[e];if(r===this)break;if(r.renderTarget!==g||!r.enabled||!h[e])continue;const t=r.cameras.indexOf(n);if(t<0)continue;let a=u[e]?r.instances.visibleTransparent[t]:r.instances.visibleOpaque[t];const o=a.length;a=a.list;for(let e=0;e<o;e++){const r=a[e];r.material&&r.material.depthWrite&&!r._noDepthDrawGl1&&(l[p]=r,p++)}}i.length=p}},onPreRenderOpaque:function(t){const a=this.cameras[t];if(a.renderSceneColorMap){var n;if(e.shouldReallocate(this.colorRenderTarget,null==(n=a.renderTarget)?void 0:n.colorBuffer)){var o;e.releaseRenderTarget(this.colorRenderTarget);const t=e.getSourceColorFormat(null==(o=a.renderTarget)?void 0:o.colorBuffer);this.colorRenderTarget=e.allocateRenderTarget(this.colorRenderTarget,a.renderTarget,r,t,!1,!1,!1)}const t=this.colorRenderTarget._colorBuffer;t.impl._glTexture||t.impl.initialize(r,t),r.bindTexture(t);const s=r.gl;s.copyTexImage2D(s.TEXTURE_2D,0,t.impl._glFormat,0,0,t.width,t.height,0),t._needsUpload=!1,t._needsMipmapsUpload=!1,e.setupUniform(r,!1,t)}a.renderSceneDepthMap&&e.setupUniform(r,!0,this.depthRenderTarget.colorBuffer)},onDrawCall:function(){r.setBlendState(l.DEFAULT)},onPostRenderOpaque:function(e){if(this.cameras[e].renderSceneDepthMap){this.instances.visibleOpaque[e].length=0}}})}patch(e){e.onEnable=this.layer.onEnable,e.onDisable=this.layer.onDisable,e.onPreRenderOpaque=this.layer.onPreRenderOpaque,e.onPostRenderOpaque=this.layer.onPostRenderOpaque,e.shaderPass=this.layer.shaderPass,e.onPostCull=this.layer.onPostCull,e.onDrawCall=this.layer.onDrawCall}}export{f as SceneGrab};
