import{math as t}from"./math.js";import{Vec3 as s}from"./vec3.js";class h{constructor(t=0,s=0,h=0,i=1){this.x=void 0,this.y=void 0,this.z=void 0,this.w=void 0,4===t.length?(this.x=t[0],this.y=t[1],this.z=t[2],this.w=t[3]):(this.x=t,this.y=s,this.z=h,this.w=i)}clone(){return new(0,this.constructor)(this.x,this.y,this.z,this.w)}conjugate(){return this.x*=-1,this.y*=-1,this.z*=-1,this}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}equals(t){return this.x===t.x&&this.y===t.y&&this.z===t.z&&this.w===t.w}equalsApprox(t,s=1e-6){return Math.abs(this.x-t.x)<s&&Math.abs(this.y-t.y)<s&&Math.abs(this.z-t.z)<s&&Math.abs(this.w-t.w)<s}getAxisAngle(s){let h=2*Math.acos(this.w);const i=Math.sin(h/2);return 0!==i?(s.x=this.x/i,s.y=this.y/i,s.z=this.z/i,(s.x<0||s.y<0||s.z<0)&&(s.x*=-1,s.y*=-1,s.z*=-1,h*=-1)):(s.x=1,s.y=0,s.z=0),h*t.RAD_TO_DEG}getEulerAngles(h=new s){let i,r,e;const n=this.x,a=this.y,z=this.z,x=this.w,y=2*(x*a-n*z);return y<=-.99999?(i=2*Math.atan2(n,x),r=-Math.PI/2,e=0):y>=.99999?(i=2*Math.atan2(n,x),r=Math.PI/2,e=0):(i=Math.atan2(2*(x*n+a*z),1-2*(n*n+a*a)),r=Math.asin(y),e=Math.atan2(2*(x*z+n*a),1-2*(a*a+z*z))),h.set(i,r,e).mulScalar(t.RAD_TO_DEG)}invert(){return this.conjugate().normalize()}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}mul(t){const s=this.x,h=this.y,i=this.z,r=this.w,e=t.x,n=t.y,a=t.z,z=t.w;return this.x=r*e+s*z+h*a-i*n,this.y=r*n+h*z+i*e-s*a,this.z=r*a+i*z+s*n-h*e,this.w=r*z-s*e-h*n-i*a,this}mul2(t,s){const h=t.x,i=t.y,r=t.z,e=t.w,n=s.x,a=s.y,z=s.z,x=s.w;return this.x=e*n+h*x+i*z-r*a,this.y=e*a+i*x+r*n-h*z,this.z=e*z+r*x+h*a-i*n,this.w=e*x-h*n-i*a-r*z,this}normalize(){let t=this.length();return 0===t?(this.x=this.y=this.z=0,this.w=1):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}set(t,s,h,i){return this.x=t,this.y=s,this.z=h,this.w=i,this}setFromAxisAngle(s,h){h*=.5*t.DEG_TO_RAD;const i=Math.sin(h),r=Math.cos(h);return this.x=i*s.x,this.y=i*s.y,this.z=i*s.z,this.w=r,this}setFromEulerAngles(h,i,r){if(h instanceof s){const t=h;h=t.x,i=t.y,r=t.z}const e=.5*t.DEG_TO_RAD;h*=e,i*=e,r*=e;const n=Math.sin(h),a=Math.cos(h),z=Math.sin(i),x=Math.cos(i),y=Math.sin(r),o=Math.cos(r);return this.x=n*x*o-a*z*y,this.y=a*z*o+n*x*y,this.z=a*x*y-n*z*o,this.w=a*x*o+n*z*y,this}setFromMat4(t){let s,h,i,r,e,n,a,z,x,y,o,w,M,u;if(s=(t=t.data)[0],h=t[1],i=t[2],r=t[4],e=t[5],n=t[6],a=t[8],z=t[9],x=t[10],w=s*s+h*h+i*i,0===w)return this;if(w=1/Math.sqrt(w),M=r*r+e*e+n*n,0===M)return this;if(M=1/Math.sqrt(M),u=a*a+z*z+x*x,0===u)return this;u=1/Math.sqrt(u),s*=w,h*=w,i*=w,r*=M,e*=M,n*=M,a*=u,z*=u,x*=u;const c=s+e+x;return c>=0?(y=Math.sqrt(c+1),this.w=.5*y,y=.5/y,this.x=(n-z)*y,this.y=(a-i)*y,this.z=(h-r)*y):s>e?s>x?(o=s-(e+x)+1,o=Math.sqrt(o),this.x=.5*o,o=.5/o,this.w=(n-z)*o,this.y=(h+r)*o,this.z=(i+a)*o):(o=x-(s+e)+1,o=Math.sqrt(o),this.z=.5*o,o=.5/o,this.w=(h-r)*o,this.x=(a+i)*o,this.y=(z+n)*o):e>x?(o=e-(x+s)+1,o=Math.sqrt(o),this.y=.5*o,o=.5/o,this.w=(a-i)*o,this.z=(n+z)*o,this.x=(r+h)*o):(o=x-(s+e)+1,o=Math.sqrt(o),this.z=.5*o,o=.5/o,this.w=(h-r)*o,this.x=(a+i)*o,this.y=(z+n)*o),this}setFromDirections(t,s){const h=1+t.dot(s);return h<Number.EPSILON?Math.abs(t.x)>Math.abs(t.y)?(this.x=-t.z,this.y=0,this.z=t.x,this.w=0):(this.x=0,this.y=-t.z,this.z=t.y,this.w=0):(this.x=t.y*s.z-t.z*s.y,this.y=t.z*s.x-t.x*s.z,this.z=t.x*s.y-t.y*s.x,this.w=h),this.normalize()}slerp(t,s,h){const i=t.x,r=t.y,e=t.z,n=t.w;let a=s.x,z=s.y,x=s.z,y=s.w,o=n*y+i*a+r*z+e*x;if(o<0&&(y=-y,a=-a,z=-z,x=-x,o=-o),Math.abs(o)>=1)return this.w=n,this.x=i,this.y=r,this.z=e,this;const w=Math.acos(o),M=Math.sqrt(1-o*o);if(Math.abs(M)<.001)return this.w=.5*n+.5*y,this.x=.5*i+.5*a,this.y=.5*r+.5*z,this.z=.5*e+.5*x,this;const u=Math.sin((1-h)*w)/M,c=Math.sin(h*w)/M;return this.w=n*u+y*c,this.x=i*u+a*c,this.y=r*u+z*c,this.z=e*u+x*c,this}transformVector(t,h=new s){const i=t.x,r=t.y,e=t.z,n=this.x,a=this.y,z=this.z,x=this.w,y=x*i+a*e-z*r,o=x*r+z*i-n*e,w=x*e+n*r-a*i,M=-n*i-a*r-z*e;return h.x=y*x+M*-n+o*-z-w*-a,h.y=o*x+M*-a+w*-n-y*-z,h.z=w*x+M*-z+y*-a-o*-n,h}toString(){return`[${this.x}, ${this.y}, ${this.z}, ${this.w}]`}}h.IDENTITY=Object.freeze(new h(0,0,0,1)),h.ZERO=Object.freeze(new h(0,0,0,0));export{h as Quat};
