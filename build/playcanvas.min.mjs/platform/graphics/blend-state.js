import{BitPacking as t}from"../../core/math/bit-packing.js";import{BLENDEQUATION_ADD as e,BLENDMODE_ONE as r,BLENDMODE_ZERO as s}from"./constants.js";const i=15;class a{constructor(t=!1,i=e,a=r,g=s,h,l,o,n=!0,u=!0,c=!0,d=!0){this.target0=0,this.setColorBlend(i,a,g),this.setAlphaBlend(null!=h?h:i,null!=l?l:a,null!=o?o:g),this.setColorWrite(n,u,c,d),this.blend=t}set blend(e){this.target0=t.set(this.target0,e?1:0,26)}get blend(){return t.all(this.target0,26)}setColorBlend(e,r,s){this.target0=t.set(this.target0,e,0,7),this.target0=t.set(this.target0,r,3,i),this.target0=t.set(this.target0,s,7,i)}setAlphaBlend(e,r,s){this.target0=t.set(this.target0,e,11,7),this.target0=t.set(this.target0,r,14,i),this.target0=t.set(this.target0,s,18,i)}setColorWrite(t,e,r,s){this.redWrite=t,this.greenWrite=e,this.blueWrite=r,this.alphaWrite=s}get colorOp(){return t.get(this.target0,0,7)}get colorSrcFactor(){return t.get(this.target0,3,i)}get colorDstFactor(){return t.get(this.target0,7,i)}get alphaOp(){return t.get(this.target0,11,7)}get alphaSrcFactor(){return t.get(this.target0,14,i)}get alphaDstFactor(){return t.get(this.target0,18,i)}set redWrite(e){this.target0=t.set(this.target0,e?1:0,22)}get redWrite(){return t.all(this.target0,22)}set greenWrite(e){this.target0=t.set(this.target0,e?1:0,23)}get greenWrite(){return t.all(this.target0,23)}set blueWrite(e){this.target0=t.set(this.target0,e?1:0,24)}get blueWrite(){return t.all(this.target0,24)}set alphaWrite(e){this.target0=t.set(this.target0,e?1:0,25)}get alphaWrite(){return t.all(this.target0,25)}get allWrite(){return t.get(this.target0,22,15)}copy(t){return this.target0=t.target0,this}clone(){return(new this.constructor).copy(this)}get key(){return this.target0}equals(t){return this.target0===t.target0}}a.DEFAULT=Object.freeze(new a),a.NOWRITE=Object.freeze(new a(void 0,void 0,void 0,void 0,void 0,void 0,void 0,!1,!1,!1,!1));export{a as BlendState};
