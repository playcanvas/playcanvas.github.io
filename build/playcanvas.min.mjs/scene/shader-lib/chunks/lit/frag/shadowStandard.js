var t="\nvec3 lessThan2(vec3 a, vec3 b) {\n\t\treturn clamp((b - a)*1000.0, 0.0, 1.0); // softer version\n}\n\n#ifndef UNPACKFLOAT\n#define UNPACKFLOAT\nfloat unpackFloat(vec4 rgbaDepth) {\n\t\tconst vec4 bitShift = vec4(1.0 / (256.0 * 256.0 * 256.0), 1.0 / (256.0 * 256.0), 1.0 / 256.0, 1.0);\n\t\treturn dot(rgbaDepth, bitShift);\n}\n#endif\n\n// ----- Direct/Spot Sampling -----\n\n#ifdef GL2\n\nfloat _getShadowPCF3x3(SHADOWMAP_ACCEPT(shadowMap), vec3 shadowCoord, vec3 shadowParams) {\n\t\tfloat z = shadowCoord.z;\n\t\tvec2 uv = shadowCoord.xy * shadowParams.x; // 1 unit - 1 texel\n\t\tfloat shadowMapSizeInv = 1.0 / shadowParams.x;\n\t\tvec2 base_uv = floor(uv + 0.5);\n\t\tfloat s = (uv.x + 0.5 - base_uv.x);\n\t\tfloat t = (uv.y + 0.5 - base_uv.y);\n\t\tbase_uv -= vec2(0.5);\n\t\tbase_uv *= shadowMapSizeInv;\n\n\t\tfloat sum = 0.0;\n\n\t\tfloat uw0 = (3.0 - 2.0 * s);\n\t\tfloat uw1 = (1.0 + 2.0 * s);\n\n\t\tfloat u0 = (2.0 - s) / uw0 - 1.0;\n\t\tfloat u1 = s / uw1 + 1.0;\n\n\t\tfloat vw0 = (3.0 - 2.0 * t);\n\t\tfloat vw1 = (1.0 + 2.0 * t);\n\n\t\tfloat v0 = (2.0 - t) / vw0 - 1.0;\n\t\tfloat v1 = t / vw1 + 1.0;\n\n\t\tu0 = u0 * shadowMapSizeInv + base_uv.x;\n\t\tv0 = v0 * shadowMapSizeInv + base_uv.y;\n\n\t\tu1 = u1 * shadowMapSizeInv + base_uv.x;\n\t\tv1 = v1 * shadowMapSizeInv + base_uv.y;\n\n\t\tsum += uw0 * vw0 * textureShadow(shadowMap, vec3(u0, v0, z));\n\t\tsum += uw1 * vw0 * textureShadow(shadowMap, vec3(u1, v0, z));\n\t\tsum += uw0 * vw1 * textureShadow(shadowMap, vec3(u0, v1, z));\n\t\tsum += uw1 * vw1 * textureShadow(shadowMap, vec3(u1, v1, z));\n\n\t\tsum *= 1.0f / 16.0;\n\t\treturn sum;\n}\n\nfloat getShadowPCF3x3(SHADOWMAP_ACCEPT(shadowMap), vec3 shadowCoord, vec3 shadowParams) {\n\t\treturn _getShadowPCF3x3(SHADOWMAP_PASS(shadowMap), shadowCoord, shadowParams);\n}\n\nfloat getShadowSpotPCF3x3(SHADOWMAP_ACCEPT(shadowMap), vec3 shadowCoord, vec4 shadowParams) {\n\t\treturn _getShadowPCF3x3(SHADOWMAP_PASS(shadowMap), shadowCoord, shadowParams.xyz);\n}\n\n#else // GL1\n\nfloat _xgetShadowPCF3x3(mat3 depthKernel, vec3 shadowCoord, sampler2D shadowMap, vec3 shadowParams) {\n\t\tmat3 shadowKernel;\n\t\tvec3 shadowZ = vec3(shadowCoord.z);\n\t\tshadowKernel[0] = vec3(greaterThan(depthKernel[0], shadowZ));\n\t\tshadowKernel[1] = vec3(greaterThan(depthKernel[1], shadowZ));\n\t\tshadowKernel[2] = vec3(greaterThan(depthKernel[2], shadowZ));\n\n\t\tvec2 fractionalCoord = fract( shadowCoord.xy * shadowParams.x );\n\n\t\tshadowKernel[0] = mix(shadowKernel[0], shadowKernel[1], fractionalCoord.x);\n\t\tshadowKernel[1] = mix(shadowKernel[1], shadowKernel[2], fractionalCoord.x);\n\n\t\tvec4 shadowValues;\n\t\tshadowValues.x = mix(shadowKernel[0][0], shadowKernel[0][1], fractionalCoord.y);\n\t\tshadowValues.y = mix(shadowKernel[0][1], shadowKernel[0][2], fractionalCoord.y);\n\t\tshadowValues.z = mix(shadowKernel[1][0], shadowKernel[1][1], fractionalCoord.y);\n\t\tshadowValues.w = mix(shadowKernel[1][1], shadowKernel[1][2], fractionalCoord.y);\n\n\t\treturn dot( shadowValues, vec4( 1.0 ) ) * 0.25;\n}\n\nfloat _getShadowPCF3x3(sampler2D shadowMap, vec3 shadowCoord, vec3 shadowParams) {\n\t\tfloat xoffset = 1.0 / shadowParams.x; // 1/shadow map width\n\t\tfloat dx0 = -xoffset;\n\t\tfloat dx1 = xoffset;\n\n\t\tmat3 depthKernel;\n\t\tdepthKernel[0][0] = unpackFloat(textureShadow(shadowMap, shadowCoord.xy + vec2(dx0, dx0)));\n\t\tdepthKernel[0][1] = unpackFloat(textureShadow(shadowMap, shadowCoord.xy + vec2(dx0, 0.0)));\n\t\tdepthKernel[0][2] = unpackFloat(textureShadow(shadowMap, shadowCoord.xy + vec2(dx0, dx1)));\n\t\tdepthKernel[1][0] = unpackFloat(textureShadow(shadowMap, shadowCoord.xy + vec2(0.0, dx0)));\n\t\tdepthKernel[1][1] = unpackFloat(textureShadow(shadowMap, shadowCoord.xy));\n\t\tdepthKernel[1][2] = unpackFloat(textureShadow(shadowMap, shadowCoord.xy + vec2(0.0, dx1)));\n\t\tdepthKernel[2][0] = unpackFloat(textureShadow(shadowMap, shadowCoord.xy + vec2(dx1, dx0)));\n\t\tdepthKernel[2][1] = unpackFloat(textureShadow(shadowMap, shadowCoord.xy + vec2(dx1, 0.0)));\n\t\tdepthKernel[2][2] = unpackFloat(textureShadow(shadowMap, shadowCoord.xy + vec2(dx1, dx1)));\n\n\t\treturn _xgetShadowPCF3x3(depthKernel, shadowCoord, shadowMap, shadowParams);\n}\n\nfloat getShadowPCF3x3(sampler2D shadowMap, vec3 shadowCoord, vec3 shadowParams) {\n\t\treturn _getShadowPCF3x3(shadowMap, shadowCoord, shadowParams);\n}\n\nfloat getShadowSpotPCF3x3(sampler2D shadowMap, vec3 shadowCoord, vec4 shadowParams) {\n\t\treturn _getShadowPCF3x3(shadowMap, shadowCoord, shadowParams.xyz);\n}\n#endif\n\n\n// ----- Omni Sampling -----\n\n#ifndef WEBGPU\n\nfloat _getShadowPoint(samplerCube shadowMap, vec4 shadowParams, vec3 dir) {\n\n\t\tvec3 tc = normalize(dir);\n\t\tvec3 tcAbs = abs(tc);\n\n\t\tvec4 dirX = vec4(1,0,0, tc.x);\n\t\tvec4 dirY = vec4(0,1,0, tc.y);\n\t\tfloat majorAxisLength = tc.z;\n\t\tif ((tcAbs.x > tcAbs.y) && (tcAbs.x > tcAbs.z)) {\n\t\t\t\tdirX = vec4(0,0,1, tc.z);\n\t\t\t\tdirY = vec4(0,1,0, tc.y);\n\t\t\t\tmajorAxisLength = tc.x;\n\t\t} else if ((tcAbs.y > tcAbs.x) && (tcAbs.y > tcAbs.z)) {\n\t\t\t\tdirX = vec4(1,0,0, tc.x);\n\t\t\t\tdirY = vec4(0,0,1, tc.z);\n\t\t\t\tmajorAxisLength = tc.y;\n\t\t}\n\n\t\tfloat shadowParamsInFaceSpace = ((1.0/shadowParams.x) * 2.0) * abs(majorAxisLength);\n\n\t\tvec3 xoffset = (dirX.xyz * shadowParamsInFaceSpace);\n\t\tvec3 yoffset = (dirY.xyz * shadowParamsInFaceSpace);\n\t\tvec3 dx0 = -xoffset;\n\t\tvec3 dy0 = -yoffset;\n\t\tvec3 dx1 = xoffset;\n\t\tvec3 dy1 = yoffset;\n\n\t\tmat3 shadowKernel;\n\t\tmat3 depthKernel;\n\n\t\tdepthKernel[0][0] = unpackFloat(textureCube(shadowMap, tc + dx0 + dy0));\n\t\tdepthKernel[0][1] = unpackFloat(textureCube(shadowMap, tc + dx0));\n\t\tdepthKernel[0][2] = unpackFloat(textureCube(shadowMap, tc + dx0 + dy1));\n\t\tdepthKernel[1][0] = unpackFloat(textureCube(shadowMap, tc + dy0));\n\t\tdepthKernel[1][1] = unpackFloat(textureCube(shadowMap, tc));\n\t\tdepthKernel[1][2] = unpackFloat(textureCube(shadowMap, tc + dy1));\n\t\tdepthKernel[2][0] = unpackFloat(textureCube(shadowMap, tc + dx1 + dy0));\n\t\tdepthKernel[2][1] = unpackFloat(textureCube(shadowMap, tc + dx1));\n\t\tdepthKernel[2][2] = unpackFloat(textureCube(shadowMap, tc + dx1 + dy1));\n\n\t\tvec3 shadowZ = vec3(length(dir) * shadowParams.w + shadowParams.z);\n\n\t\tshadowKernel[0] = vec3(lessThan2(depthKernel[0], shadowZ));\n\t\tshadowKernel[1] = vec3(lessThan2(depthKernel[1], shadowZ));\n\t\tshadowKernel[2] = vec3(lessThan2(depthKernel[2], shadowZ));\n\n\t\tvec2 uv = (vec2(dirX.w, dirY.w) / abs(majorAxisLength)) * 0.5;\n\n\t\tvec2 fractionalCoord = fract( uv * shadowParams.x );\n\n\t\tshadowKernel[0] = mix(shadowKernel[0], shadowKernel[1], fractionalCoord.x);\n\t\tshadowKernel[1] = mix(shadowKernel[1], shadowKernel[2], fractionalCoord.x);\n\n\t\tvec4 shadowValues;\n\t\tshadowValues.x = mix(shadowKernel[0][0], shadowKernel[0][1], fractionalCoord.y);\n\t\tshadowValues.y = mix(shadowKernel[0][1], shadowKernel[0][2], fractionalCoord.y);\n\t\tshadowValues.z = mix(shadowKernel[1][0], shadowKernel[1][1], fractionalCoord.y);\n\t\tshadowValues.w = mix(shadowKernel[1][1], shadowKernel[1][2], fractionalCoord.y);\n\n\t\treturn 1.0 - dot( shadowValues, vec4( 1.0 ) ) * 0.25;\n}\n\nfloat getShadowPointPCF3x3(samplerCube shadowMap, vec3 shadowCoord, vec4 shadowParams, vec3 lightDir) {\n\t\treturn _getShadowPoint(shadowMap, shadowParams, lightDir);\n}\n\n#endif\n";export{t as default};
