/**
 * @license
 * PlayCanvas Engine v1.57.1 revision 256dd83c2 (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { AnimEvents } from './anim-events.js';

class AnimTrack {
  constructor(name, duration, inputs, outputs, curves, animEvents = new AnimEvents([])) {
    this._name = name;
    this._duration = duration;
    this._inputs = inputs;
    this._outputs = outputs;
    this._curves = curves;
    this._animEvents = animEvents;
  }

  get name() {
    return this._name;
  }

  get duration() {
    return this._duration;
  }

  get inputs() {
    return this._inputs;
  }

  get outputs() {
    return this._outputs;
  }

  get curves() {
    return this._curves;
  }

  set events(animEvents) {
    this._animEvents = animEvents;
  }

  get events() {
    return this._animEvents.events;
  }

  eval(time, snapshot) {
    snapshot._time = time;
    const inputs = this._inputs;
    const outputs = this._outputs;
    const curves = this._curves;
    const cache = snapshot._cache;
    const results = snapshot._results;

    for (let i = 0; i < inputs.length; ++i) {
      cache[i].update(time, inputs[i]._data);
    }

    for (let i = 0; i < curves.length; ++i) {
      const curve = curves[i];
      const output = outputs[curve._output];
      const result = results[i];

      cache[curve._input].eval(result, curve._interpolation, output);
    }
  }

}

export { AnimTrack };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbS10cmFjay5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FuaW0vZXZhbHVhdG9yL2FuaW0tdHJhY2suanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQW5pbUV2ZW50cyB9IGZyb20gJy4vYW5pbS1ldmVudHMuanMnO1xuXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi9hbmltLWN1cnZlLmpzJykuQW5pbUN1cnZlfSBBbmltQ3VydmUgKi9cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KCcuL2FuaW0tZGF0YS5qcycpLkFuaW1EYXRhfSBBbmltRGF0YSAqL1xuXG4vKipcbiAqIEFuIEFuaW1UcmFjayBzdG9yZXMgdGhlIGN1cnZlIGRhdGEgbmVjZXNzYXJ5IHRvIGFuaW1hdGUgYSBzZXQgb2YgdGFyZ2V0IG5vZGVzLiBJdCBjYW4gYmUgbGlua2VkXG4gKiB0byB0aGUgbm9kZXMgaXQgc2hvdWxkIGFuaW1hdGUgdXNpbmcgdGhlIHtAbGluayBBbmltQ29tcG9uZW50I2Fzc2lnbkFuaW1hdGlvbn0gbWV0aG9kLlxuICovXG5jbGFzcyBBbmltVHJhY2sge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBBbmltVHJhY2sgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSB0cmFjayBuYW1lLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkdXJhdGlvbiAtIFRoZSBkdXJhdGlvbiBvZiB0aGUgdHJhY2sgaW4gc2Vjb25kcy5cbiAgICAgKiBAcGFyYW0ge0FuaW1EYXRhW119IGlucHV0cyAtIExpc3Qgb2YgY3VydmUga2V5IGRhdGEuXG4gICAgICogQHBhcmFtIHtBbmltRGF0YVtdfSBvdXRwdXRzIC0gTGlzdCBvZiBjdXJ2ZSB2YWx1ZSBkYXRhLlxuICAgICAqIEBwYXJhbSB7QW5pbUN1cnZlW119IGN1cnZlcyAtIFRoZSBsaXN0IG9mIGN1cnZlcy5cbiAgICAgKiBAcGFyYW0ge0FuaW1FdmVudHN9IGFuaW1FdmVudHMgLSBBIHNlcXVlbmNlIG9mIGFuaW1hdGlvbiBldmVudHMuXG4gICAgICogQGhpZGVjb25zdHJ1Y3RvclxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG5hbWUsIGR1cmF0aW9uLCBpbnB1dHMsIG91dHB1dHMsIGN1cnZlcywgYW5pbUV2ZW50cyA9IG5ldyBBbmltRXZlbnRzKFtdKSkge1xuICAgICAgICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5fZHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICAgICAgdGhpcy5faW5wdXRzID0gaW5wdXRzO1xuICAgICAgICB0aGlzLl9vdXRwdXRzID0gb3V0cHV0cztcbiAgICAgICAgdGhpcy5fY3VydmVzID0gY3VydmVzO1xuICAgICAgICB0aGlzLl9hbmltRXZlbnRzID0gYW5pbUV2ZW50cztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuYW1lIG9mIHRoZSBBbmltVHJhY2suXG4gICAgICpcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbmFtZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBkdXJhdGlvbiBvZiB0aGUgQW5pbVRyYWNrLlxuICAgICAqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBnZXQgZHVyYXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kdXJhdGlvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsaXN0IG9mIGN1cnZlIGtleSBkYXRhIGNvbnRhaW5lZCBpbiB0aGUgQW5pbVRyYWNrLlxuICAgICAqXG4gICAgICogQHR5cGUge0FuaW1EYXRhW119XG4gICAgICovXG4gICAgZ2V0IGlucHV0cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lucHV0cztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsaXN0IG9mIGN1cnZlIHZhbHVlcyBjb250YWluZWQgaW4gdGhlIEFuaW1UcmFjay5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtBbmltRGF0YVtdfVxuICAgICAqL1xuICAgIGdldCBvdXRwdXRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3V0cHV0cztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsaXN0IG9mIGN1cnZlcyBjb250YWluZWQgaW4gdGhlIEFuaW1UcmFjay5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtBbmltQ3VydmVbXX1cbiAgICAgKi9cbiAgICBnZXQgY3VydmVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY3VydmVzO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogVGhlIGFuaW1hdGlvbiBldmVudHMgdGhhdCB3aWxsIGZpcmUgZHVyaW5nIHRoZSBwbGF5YmFjayBvZiB0aGlzIGFuaW0gdHJhY2suXG4gICAgICpcbiAgICAgKiBAdHlwZSB7QW5pbUV2ZW50c31cbiAgICAgKi9cbiAgICBzZXQgZXZlbnRzKGFuaW1FdmVudHMpIHtcbiAgICAgICAgdGhpcy5fYW5pbUV2ZW50cyA9IGFuaW1FdmVudHM7XG4gICAgfVxuXG4gICAgZ2V0IGV2ZW50cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FuaW1FdmVudHMuZXZlbnRzO1xuICAgIH1cblxuICAgIC8vIGV2YWx1YXRlIGFsbCB0cmFjayBjdXJ2ZXMgYXQgdGhlIHNwZWNpZmllZCB0aW1lIGFuZCBzdG9yZSByZXN1bHRzXG4gICAgLy8gaW4gdGhlIHByb3ZpZGVkIHNuYXBzaG90LlxuICAgIGV2YWwodGltZSwgc25hcHNob3QpIHtcbiAgICAgICAgc25hcHNob3QuX3RpbWUgPSB0aW1lO1xuXG4gICAgICAgIGNvbnN0IGlucHV0cyA9IHRoaXMuX2lucHV0cztcbiAgICAgICAgY29uc3Qgb3V0cHV0cyA9IHRoaXMuX291dHB1dHM7XG4gICAgICAgIGNvbnN0IGN1cnZlcyA9IHRoaXMuX2N1cnZlcztcbiAgICAgICAgY29uc3QgY2FjaGUgPSBzbmFwc2hvdC5fY2FjaGU7XG4gICAgICAgIGNvbnN0IHJlc3VsdHMgPSBzbmFwc2hvdC5fcmVzdWx0cztcblxuICAgICAgICAvLyBldmFsdWF0ZSBpbnB1dHNcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNhY2hlW2ldLnVwZGF0ZSh0aW1lLCBpbnB1dHNbaV0uX2RhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZXZhbHVhdGUgb3V0cHV0c1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnZlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgY29uc3QgY3VydmUgPSBjdXJ2ZXNbaV07XG4gICAgICAgICAgICBjb25zdCBvdXRwdXQgPSBvdXRwdXRzW2N1cnZlLl9vdXRwdXRdO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gcmVzdWx0c1tpXTtcbiAgICAgICAgICAgIGNhY2hlW2N1cnZlLl9pbnB1dF0uZXZhbChyZXN1bHQsIGN1cnZlLl9pbnRlcnBvbGF0aW9uLCBvdXRwdXQpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgeyBBbmltVHJhY2sgfTtcbiJdLCJuYW1lcyI6WyJBbmltVHJhY2siLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJkdXJhdGlvbiIsImlucHV0cyIsIm91dHB1dHMiLCJjdXJ2ZXMiLCJhbmltRXZlbnRzIiwiQW5pbUV2ZW50cyIsIl9uYW1lIiwiX2R1cmF0aW9uIiwiX2lucHV0cyIsIl9vdXRwdXRzIiwiX2N1cnZlcyIsIl9hbmltRXZlbnRzIiwiZXZlbnRzIiwiZXZhbCIsInRpbWUiLCJzbmFwc2hvdCIsIl90aW1lIiwiY2FjaGUiLCJfY2FjaGUiLCJyZXN1bHRzIiwiX3Jlc3VsdHMiLCJpIiwibGVuZ3RoIiwidXBkYXRlIiwiX2RhdGEiLCJjdXJ2ZSIsIm91dHB1dCIsIl9vdXRwdXQiLCJyZXN1bHQiLCJfaW5wdXQiLCJfaW50ZXJwb2xhdGlv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
