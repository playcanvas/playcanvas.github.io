/**
 * @license
 * PlayCanvas Engine v1.62.0 revision 818511d2b (DEBUG PROFILER)
 * Copyright 2011-2023 PlayCanvas Ltd. All rights reserved.
 */
import { Quat } from '../../core/math/quat.js';
import { PIXELFORMAT_DXT5, TEXTURETYPE_SWIZZLEGGGR, PIXELFORMAT_RGBA8 } from '../../platform/graphics/constants.js';
import { SHADER_FORWARDHDR, GAMMA_SRGBHDR, TONEMAP_LINEAR, SHADERDEF_TANGENTS, SHADERDEF_SCREENSPACE, SHADERDEF_SKIN, SHADERDEF_INSTANCING, SHADERDEF_MORPH_POSITION, SHADERDEF_MORPH_NORMAL, SHADERDEF_MORPH_TEXTURE_BASED, BLEND_NONE, SPECULAR_PHONG, GAMMA_NONE, SHADERDEF_NOSHADOW, SHADERDEF_LM, SHADERDEF_DIRLM, SHADERDEF_LMAMBIENT, MASK_AFFECT_DYNAMIC, LIGHTTYPE_DIRECTIONAL, LIGHTTYPE_OMNI, LIGHTTYPE_SPOT, SHADERDEF_UV0, SHADERDEF_UV1, SHADERDEF_VCOLOR } from '../constants.js';
import { _matTex2D } from '../shader-lib/programs/standard.js';

const arraysEqual = (a, b) => {
  if (a.length !== b.length) {
    return false;
  }
  for (let i = 0; i < a.length; ++i) {
    if (a[i] !== b[i]) {
      return false;
    }
  }
  return true;
};
const notWhite = color => {
  return color.r !== 1 || color.g !== 1 || color.b !== 1;
};
const notBlack = color => {
  return color.r !== 0 || color.g !== 0 || color.b !== 0;
};
class StandardMaterialOptionsBuilder {
  constructor() {
    this._mapXForms = null;
  }

  // Minimal options for Depth and Shadow passes
  updateMinRef(options, scene, stdMat, objDefs, staticLightList, pass, sortedLights) {
    this._updateSharedOptions(options, scene, stdMat, objDefs, pass);
    this._updateMinOptions(options, stdMat);
    this._updateUVOptions(options, stdMat, objDefs, true);
    options.litOptions.chunks = options.chunks;
  }
  updateRef(options, scene, stdMat, objDefs, staticLightList, pass, sortedLights) {
    this._updateSharedOptions(options, scene, stdMat, objDefs, pass);
    this._updateEnvOptions(options, stdMat, scene);
    this._updateMaterialOptions(options, stdMat);
    if (pass === SHADER_FORWARDHDR) {
      if (options.litOptions.gamma) options.litOptions.gamma = GAMMA_SRGBHDR;
      options.litOptions.toneMap = TONEMAP_LINEAR;
    }
    options.litOptions.hasTangents = objDefs && (objDefs & SHADERDEF_TANGENTS) !== 0;
    this._updateLightOptions(options, scene, stdMat, objDefs, sortedLights, staticLightList);
    this._updateUVOptions(options, stdMat, objDefs, false);
    options.litOptions.chunks = options.chunks;
  }
  _updateSharedOptions(options, scene, stdMat, objDefs, pass) {
    options.forceUv1 = stdMat.forceUv1;
    options.chunks = stdMat.chunks || '';
    options.pass = pass;
    options.litOptions.alphaTest = stdMat.alphaTest > 0;
    options.litOptions.forceFragmentPrecision = stdMat.forceFragmentPrecision || '';
    options.litOptions.blendType = stdMat.blendType;
    options.litOptions.separateAmbient = false; // store ambient light color in separate variable, instead of adding it to diffuse directly
    options.litOptions.screenSpace = objDefs && (objDefs & SHADERDEF_SCREENSPACE) !== 0;
    options.litOptions.skin = objDefs && (objDefs & SHADERDEF_SKIN) !== 0;
    options.litOptions.useInstancing = objDefs && (objDefs & SHADERDEF_INSTANCING) !== 0;
    options.litOptions.useMorphPosition = objDefs && (objDefs & SHADERDEF_MORPH_POSITION) !== 0;
    options.litOptions.useMorphNormal = objDefs && (objDefs & SHADERDEF_MORPH_NORMAL) !== 0;
    options.litOptions.useMorphTextureBased = objDefs && (objDefs & SHADERDEF_MORPH_TEXTURE_BASED) !== 0;
    options.litOptions.nineSlicedMode = stdMat.nineSlicedMode || 0;

    // clustered lighting features (in shared options as shadow pass needs this too)
    if (scene.clusteredLightingEnabled && stdMat.useLighting) {
      options.litOptions.clusteredLightingEnabled = true;
      options.litOptions.clusteredLightingCookiesEnabled = scene.lighting.cookiesEnabled;
      options.litOptions.clusteredLightingShadowsEnabled = scene.lighting.shadowsEnabled;
      options.litOptions.clusteredLightingShadowType = scene.lighting.shadowType;
      options.litOptions.clusteredLightingAreaLightsEnabled = scene.lighting.areaLightsEnabled;
    } else {
      options.litOptions.clusteredLightingEnabled = false;
      options.litOptions.clusteredLightingCookiesEnabled = false;
      options.litOptions.clusteredLightingShadowsEnabled = false;
      options.litOptions.clusteredLightingAreaLightsEnabled = false;
    }
  }
  _updateUVOptions(options, stdMat, objDefs, minimalOptions) {
    let hasUv0 = false;
    let hasUv1 = false;
    let hasVcolor = false;
    if (objDefs) {
      hasUv0 = (objDefs & SHADERDEF_UV0) !== 0;
      hasUv1 = (objDefs & SHADERDEF_UV1) !== 0;
      hasVcolor = (objDefs & SHADERDEF_VCOLOR) !== 0;
    }
    options.litOptions.vertexColors = false;
    this._mapXForms = [];
    const uniqueTextureMap = {};
    for (const p in _matTex2D) {
      this._updateTexOptions(options, stdMat, p, hasUv0, hasUv1, hasVcolor, minimalOptions, uniqueTextureMap);
    }
    this._mapXForms = null;

    // All texture related lit options
    options.litOptions.lightMapEnabled = options.lightMap;
    options.litOptions.useLightMapVertexColors = options.lightVertexColor;
    options.litOptions.dirLightMapEnabled = options.dirLightMap;
    options.litOptions.heightMapEnabled = options.heightMap;
    options.litOptions.normalMapEnabled = options.normalMap;
    options.litOptions.clearCoatNormalMapEnabled = options.clearCoatNormalMap;
    options.litOptions.aoMapEnabled = options.aoMap;
    options.litOptions.useAoVertexColors = options.aoVertexColor;
    options.litOptions.diffuseMapEnabled = options.diffuseMap;
  }
  _updateTexOptions(options, stdMat, p, hasUv0, hasUv1, hasVcolor, minimalOptions, uniqueTextureMap) {
    const mname = p + 'Map';
    const vname = p + 'VertexColor';
    const vcname = p + 'VertexColorChannel';
    const cname = mname + 'Channel';
    const tname = mname + 'Transform';
    const uname = mname + 'Uv';
    const iname = mname + 'Identifier';

    // Avoid overriding previous lightMap properties
    if (p !== 'light') {
      options[mname] = false;
      options[iname] = undefined;
      options[cname] = '';
      options[tname] = 0;
      options[uname] = 0;
    }
    options[vname] = false;
    options[vcname] = '';
    const isOpacity = p === 'opacity';
    if (isOpacity && stdMat.blendType === BLEND_NONE && stdMat.alphaTest === 0.0 && !stdMat.alphaToCoverage) {
      return;
    }
    if (!minimalOptions || isOpacity) {
      if (p !== 'height' && stdMat[vname]) {
        if (hasVcolor) {
          options[vname] = stdMat[vname];
          options[vcname] = stdMat[vcname];
          options.litOptions.vertexColors = true;
        }
      }
      if (stdMat[mname]) {
        let allow = true;
        if (stdMat[uname] === 0 && !hasUv0) allow = false;
        if (stdMat[uname] === 1 && !hasUv1) allow = false;
        if (allow) {
          // create an intermediate map between the textures and their slots
          // to ensure the unique texture mapping isn't dependent on the texture id
          // as that will change when textures are changed, even if the sharing is the same
          const mapId = stdMat[mname].id;
          let identifier = uniqueTextureMap[mapId];
          if (identifier === undefined) {
            uniqueTextureMap[mapId] = p;
            identifier = p;
          }
          options[mname] = !!stdMat[mname];
          options[iname] = identifier;
          options[tname] = this._getMapTransformID(stdMat.getUniform(tname), stdMat[uname]);
          options[cname] = stdMat[cname];
          options[uname] = stdMat[uname];
        }
      }
    }
  }
  _updateMinOptions(options, stdMat) {
    options.opacityTint = stdMat.opacity !== 1 && stdMat.blendType !== BLEND_NONE;
    options.litOptions.lights = [];
  }
  _updateMaterialOptions(options, stdMat) {
    var _stdMat$diffuseMap, _stdMat$diffuseDetail, _stdMat$emissiveMap, _stdMat$lightMap;
    const diffuseTint = (stdMat.diffuseTint || !stdMat.diffuseMap && !stdMat.diffuseVertexColor) && notWhite(stdMat.diffuse);
    const useSpecular = !!(stdMat.useMetalness || stdMat.specularMap || stdMat.sphereMap || stdMat.cubeMap || notBlack(stdMat.specular) || stdMat.specularityFactor > 0 && stdMat.useMetalness || stdMat.enableGGXSpecular || stdMat.clearCoat > 0);
    const useSpecularColor = !stdMat.useMetalness || stdMat.useMetalnessSpecularColor;
    const specularTint = useSpecular && (stdMat.specularTint || !stdMat.specularMap && !stdMat.specularVertexColor) && notWhite(stdMat.specular);
    const specularityFactorTint = useSpecular && stdMat.useMetalnessSpecularColor && (stdMat.specularityFactorTint || stdMat.specularityFactor < 1 && !stdMat.specularityFactorMap);
    const emissiveTintColor = !stdMat.emissiveMap || notWhite(stdMat.emissive) && stdMat.emissiveTint;
    const emissiveTintIntensity = stdMat.emissiveIntensity !== 1;
    const isPackedNormalMap = stdMat.normalMap ? stdMat.normalMap.format === PIXELFORMAT_DXT5 || stdMat.normalMap.type === TEXTURETYPE_SWIZZLEGGGR : false;
    options.opacityTint = stdMat.opacity !== 1 && stdMat.blendType !== BLEND_NONE ? 1 : 0;
    options.ambientTint = stdMat.ambientTint;
    options.diffuseTint = diffuseTint ? 2 : 0;
    options.specularTint = specularTint ? 2 : 0;
    options.specularityFactorTint = specularityFactorTint ? 1 : 0;
    options.metalnessTint = stdMat.useMetalness && stdMat.metalness < 1 ? 1 : 0;
    options.glossTint = 1;
    options.emissiveTint = (emissiveTintColor ? 2 : 0) + (emissiveTintIntensity ? 1 : 0);
    options.diffuseEncoding = (_stdMat$diffuseMap = stdMat.diffuseMap) == null ? void 0 : _stdMat$diffuseMap.encoding;
    options.diffuseDetailEncoding = (_stdMat$diffuseDetail = stdMat.diffuseDetailMap) == null ? void 0 : _stdMat$diffuseDetail.encoding;
    options.emissiveEncoding = (_stdMat$emissiveMap = stdMat.emissiveMap) == null ? void 0 : _stdMat$emissiveMap.encoding;
    options.lightMapEncoding = (_stdMat$lightMap = stdMat.lightMap) == null ? void 0 : _stdMat$lightMap.encoding;
    options.packedNormal = isPackedNormalMap;
    options.refractionTint = stdMat.refraction !== 1.0 ? 1 : 0;
    options.refractionIndexTint = stdMat.refractionIndex !== 1.0 / 1.5 ? 1 : 0;
    options.thicknessTint = stdMat.useDynamicRefraction && stdMat.thickness !== 1.0 ? 1 : 0;
    options.specularEncoding = stdMat.specularEncoding || 'linear';
    options.sheenEncoding = stdMat.sheenEncoding || 'linear';
    options.aoMapUv = stdMat.aoUvSet; // backwards compatibility
    options.diffuseDetail = !!stdMat.diffuseMap;
    options.normalDetail = !!stdMat.normalMap;
    options.diffuseDetailMode = stdMat.diffuseDetailMode;
    options.clearCoatTint = stdMat.clearCoat !== 1.0 ? 1 : 0;
    options.clearCoatGloss = !!stdMat.clearCoatGloss;
    options.clearCoatGlossTint = stdMat.clearCoatGloss !== 1.0 ? 1 : 0;
    options.iridescenceTint = stdMat.iridescence !== 1.0 ? 1 : 0;
    options.sheenTint = stdMat.useSheen && notWhite(stdMat.sheen) ? 2 : 0;
    options.sheenGlossTint = 1;
    options.glossInvert = stdMat.glossInvert;
    options.sheenGlossInvert = stdMat.sheenGlossInvert;
    options.clearCoatGlossInvert = stdMat.clearCoatGlossInvert;

    // LIT OPTIONS
    options.litOptions.useAmbientTint = options.ambientTint;
    options.litOptions.customFragmentShader = stdMat.customFragmentShader;
    options.litOptions.pixelSnap = stdMat.pixelSnap;
    options.litOptions.useClearCoatNormalMap = !!stdMat.clearCoatNormalMap;
    options.litOptions.useDiffuseMap = !!stdMat.diffuseMap;
    options.litOptions.useAoMap = !!stdMat.aoMap;
    options.litOptions.detailModes = !!options.diffuseDetail;
    options.litOptions.shadingModel = stdMat.shadingModel;
    options.litOptions.ambientSH = !!stdMat.ambientSH;
    options.litOptions.fastTbn = stdMat.fastTbn;
    options.litOptions.twoSidedLighting = stdMat.twoSidedLighting;
    options.litOptions.occludeSpecular = stdMat.occludeSpecular;
    options.litOptions.occludeSpecularFloat = stdMat.occludeSpecularIntensity !== 1.0;
    options.litOptions.useMsdf = !!stdMat.msdfMap;
    options.litOptions.msdfTextAttribute = !!stdMat.msdfTextAttribute;
    options.litOptions.alphaToCoverage = stdMat.alphaToCoverage;
    options.litOptions.opacityFadesSpecular = stdMat.opacityFadesSpecular;
    options.litOptions.cubeMapProjection = stdMat.cubeMapProjection;
    options.litOptions.occludeDirect = stdMat.occludeDirect;
    options.litOptions.conserveEnergy = stdMat.conserveEnergy && stdMat.shadingModel !== SPECULAR_PHONG;
    options.litOptions.useSpecular = useSpecular;
    options.litOptions.useSpecularityFactor = (specularityFactorTint || !!stdMat.specularityFactorMap) && stdMat.useMetalnessSpecularColor;
    options.litOptions.useSpecularColor = useSpecularColor;
    options.litOptions.enableGGXSpecular = stdMat.enableGGXSpecular;
    options.litOptions.fresnelModel = stdMat.fresnelModel;
    options.litOptions.useRefraction = (stdMat.refraction || !!stdMat.refractionMap) && (stdMat.useDynamicRefraction || !!options.litOptions.reflectionSource);
    options.litOptions.useClearCoat = !!stdMat.clearCoat;
    options.litOptions.useSheen = stdMat.useSheen;
    options.litOptions.useIridescence = stdMat.useIridescence && stdMat.iridescence !== 0.0;
    options.litOptions.useMetalness = stdMat.useMetalness;
    options.litOptions.useDynamicRefraction = stdMat.useDynamicRefraction;
  }
  _updateEnvOptions(options, stdMat, scene) {
    options.litOptions.fog = stdMat.useFog ? scene.fog : 'none';
    options.litOptions.gamma = stdMat.useGammaTonemap ? scene.gammaCorrection : GAMMA_NONE;
    options.litOptions.toneMap = stdMat.useGammaTonemap ? scene.toneMapping : -1;
    options.litOptions.fixSeams = stdMat.cubeMap ? stdMat.cubeMap.fixCubemapSeams : false;
    const isPhong = stdMat.shadingModel === SPECULAR_PHONG;
    let usingSceneEnv = false;

    // source of environment reflections is as follows:
    if (stdMat.envAtlas && stdMat.cubeMap && !isPhong) {
      options.litOptions.reflectionSource = 'envAtlasHQ';
      options.litOptions.reflectionEncoding = stdMat.envAtlas.encoding;
    } else if (stdMat.envAtlas && !isPhong) {
      options.litOptions.reflectionSource = 'envAtlas';
      options.litOptions.reflectionEncoding = stdMat.envAtlas.encoding;
    } else if (stdMat.cubeMap) {
      options.litOptions.reflectionSource = 'cubeMap';
      options.litOptions.reflectionEncoding = stdMat.cubeMap.encoding;
    } else if (stdMat.sphereMap) {
      options.litOptions.reflectionSource = 'sphereMap';
      options.litOptions.reflectionEncoding = stdMat.sphereMap.encoding;
    } else if (stdMat.useSkybox && scene.envAtlas && scene.skybox && !isPhong) {
      options.litOptions.reflectionSource = 'envAtlasHQ';
      options.litOptions.reflectionEncoding = scene.envAtlas.encoding;
      usingSceneEnv = true;
    } else if (stdMat.useSkybox && scene.envAtlas && !isPhong) {
      options.litOptions.reflectionSource = 'envAtlas';
      options.litOptions.reflectionEncoding = scene.envAtlas.encoding;
      usingSceneEnv = true;
    } else if (stdMat.useSkybox && scene.skybox) {
      options.litOptions.reflectionSource = 'cubeMap';
      options.litOptions.reflectionEncoding = scene.skybox.encoding;
      usingSceneEnv = true;
    } else {
      options.litOptions.reflectionSource = null;
      options.litOptions.reflectionEncoding = null;
    }

    // source of environment ambient is as follows:
    if (stdMat.ambientSH && !isPhong) {
      options.litOptions.ambientSource = 'ambientSH';
      options.litOptions.ambientEncoding = null;
    } else {
      const envAtlas = stdMat.envAtlas || (stdMat.useSkybox && scene.envAtlas ? scene.envAtlas : null);
      if (envAtlas && !isPhong) {
        options.litOptions.ambientSource = 'envAtlas';
        options.litOptions.ambientEncoding = envAtlas.encoding;
      } else {
        options.litOptions.ambientSource = 'constant';
        options.litOptions.ambientEncoding = null;
      }
    }

    // TODO: add a test for if non skybox cubemaps have rotation (when this is supported) - for now assume no non-skybox cubemap rotation
    options.litOptions.skyboxIntensity = usingSceneEnv && (scene.skyboxIntensity !== 1 || scene.physicalUnits);
    options.litOptions.useCubeMapRotation = usingSceneEnv && scene.skyboxRotation && !scene.skyboxRotation.equals(Quat.IDENTITY);
  }
  _updateLightOptions(options, scene, stdMat, objDefs, sortedLights, staticLightList) {
    options.lightMap = false;
    options.lightMapChannel = '';
    options.lightMapUv = 0;
    options.lightMapTransform = 0;
    options.litOptions.lightMapWithoutAmbient = false;
    options.dirLightMap = false;
    if (objDefs) {
      options.litOptions.noShadow = (objDefs & SHADERDEF_NOSHADOW) !== 0;
      if ((objDefs & SHADERDEF_LM) !== 0) {
        options.lightMapEncoding = scene.lightmapPixelFormat === PIXELFORMAT_RGBA8 ? 'rgbm' : 'linear';
        options.lightMap = true;
        options.lightMapChannel = 'rgb';
        options.lightMapUv = 1;
        options.lightMapTransform = 0;
        options.litOptions.lightMapWithoutAmbient = !stdMat.lightMap;
        if ((objDefs & SHADERDEF_DIRLM) !== 0) {
          options.dirLightMap = true;
        }

        // if lightmaps contain baked ambient light, disable real-time ambient light
        if ((objDefs & SHADERDEF_LMAMBIENT) !== 0) {
          options.litOptions.lightMapWithoutAmbient = false;
        }
      }
    }
    if (stdMat.useLighting) {
      const lightsFiltered = [];
      const mask = objDefs ? objDefs >> 16 : MASK_AFFECT_DYNAMIC;

      // mask to select lights (dynamic vs lightmapped) when using clustered lighting
      options.litOptions.lightMaskDynamic = !!(mask & MASK_AFFECT_DYNAMIC);
      if (sortedLights) {
        this._collectLights(LIGHTTYPE_DIRECTIONAL, sortedLights[LIGHTTYPE_DIRECTIONAL], lightsFiltered, mask);
        this._collectLights(LIGHTTYPE_OMNI, sortedLights[LIGHTTYPE_OMNI], lightsFiltered, mask, staticLightList);
        this._collectLights(LIGHTTYPE_SPOT, sortedLights[LIGHTTYPE_SPOT], lightsFiltered, mask, staticLightList);
      }
      options.litOptions.lights = lightsFiltered;
    } else {
      options.litOptions.lights = [];
    }
    if (options.litOptions.lights.length === 0) {
      options.litOptions.noShadow = true;
    }
  }
  _collectLights(lType, lights, lightsFiltered, mask, staticLightList) {
    for (let i = 0; i < lights.length; i++) {
      const light = lights[i];
      if (light.enabled) {
        if (light.mask & mask) {
          if (lType !== LIGHTTYPE_DIRECTIONAL) {
            if (light.isStatic) {
              continue;
            }
          }
          lightsFiltered.push(light);
        }
      }
    }
    if (staticLightList) {
      for (let i = 0; i < staticLightList.length; i++) {
        const light = staticLightList[i];
        if (light._type === lType) {
          lightsFiltered.push(light);
        }
      }
    }
  }
  _getMapTransformID(xform, uv) {
    if (!xform) return 0;
    let xforms = this._mapXForms[uv];
    if (!xforms) {
      xforms = [];
      this._mapXForms[uv] = xforms;
    }
    for (let i = 0; i < xforms.length; i++) {
      if (arraysEqual(xforms[i][0].value, xform[0].value) && arraysEqual(xforms[i][1].value, xform[1].value)) {
        return i + 1;
      }
    }
    return xforms.push(xform);
  }
}

export { StandardMaterialOptionsBuilder };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhbmRhcmQtbWF0ZXJpYWwtb3B0aW9ucy1idWlsZGVyLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvc2NlbmUvbWF0ZXJpYWxzL3N0YW5kYXJkLW1hdGVyaWFsLW9wdGlvbnMtYnVpbGRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBRdWF0IH0gZnJvbSAnLi4vLi4vY29yZS9tYXRoL3F1YXQuanMnO1xuXG5pbXBvcnQge1xuICAgIFBJWEVMRk9STUFUX0RYVDUsIFBJWEVMRk9STUFUX1JHQkE4LCBURVhUVVJFVFlQRV9TV0laWkxFR0dHUlxufSBmcm9tICcuLi8uLi9wbGF0Zm9ybS9ncmFwaGljcy9jb25zdGFudHMuanMnO1xuXG5pbXBvcnQge1xuICAgIEJMRU5EX05PTkUsXG4gICAgR0FNTUFfTk9ORSwgR0FNTUFfU1JHQkhEUixcbiAgICBMSUdIVFRZUEVfRElSRUNUSU9OQUwsIExJR0hUVFlQRV9PTU5JLCBMSUdIVFRZUEVfU1BPVCxcbiAgICBNQVNLX0FGRkVDVF9EWU5BTUlDLFxuICAgIFNIQURFUl9GT1JXQVJESERSLFxuICAgIFNIQURFUkRFRl9ESVJMTSwgU0hBREVSREVGX0lOU1RBTkNJTkcsIFNIQURFUkRFRl9MTSwgU0hBREVSREVGX01PUlBIX1BPU0lUSU9OLCBTSEFERVJERUZfTU9SUEhfTk9STUFMLCBTSEFERVJERUZfTk9TSEFET1csIFNIQURFUkRFRl9NT1JQSF9URVhUVVJFX0JBU0VELFxuICAgIFNIQURFUkRFRl9TQ1JFRU5TUEFDRSwgU0hBREVSREVGX1NLSU4sIFNIQURFUkRFRl9UQU5HRU5UUywgU0hBREVSREVGX1VWMCwgU0hBREVSREVGX1VWMSwgU0hBREVSREVGX1ZDT0xPUiwgU0hBREVSREVGX0xNQU1CSUVOVCxcbiAgICBUT05FTUFQX0xJTkVBUixcbiAgICBTUEVDVUxBUl9QSE9OR1xufSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IHsgX21hdFRleDJEIH0gZnJvbSAnLi4vc2hhZGVyLWxpYi9wcm9ncmFtcy9zdGFuZGFyZC5qcyc7XG5cbmNvbnN0IGFycmF5c0VxdWFsID0gKGEsIGIpID0+IHtcbiAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59O1xuXG5jb25zdCBub3RXaGl0ZSA9IChjb2xvcikgPT4ge1xuICAgIHJldHVybiBjb2xvci5yICE9PSAxIHx8IGNvbG9yLmcgIT09IDEgfHwgY29sb3IuYiAhPT0gMTtcbn07XG5cbmNvbnN0IG5vdEJsYWNrID0gKGNvbG9yKSA9PiB7XG4gICAgcmV0dXJuIGNvbG9yLnIgIT09IDAgfHwgY29sb3IuZyAhPT0gMCB8fCBjb2xvci5iICE9PSAwO1xufTtcblxuY2xhc3MgU3RhbmRhcmRNYXRlcmlhbE9wdGlvbnNCdWlsZGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5fbWFwWEZvcm1zID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBNaW5pbWFsIG9wdGlvbnMgZm9yIERlcHRoIGFuZCBTaGFkb3cgcGFzc2VzXG4gICAgdXBkYXRlTWluUmVmKG9wdGlvbnMsIHNjZW5lLCBzdGRNYXQsIG9iakRlZnMsIHN0YXRpY0xpZ2h0TGlzdCwgcGFzcywgc29ydGVkTGlnaHRzKSB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZVNoYXJlZE9wdGlvbnMob3B0aW9ucywgc2NlbmUsIHN0ZE1hdCwgb2JqRGVmcywgcGFzcyk7XG4gICAgICAgIHRoaXMuX3VwZGF0ZU1pbk9wdGlvbnMob3B0aW9ucywgc3RkTWF0KTtcbiAgICAgICAgdGhpcy5fdXBkYXRlVVZPcHRpb25zKG9wdGlvbnMsIHN0ZE1hdCwgb2JqRGVmcywgdHJ1ZSk7XG4gICAgICAgIG9wdGlvbnMubGl0T3B0aW9ucy5jaHVua3MgPSBvcHRpb25zLmNodW5rcztcbiAgICB9XG5cbiAgICB1cGRhdGVSZWYob3B0aW9ucywgc2NlbmUsIHN0ZE1hdCwgb2JqRGVmcywgc3RhdGljTGlnaHRMaXN0LCBwYXNzLCBzb3J0ZWRMaWdodHMpIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlU2hhcmVkT3B0aW9ucyhvcHRpb25zLCBzY2VuZSwgc3RkTWF0LCBvYmpEZWZzLCBwYXNzKTtcbiAgICAgICAgdGhpcy5fdXBkYXRlRW52T3B0aW9ucyhvcHRpb25zLCBzdGRNYXQsIHNjZW5lKTtcbiAgICAgICAgdGhpcy5fdXBkYXRlTWF0ZXJpYWxPcHRpb25zKG9wdGlvbnMsIHN0ZE1hdCk7XG4gICAgICAgIGlmIChwYXNzID09PSBTSEFERVJfRk9SV0FSREhEUikge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMubGl0T3B0aW9ucy5nYW1tYSkgb3B0aW9ucy5saXRPcHRpb25zLmdhbW1hID0gR0FNTUFfU1JHQkhEUjtcbiAgICAgICAgICAgIG9wdGlvbnMubGl0T3B0aW9ucy50b25lTWFwID0gVE9ORU1BUF9MSU5FQVI7XG4gICAgICAgIH1cbiAgICAgICAgb3B0aW9ucy5saXRPcHRpb25zLmhhc1RhbmdlbnRzID0gb2JqRGVmcyAmJiAoKG9iakRlZnMgJiBTSEFERVJERUZfVEFOR0VOVFMpICE9PSAwKTtcbiAgICAgICAgdGhpcy5fdXBkYXRlTGlnaHRPcHRpb25zKG9wdGlvbnMsIHNjZW5lLCBzdGRNYXQsIG9iakRlZnMsIHNvcnRlZExpZ2h0cywgc3RhdGljTGlnaHRMaXN0KTtcbiAgICAgICAgdGhpcy5fdXBkYXRlVVZPcHRpb25zKG9wdGlvbnMsIHN0ZE1hdCwgb2JqRGVmcywgZmFsc2UpO1xuICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMuY2h1bmtzID0gb3B0aW9ucy5jaHVua3M7XG4gICAgfVxuXG4gICAgX3VwZGF0ZVNoYXJlZE9wdGlvbnMob3B0aW9ucywgc2NlbmUsIHN0ZE1hdCwgb2JqRGVmcywgcGFzcykge1xuICAgICAgICBvcHRpb25zLmZvcmNlVXYxID0gc3RkTWF0LmZvcmNlVXYxO1xuICAgICAgICBvcHRpb25zLmNodW5rcyA9IHN0ZE1hdC5jaHVua3MgfHwgJyc7XG5cbiAgICAgICAgb3B0aW9ucy5wYXNzID0gcGFzcztcbiAgICAgICAgb3B0aW9ucy5saXRPcHRpb25zLmFscGhhVGVzdCA9IHN0ZE1hdC5hbHBoYVRlc3QgPiAwO1xuICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMuZm9yY2VGcmFnbWVudFByZWNpc2lvbiA9IHN0ZE1hdC5mb3JjZUZyYWdtZW50UHJlY2lzaW9uIHx8ICcnO1xuICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMuYmxlbmRUeXBlID0gc3RkTWF0LmJsZW5kVHlwZTtcbiAgICAgICAgb3B0aW9ucy5saXRPcHRpb25zLnNlcGFyYXRlQW1iaWVudCA9IGZhbHNlOyAgICAvLyBzdG9yZSBhbWJpZW50IGxpZ2h0IGNvbG9yIGluIHNlcGFyYXRlIHZhcmlhYmxlLCBpbnN0ZWFkIG9mIGFkZGluZyBpdCB0byBkaWZmdXNlIGRpcmVjdGx5XG4gICAgICAgIG9wdGlvbnMubGl0T3B0aW9ucy5zY3JlZW5TcGFjZSA9IG9iakRlZnMgJiYgKG9iakRlZnMgJiBTSEFERVJERUZfU0NSRUVOU1BBQ0UpICE9PSAwO1xuICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMuc2tpbiA9IG9iakRlZnMgJiYgKG9iakRlZnMgJiBTSEFERVJERUZfU0tJTikgIT09IDA7XG4gICAgICAgIG9wdGlvbnMubGl0T3B0aW9ucy51c2VJbnN0YW5jaW5nID0gb2JqRGVmcyAmJiAob2JqRGVmcyAmIFNIQURFUkRFRl9JTlNUQU5DSU5HKSAhPT0gMDtcbiAgICAgICAgb3B0aW9ucy5saXRPcHRpb25zLnVzZU1vcnBoUG9zaXRpb24gPSBvYmpEZWZzICYmIChvYmpEZWZzICYgU0hBREVSREVGX01PUlBIX1BPU0lUSU9OKSAhPT0gMDtcbiAgICAgICAgb3B0aW9ucy5saXRPcHRpb25zLnVzZU1vcnBoTm9ybWFsID0gb2JqRGVmcyAmJiAob2JqRGVmcyAmIFNIQURFUkRFRl9NT1JQSF9OT1JNQUwpICE9PSAwO1xuICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMudXNlTW9ycGhUZXh0dXJlQmFzZWQgPSBvYmpEZWZzICYmIChvYmpEZWZzICYgU0hBREVSREVGX01PUlBIX1RFWFRVUkVfQkFTRUQpICE9PSAwO1xuXG4gICAgICAgIG9wdGlvbnMubGl0T3B0aW9ucy5uaW5lU2xpY2VkTW9kZSA9IHN0ZE1hdC5uaW5lU2xpY2VkTW9kZSB8fCAwO1xuXG4gICAgICAgIC8vIGNsdXN0ZXJlZCBsaWdodGluZyBmZWF0dXJlcyAoaW4gc2hhcmVkIG9wdGlvbnMgYXMgc2hhZG93IHBhc3MgbmVlZHMgdGhpcyB0b28pXG4gICAgICAgIGlmIChzY2VuZS5jbHVzdGVyZWRMaWdodGluZ0VuYWJsZWQgJiYgc3RkTWF0LnVzZUxpZ2h0aW5nKSB7XG4gICAgICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMuY2x1c3RlcmVkTGlnaHRpbmdFbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIG9wdGlvbnMubGl0T3B0aW9ucy5jbHVzdGVyZWRMaWdodGluZ0Nvb2tpZXNFbmFibGVkID0gc2NlbmUubGlnaHRpbmcuY29va2llc0VuYWJsZWQ7XG4gICAgICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMuY2x1c3RlcmVkTGlnaHRpbmdTaGFkb3dzRW5hYmxlZCA9IHNjZW5lLmxpZ2h0aW5nLnNoYWRvd3NFbmFibGVkO1xuICAgICAgICAgICAgb3B0aW9ucy5saXRPcHRpb25zLmNsdXN0ZXJlZExpZ2h0aW5nU2hhZG93VHlwZSA9IHNjZW5lLmxpZ2h0aW5nLnNoYWRvd1R5cGU7XG4gICAgICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMuY2x1c3RlcmVkTGlnaHRpbmdBcmVhTGlnaHRzRW5hYmxlZCA9IHNjZW5lLmxpZ2h0aW5nLmFyZWFMaWdodHNFbmFibGVkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3B0aW9ucy5saXRPcHRpb25zLmNsdXN0ZXJlZExpZ2h0aW5nRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgb3B0aW9ucy5saXRPcHRpb25zLmNsdXN0ZXJlZExpZ2h0aW5nQ29va2llc0VuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIG9wdGlvbnMubGl0T3B0aW9ucy5jbHVzdGVyZWRMaWdodGluZ1NoYWRvd3NFbmFibGVkID0gZmFsc2U7XG4gICAgICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMuY2x1c3RlcmVkTGlnaHRpbmdBcmVhTGlnaHRzRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3VwZGF0ZVVWT3B0aW9ucyhvcHRpb25zLCBzdGRNYXQsIG9iakRlZnMsIG1pbmltYWxPcHRpb25zKSB7XG4gICAgICAgIGxldCBoYXNVdjAgPSBmYWxzZTtcbiAgICAgICAgbGV0IGhhc1V2MSA9IGZhbHNlO1xuICAgICAgICBsZXQgaGFzVmNvbG9yID0gZmFsc2U7XG4gICAgICAgIGlmIChvYmpEZWZzKSB7XG4gICAgICAgICAgICBoYXNVdjAgPSAob2JqRGVmcyAmIFNIQURFUkRFRl9VVjApICE9PSAwO1xuICAgICAgICAgICAgaGFzVXYxID0gKG9iakRlZnMgJiBTSEFERVJERUZfVVYxKSAhPT0gMDtcbiAgICAgICAgICAgIGhhc1Zjb2xvciA9IChvYmpEZWZzICYgU0hBREVSREVGX1ZDT0xPUikgIT09IDA7XG4gICAgICAgIH1cblxuICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMudmVydGV4Q29sb3JzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX21hcFhGb3JtcyA9IFtdO1xuXG4gICAgICAgIGNvbnN0IHVuaXF1ZVRleHR1cmVNYXAgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCBwIGluIF9tYXRUZXgyRCkge1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlVGV4T3B0aW9ucyhvcHRpb25zLCBzdGRNYXQsIHAsIGhhc1V2MCwgaGFzVXYxLCBoYXNWY29sb3IsIG1pbmltYWxPcHRpb25zLCB1bmlxdWVUZXh0dXJlTWFwKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9tYXBYRm9ybXMgPSBudWxsO1xuXG4gICAgICAgIC8vIEFsbCB0ZXh0dXJlIHJlbGF0ZWQgbGl0IG9wdGlvbnNcbiAgICAgICAgb3B0aW9ucy5saXRPcHRpb25zLmxpZ2h0TWFwRW5hYmxlZCA9IG9wdGlvbnMubGlnaHRNYXA7XG4gICAgICAgIG9wdGlvbnMubGl0T3B0aW9ucy51c2VMaWdodE1hcFZlcnRleENvbG9ycyA9IG9wdGlvbnMubGlnaHRWZXJ0ZXhDb2xvcjtcbiAgICAgICAgb3B0aW9ucy5saXRPcHRpb25zLmRpckxpZ2h0TWFwRW5hYmxlZCA9IG9wdGlvbnMuZGlyTGlnaHRNYXA7XG4gICAgICAgIG9wdGlvbnMubGl0T3B0aW9ucy5oZWlnaHRNYXBFbmFibGVkID0gb3B0aW9ucy5oZWlnaHRNYXA7XG4gICAgICAgIG9wdGlvbnMubGl0T3B0aW9ucy5ub3JtYWxNYXBFbmFibGVkID0gb3B0aW9ucy5ub3JtYWxNYXA7XG4gICAgICAgIG9wdGlvbnMubGl0T3B0aW9ucy5jbGVhckNvYXROb3JtYWxNYXBFbmFibGVkID0gb3B0aW9ucy5jbGVhckNvYXROb3JtYWxNYXA7XG4gICAgICAgIG9wdGlvbnMubGl0T3B0aW9ucy5hb01hcEVuYWJsZWQgPSBvcHRpb25zLmFvTWFwO1xuICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMudXNlQW9WZXJ0ZXhDb2xvcnMgPSBvcHRpb25zLmFvVmVydGV4Q29sb3I7XG4gICAgICAgIG9wdGlvbnMubGl0T3B0aW9ucy5kaWZmdXNlTWFwRW5hYmxlZCA9IG9wdGlvbnMuZGlmZnVzZU1hcDtcbiAgICB9XG5cbiAgICBfdXBkYXRlVGV4T3B0aW9ucyhvcHRpb25zLCBzdGRNYXQsIHAsIGhhc1V2MCwgaGFzVXYxLCBoYXNWY29sb3IsIG1pbmltYWxPcHRpb25zLCB1bmlxdWVUZXh0dXJlTWFwKSB7XG4gICAgICAgIGNvbnN0IG1uYW1lID0gcCArICdNYXAnO1xuICAgICAgICBjb25zdCB2bmFtZSA9IHAgKyAnVmVydGV4Q29sb3InO1xuICAgICAgICBjb25zdCB2Y25hbWUgPSBwICsgJ1ZlcnRleENvbG9yQ2hhbm5lbCc7XG4gICAgICAgIGNvbnN0IGNuYW1lID0gbW5hbWUgKyAnQ2hhbm5lbCc7XG4gICAgICAgIGNvbnN0IHRuYW1lID0gbW5hbWUgKyAnVHJhbnNmb3JtJztcbiAgICAgICAgY29uc3QgdW5hbWUgPSBtbmFtZSArICdVdic7XG4gICAgICAgIGNvbnN0IGluYW1lID0gbW5hbWUgKyAnSWRlbnRpZmllcic7XG5cbiAgICAgICAgLy8gQXZvaWQgb3ZlcnJpZGluZyBwcmV2aW91cyBsaWdodE1hcCBwcm9wZXJ0aWVzXG4gICAgICAgIGlmIChwICE9PSAnbGlnaHQnKSB7XG4gICAgICAgICAgICBvcHRpb25zW21uYW1lXSA9IGZhbHNlO1xuICAgICAgICAgICAgb3B0aW9uc1tpbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBvcHRpb25zW2NuYW1lXSA9ICcnO1xuICAgICAgICAgICAgb3B0aW9uc1t0bmFtZV0gPSAwO1xuICAgICAgICAgICAgb3B0aW9uc1t1bmFtZV0gPSAwO1xuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnNbdm5hbWVdID0gZmFsc2U7XG4gICAgICAgIG9wdGlvbnNbdmNuYW1lXSA9ICcnO1xuXG4gICAgICAgIGNvbnN0IGlzT3BhY2l0eSA9IHAgPT09ICdvcGFjaXR5JztcbiAgICAgICAgaWYgKGlzT3BhY2l0eSAmJiBzdGRNYXQuYmxlbmRUeXBlID09PSBCTEVORF9OT05FICYmIHN0ZE1hdC5hbHBoYVRlc3QgPT09IDAuMCAmJiAhc3RkTWF0LmFscGhhVG9Db3ZlcmFnZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFtaW5pbWFsT3B0aW9ucyB8fCBpc09wYWNpdHkpIHtcbiAgICAgICAgICAgIGlmIChwICE9PSAnaGVpZ2h0JyAmJiBzdGRNYXRbdm5hbWVdKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhc1Zjb2xvcikge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zW3ZuYW1lXSA9IHN0ZE1hdFt2bmFtZV07XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnNbdmNuYW1lXSA9IHN0ZE1hdFt2Y25hbWVdO1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMudmVydGV4Q29sb3JzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RkTWF0W21uYW1lXSkge1xuICAgICAgICAgICAgICAgIGxldCBhbGxvdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKHN0ZE1hdFt1bmFtZV0gPT09IDAgJiYgIWhhc1V2MCkgYWxsb3cgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAoc3RkTWF0W3VuYW1lXSA9PT0gMSAmJiAhaGFzVXYxKSBhbGxvdyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmIChhbGxvdykge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBhbiBpbnRlcm1lZGlhdGUgbWFwIGJldHdlZW4gdGhlIHRleHR1cmVzIGFuZCB0aGVpciBzbG90c1xuICAgICAgICAgICAgICAgICAgICAvLyB0byBlbnN1cmUgdGhlIHVuaXF1ZSB0ZXh0dXJlIG1hcHBpbmcgaXNuJ3QgZGVwZW5kZW50IG9uIHRoZSB0ZXh0dXJlIGlkXG4gICAgICAgICAgICAgICAgICAgIC8vIGFzIHRoYXQgd2lsbCBjaGFuZ2Ugd2hlbiB0ZXh0dXJlcyBhcmUgY2hhbmdlZCwgZXZlbiBpZiB0aGUgc2hhcmluZyBpcyB0aGUgc2FtZVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXBJZCA9IHN0ZE1hdFttbmFtZV0uaWQ7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpZGVudGlmaWVyID0gdW5pcXVlVGV4dHVyZU1hcFttYXBJZF07XG4gICAgICAgICAgICAgICAgICAgIGlmIChpZGVudGlmaWVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuaXF1ZVRleHR1cmVNYXBbbWFwSWRdID0gcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkZW50aWZpZXIgPSBwO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uc1ttbmFtZV0gPSAhIXN0ZE1hdFttbmFtZV07XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnNbaW5hbWVdID0gaWRlbnRpZmllcjtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uc1t0bmFtZV0gPSB0aGlzLl9nZXRNYXBUcmFuc2Zvcm1JRChzdGRNYXQuZ2V0VW5pZm9ybSh0bmFtZSksIHN0ZE1hdFt1bmFtZV0pO1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zW2NuYW1lXSA9IHN0ZE1hdFtjbmFtZV07XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnNbdW5hbWVdID0gc3RkTWF0W3VuYW1lXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfdXBkYXRlTWluT3B0aW9ucyhvcHRpb25zLCBzdGRNYXQpIHtcbiAgICAgICAgb3B0aW9ucy5vcGFjaXR5VGludCA9IHN0ZE1hdC5vcGFjaXR5ICE9PSAxICYmIHN0ZE1hdC5ibGVuZFR5cGUgIT09IEJMRU5EX05PTkU7XG4gICAgICAgIG9wdGlvbnMubGl0T3B0aW9ucy5saWdodHMgPSBbXTtcbiAgICB9XG5cbiAgICBfdXBkYXRlTWF0ZXJpYWxPcHRpb25zKG9wdGlvbnMsIHN0ZE1hdCkge1xuICAgICAgICBjb25zdCBkaWZmdXNlVGludCA9IChzdGRNYXQuZGlmZnVzZVRpbnQgfHwgKCFzdGRNYXQuZGlmZnVzZU1hcCAmJiAhc3RkTWF0LmRpZmZ1c2VWZXJ0ZXhDb2xvcikpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90V2hpdGUoc3RkTWF0LmRpZmZ1c2UpO1xuXG4gICAgICAgIGNvbnN0IHVzZVNwZWN1bGFyID0gISEoc3RkTWF0LnVzZU1ldGFsbmVzcyB8fCBzdGRNYXQuc3BlY3VsYXJNYXAgfHwgc3RkTWF0LnNwaGVyZU1hcCB8fCBzdGRNYXQuY3ViZU1hcCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdEJsYWNrKHN0ZE1hdC5zcGVjdWxhcikgfHwgKHN0ZE1hdC5zcGVjdWxhcml0eUZhY3RvciA+IDAgJiYgc3RkTWF0LnVzZU1ldGFsbmVzcykgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGRNYXQuZW5hYmxlR0dYU3BlY3VsYXIgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoc3RkTWF0LmNsZWFyQ29hdCA+IDApKTtcblxuICAgICAgICBjb25zdCB1c2VTcGVjdWxhckNvbG9yID0gKCFzdGRNYXQudXNlTWV0YWxuZXNzIHx8IHN0ZE1hdC51c2VNZXRhbG5lc3NTcGVjdWxhckNvbG9yKTtcbiAgICAgICAgY29uc3Qgc3BlY3VsYXJUaW50ID0gdXNlU3BlY3VsYXIgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHN0ZE1hdC5zcGVjdWxhclRpbnQgfHwgKCFzdGRNYXQuc3BlY3VsYXJNYXAgJiYgIXN0ZE1hdC5zcGVjdWxhclZlcnRleENvbG9yKSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90V2hpdGUoc3RkTWF0LnNwZWN1bGFyKTtcblxuICAgICAgICBjb25zdCBzcGVjdWxhcml0eUZhY3RvclRpbnQgPSB1c2VTcGVjdWxhciAmJiBzdGRNYXQudXNlTWV0YWxuZXNzU3BlY3VsYXJDb2xvciAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoc3RkTWF0LnNwZWN1bGFyaXR5RmFjdG9yVGludCB8fCAoc3RkTWF0LnNwZWN1bGFyaXR5RmFjdG9yIDwgMSAmJiAhc3RkTWF0LnNwZWN1bGFyaXR5RmFjdG9yTWFwKSk7XG5cbiAgICAgICAgY29uc3QgZW1pc3NpdmVUaW50Q29sb3IgPSAhc3RkTWF0LmVtaXNzaXZlTWFwIHx8IChub3RXaGl0ZShzdGRNYXQuZW1pc3NpdmUpICYmIHN0ZE1hdC5lbWlzc2l2ZVRpbnQpO1xuICAgICAgICBjb25zdCBlbWlzc2l2ZVRpbnRJbnRlbnNpdHkgPSAoc3RkTWF0LmVtaXNzaXZlSW50ZW5zaXR5ICE9PSAxKTtcblxuICAgICAgICBjb25zdCBpc1BhY2tlZE5vcm1hbE1hcCA9IHN0ZE1hdC5ub3JtYWxNYXAgPyAoc3RkTWF0Lm5vcm1hbE1hcC5mb3JtYXQgPT09IFBJWEVMRk9STUFUX0RYVDUgfHwgc3RkTWF0Lm5vcm1hbE1hcC50eXBlID09PSBURVhUVVJFVFlQRV9TV0laWkxFR0dHUikgOiBmYWxzZTtcblxuICAgICAgICBvcHRpb25zLm9wYWNpdHlUaW50ID0gKHN0ZE1hdC5vcGFjaXR5ICE9PSAxICYmIHN0ZE1hdC5ibGVuZFR5cGUgIT09IEJMRU5EX05PTkUpID8gMSA6IDA7XG4gICAgICAgIG9wdGlvbnMuYW1iaWVudFRpbnQgPSBzdGRNYXQuYW1iaWVudFRpbnQ7XG4gICAgICAgIG9wdGlvbnMuZGlmZnVzZVRpbnQgPSBkaWZmdXNlVGludCA/IDIgOiAwO1xuICAgICAgICBvcHRpb25zLnNwZWN1bGFyVGludCA9IHNwZWN1bGFyVGludCA/IDIgOiAwO1xuICAgICAgICBvcHRpb25zLnNwZWN1bGFyaXR5RmFjdG9yVGludCA9IHNwZWN1bGFyaXR5RmFjdG9yVGludCA/IDEgOiAwO1xuICAgICAgICBvcHRpb25zLm1ldGFsbmVzc1RpbnQgPSAoc3RkTWF0LnVzZU1ldGFsbmVzcyAmJiBzdGRNYXQubWV0YWxuZXNzIDwgMSkgPyAxIDogMDtcbiAgICAgICAgb3B0aW9ucy5nbG9zc1RpbnQgPSAxO1xuICAgICAgICBvcHRpb25zLmVtaXNzaXZlVGludCA9IChlbWlzc2l2ZVRpbnRDb2xvciA/IDIgOiAwKSArIChlbWlzc2l2ZVRpbnRJbnRlbnNpdHkgPyAxIDogMCk7XG4gICAgICAgIG9wdGlvbnMuZGlmZnVzZUVuY29kaW5nID0gc3RkTWF0LmRpZmZ1c2VNYXA/LmVuY29kaW5nO1xuICAgICAgICBvcHRpb25zLmRpZmZ1c2VEZXRhaWxFbmNvZGluZyA9IHN0ZE1hdC5kaWZmdXNlRGV0YWlsTWFwPy5lbmNvZGluZztcbiAgICAgICAgb3B0aW9ucy5lbWlzc2l2ZUVuY29kaW5nID0gc3RkTWF0LmVtaXNzaXZlTWFwPy5lbmNvZGluZztcbiAgICAgICAgb3B0aW9ucy5saWdodE1hcEVuY29kaW5nID0gc3RkTWF0LmxpZ2h0TWFwPy5lbmNvZGluZztcbiAgICAgICAgb3B0aW9ucy5wYWNrZWROb3JtYWwgPSBpc1BhY2tlZE5vcm1hbE1hcDtcbiAgICAgICAgb3B0aW9ucy5yZWZyYWN0aW9uVGludCA9IChzdGRNYXQucmVmcmFjdGlvbiAhPT0gMS4wKSA/IDEgOiAwO1xuICAgICAgICBvcHRpb25zLnJlZnJhY3Rpb25JbmRleFRpbnQgPSAoc3RkTWF0LnJlZnJhY3Rpb25JbmRleCAhPT0gMS4wIC8gMS41KSA/IDEgOiAwO1xuICAgICAgICBvcHRpb25zLnRoaWNrbmVzc1RpbnQgPSAoc3RkTWF0LnVzZUR5bmFtaWNSZWZyYWN0aW9uICYmIHN0ZE1hdC50aGlja25lc3MgIT09IDEuMCkgPyAxIDogMDtcbiAgICAgICAgb3B0aW9ucy5zcGVjdWxhckVuY29kaW5nID0gc3RkTWF0LnNwZWN1bGFyRW5jb2RpbmcgfHwgJ2xpbmVhcic7XG4gICAgICAgIG9wdGlvbnMuc2hlZW5FbmNvZGluZyA9IHN0ZE1hdC5zaGVlbkVuY29kaW5nIHx8ICdsaW5lYXInO1xuICAgICAgICBvcHRpb25zLmFvTWFwVXYgPSBzdGRNYXQuYW9VdlNldDsgLy8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgICAgICAgb3B0aW9ucy5kaWZmdXNlRGV0YWlsID0gISFzdGRNYXQuZGlmZnVzZU1hcDtcbiAgICAgICAgb3B0aW9ucy5ub3JtYWxEZXRhaWwgPSAhIXN0ZE1hdC5ub3JtYWxNYXA7XG4gICAgICAgIG9wdGlvbnMuZGlmZnVzZURldGFpbE1vZGUgPSBzdGRNYXQuZGlmZnVzZURldGFpbE1vZGU7XG4gICAgICAgIG9wdGlvbnMuY2xlYXJDb2F0VGludCA9IChzdGRNYXQuY2xlYXJDb2F0ICE9PSAxLjApID8gMSA6IDA7XG4gICAgICAgIG9wdGlvbnMuY2xlYXJDb2F0R2xvc3MgPSAhIXN0ZE1hdC5jbGVhckNvYXRHbG9zcztcbiAgICAgICAgb3B0aW9ucy5jbGVhckNvYXRHbG9zc1RpbnQgPSAoc3RkTWF0LmNsZWFyQ29hdEdsb3NzICE9PSAxLjApID8gMSA6IDA7XG5cbiAgICAgICAgb3B0aW9ucy5pcmlkZXNjZW5jZVRpbnQgPSBzdGRNYXQuaXJpZGVzY2VuY2UgIT09IDEuMCA/IDEgOiAwO1xuXG4gICAgICAgIG9wdGlvbnMuc2hlZW5UaW50ID0gKHN0ZE1hdC51c2VTaGVlbiAmJiBub3RXaGl0ZShzdGRNYXQuc2hlZW4pKSA/IDIgOiAwO1xuICAgICAgICBvcHRpb25zLnNoZWVuR2xvc3NUaW50ID0gMTtcblxuICAgICAgICBvcHRpb25zLmdsb3NzSW52ZXJ0ID0gc3RkTWF0Lmdsb3NzSW52ZXJ0O1xuICAgICAgICBvcHRpb25zLnNoZWVuR2xvc3NJbnZlcnQgPSBzdGRNYXQuc2hlZW5HbG9zc0ludmVydDtcbiAgICAgICAgb3B0aW9ucy5jbGVhckNvYXRHbG9zc0ludmVydCA9IHN0ZE1hdC5jbGVhckNvYXRHbG9zc0ludmVydDtcblxuICAgICAgICAvLyBMSVQgT1BUSU9OU1xuICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMudXNlQW1iaWVudFRpbnQgPSBvcHRpb25zLmFtYmllbnRUaW50O1xuICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMuY3VzdG9tRnJhZ21lbnRTaGFkZXIgPSBzdGRNYXQuY3VzdG9tRnJhZ21lbnRTaGFkZXI7XG4gICAgICAgIG9wdGlvbnMubGl0T3B0aW9ucy5waXhlbFNuYXAgPSBzdGRNYXQucGl4ZWxTbmFwO1xuXG4gICAgICAgIG9wdGlvbnMubGl0T3B0aW9ucy51c2VDbGVhckNvYXROb3JtYWxNYXAgPSAhIXN0ZE1hdC5jbGVhckNvYXROb3JtYWxNYXA7XG4gICAgICAgIG9wdGlvbnMubGl0T3B0aW9ucy51c2VEaWZmdXNlTWFwID0gISFzdGRNYXQuZGlmZnVzZU1hcDtcbiAgICAgICAgb3B0aW9ucy5saXRPcHRpb25zLnVzZUFvTWFwID0gISFzdGRNYXQuYW9NYXA7XG5cbiAgICAgICAgb3B0aW9ucy5saXRPcHRpb25zLmRldGFpbE1vZGVzID0gISFvcHRpb25zLmRpZmZ1c2VEZXRhaWw7XG4gICAgICAgIG9wdGlvbnMubGl0T3B0aW9ucy5zaGFkaW5nTW9kZWwgPSBzdGRNYXQuc2hhZGluZ01vZGVsO1xuICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMuYW1iaWVudFNIID0gISFzdGRNYXQuYW1iaWVudFNIO1xuICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMuZmFzdFRibiA9IHN0ZE1hdC5mYXN0VGJuO1xuICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMudHdvU2lkZWRMaWdodGluZyA9IHN0ZE1hdC50d29TaWRlZExpZ2h0aW5nO1xuICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMub2NjbHVkZVNwZWN1bGFyID0gc3RkTWF0Lm9jY2x1ZGVTcGVjdWxhcjtcbiAgICAgICAgb3B0aW9ucy5saXRPcHRpb25zLm9jY2x1ZGVTcGVjdWxhckZsb2F0ID0gKHN0ZE1hdC5vY2NsdWRlU3BlY3VsYXJJbnRlbnNpdHkgIT09IDEuMCk7XG5cbiAgICAgICAgb3B0aW9ucy5saXRPcHRpb25zLnVzZU1zZGYgPSAhIXN0ZE1hdC5tc2RmTWFwO1xuICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMubXNkZlRleHRBdHRyaWJ1dGUgPSAhIXN0ZE1hdC5tc2RmVGV4dEF0dHJpYnV0ZTtcblxuICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMuYWxwaGFUb0NvdmVyYWdlID0gc3RkTWF0LmFscGhhVG9Db3ZlcmFnZTtcbiAgICAgICAgb3B0aW9ucy5saXRPcHRpb25zLm9wYWNpdHlGYWRlc1NwZWN1bGFyID0gc3RkTWF0Lm9wYWNpdHlGYWRlc1NwZWN1bGFyO1xuXG4gICAgICAgIG9wdGlvbnMubGl0T3B0aW9ucy5jdWJlTWFwUHJvamVjdGlvbiA9IHN0ZE1hdC5jdWJlTWFwUHJvamVjdGlvbjtcblxuICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMub2NjbHVkZURpcmVjdCA9IHN0ZE1hdC5vY2NsdWRlRGlyZWN0O1xuICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMuY29uc2VydmVFbmVyZ3kgPSBzdGRNYXQuY29uc2VydmVFbmVyZ3kgJiYgc3RkTWF0LnNoYWRpbmdNb2RlbCAhPT0gU1BFQ1VMQVJfUEhPTkc7XG4gICAgICAgIG9wdGlvbnMubGl0T3B0aW9ucy51c2VTcGVjdWxhciA9IHVzZVNwZWN1bGFyO1xuICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMudXNlU3BlY3VsYXJpdHlGYWN0b3IgPSAoc3BlY3VsYXJpdHlGYWN0b3JUaW50IHx8ICEhc3RkTWF0LnNwZWN1bGFyaXR5RmFjdG9yTWFwKSAmJiBzdGRNYXQudXNlTWV0YWxuZXNzU3BlY3VsYXJDb2xvcjtcbiAgICAgICAgb3B0aW9ucy5saXRPcHRpb25zLnVzZVNwZWN1bGFyQ29sb3IgPSB1c2VTcGVjdWxhckNvbG9yO1xuICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMuZW5hYmxlR0dYU3BlY3VsYXIgPSBzdGRNYXQuZW5hYmxlR0dYU3BlY3VsYXI7XG4gICAgICAgIG9wdGlvbnMubGl0T3B0aW9ucy5mcmVzbmVsTW9kZWwgPSBzdGRNYXQuZnJlc25lbE1vZGVsO1xuICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMudXNlUmVmcmFjdGlvbiA9IChzdGRNYXQucmVmcmFjdGlvbiB8fCAhIXN0ZE1hdC5yZWZyYWN0aW9uTWFwKSAmJiAoc3RkTWF0LnVzZUR5bmFtaWNSZWZyYWN0aW9uIHx8ICEhb3B0aW9ucy5saXRPcHRpb25zLnJlZmxlY3Rpb25Tb3VyY2UpO1xuICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMudXNlQ2xlYXJDb2F0ID0gISFzdGRNYXQuY2xlYXJDb2F0O1xuICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMudXNlU2hlZW4gPSBzdGRNYXQudXNlU2hlZW47XG4gICAgICAgIG9wdGlvbnMubGl0T3B0aW9ucy51c2VJcmlkZXNjZW5jZSA9IHN0ZE1hdC51c2VJcmlkZXNjZW5jZSAmJiBzdGRNYXQuaXJpZGVzY2VuY2UgIT09IDAuMDtcbiAgICAgICAgb3B0aW9ucy5saXRPcHRpb25zLnVzZU1ldGFsbmVzcyA9IHN0ZE1hdC51c2VNZXRhbG5lc3M7XG4gICAgICAgIG9wdGlvbnMubGl0T3B0aW9ucy51c2VEeW5hbWljUmVmcmFjdGlvbiA9IHN0ZE1hdC51c2VEeW5hbWljUmVmcmFjdGlvbjtcbiAgICB9XG5cbiAgICBfdXBkYXRlRW52T3B0aW9ucyhvcHRpb25zLCBzdGRNYXQsIHNjZW5lKSB7XG4gICAgICAgIG9wdGlvbnMubGl0T3B0aW9ucy5mb2cgPSBzdGRNYXQudXNlRm9nID8gc2NlbmUuZm9nIDogJ25vbmUnO1xuICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMuZ2FtbWEgPSBzdGRNYXQudXNlR2FtbWFUb25lbWFwID8gc2NlbmUuZ2FtbWFDb3JyZWN0aW9uIDogR0FNTUFfTk9ORTtcbiAgICAgICAgb3B0aW9ucy5saXRPcHRpb25zLnRvbmVNYXAgPSBzdGRNYXQudXNlR2FtbWFUb25lbWFwID8gc2NlbmUudG9uZU1hcHBpbmcgOiAtMTtcbiAgICAgICAgb3B0aW9ucy5saXRPcHRpb25zLmZpeFNlYW1zID0gKHN0ZE1hdC5jdWJlTWFwID8gc3RkTWF0LmN1YmVNYXAuZml4Q3ViZW1hcFNlYW1zIDogZmFsc2UpO1xuXG4gICAgICAgIGNvbnN0IGlzUGhvbmcgPSBzdGRNYXQuc2hhZGluZ01vZGVsID09PSBTUEVDVUxBUl9QSE9ORztcblxuICAgICAgICBsZXQgdXNpbmdTY2VuZUVudiA9IGZhbHNlO1xuXG4gICAgICAgIC8vIHNvdXJjZSBvZiBlbnZpcm9ubWVudCByZWZsZWN0aW9ucyBpcyBhcyBmb2xsb3dzOlxuICAgICAgICBpZiAoc3RkTWF0LmVudkF0bGFzICYmIHN0ZE1hdC5jdWJlTWFwICYmICFpc1Bob25nKSB7XG4gICAgICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMucmVmbGVjdGlvblNvdXJjZSA9ICdlbnZBdGxhc0hRJztcbiAgICAgICAgICAgIG9wdGlvbnMubGl0T3B0aW9ucy5yZWZsZWN0aW9uRW5jb2RpbmcgPSBzdGRNYXQuZW52QXRsYXMuZW5jb2Rpbmc7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RkTWF0LmVudkF0bGFzICYmICFpc1Bob25nKSB7XG4gICAgICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMucmVmbGVjdGlvblNvdXJjZSA9ICdlbnZBdGxhcyc7XG4gICAgICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMucmVmbGVjdGlvbkVuY29kaW5nID0gc3RkTWF0LmVudkF0bGFzLmVuY29kaW5nO1xuICAgICAgICB9IGVsc2UgaWYgKHN0ZE1hdC5jdWJlTWFwKSB7XG4gICAgICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMucmVmbGVjdGlvblNvdXJjZSA9ICdjdWJlTWFwJztcbiAgICAgICAgICAgIG9wdGlvbnMubGl0T3B0aW9ucy5yZWZsZWN0aW9uRW5jb2RpbmcgPSBzdGRNYXQuY3ViZU1hcC5lbmNvZGluZztcbiAgICAgICAgfSBlbHNlIGlmIChzdGRNYXQuc3BoZXJlTWFwKSB7XG4gICAgICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMucmVmbGVjdGlvblNvdXJjZSA9ICdzcGhlcmVNYXAnO1xuICAgICAgICAgICAgb3B0aW9ucy5saXRPcHRpb25zLnJlZmxlY3Rpb25FbmNvZGluZyA9IHN0ZE1hdC5zcGhlcmVNYXAuZW5jb2Rpbmc7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RkTWF0LnVzZVNreWJveCAmJiBzY2VuZS5lbnZBdGxhcyAmJiBzY2VuZS5za3lib3ggJiYgIWlzUGhvbmcpIHtcbiAgICAgICAgICAgIG9wdGlvbnMubGl0T3B0aW9ucy5yZWZsZWN0aW9uU291cmNlID0gJ2VudkF0bGFzSFEnO1xuICAgICAgICAgICAgb3B0aW9ucy5saXRPcHRpb25zLnJlZmxlY3Rpb25FbmNvZGluZyA9IHNjZW5lLmVudkF0bGFzLmVuY29kaW5nO1xuICAgICAgICAgICAgdXNpbmdTY2VuZUVudiA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RkTWF0LnVzZVNreWJveCAmJiBzY2VuZS5lbnZBdGxhcyAmJiAhaXNQaG9uZykge1xuICAgICAgICAgICAgb3B0aW9ucy5saXRPcHRpb25zLnJlZmxlY3Rpb25Tb3VyY2UgPSAnZW52QXRsYXMnO1xuICAgICAgICAgICAgb3B0aW9ucy5saXRPcHRpb25zLnJlZmxlY3Rpb25FbmNvZGluZyA9IHNjZW5lLmVudkF0bGFzLmVuY29kaW5nO1xuICAgICAgICAgICAgdXNpbmdTY2VuZUVudiA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RkTWF0LnVzZVNreWJveCAmJiBzY2VuZS5za3lib3gpIHtcbiAgICAgICAgICAgIG9wdGlvbnMubGl0T3B0aW9ucy5yZWZsZWN0aW9uU291cmNlID0gJ2N1YmVNYXAnO1xuICAgICAgICAgICAgb3B0aW9ucy5saXRPcHRpb25zLnJlZmxlY3Rpb25FbmNvZGluZyA9IHNjZW5lLnNreWJveC5lbmNvZGluZztcbiAgICAgICAgICAgIHVzaW5nU2NlbmVFbnYgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3B0aW9ucy5saXRPcHRpb25zLnJlZmxlY3Rpb25Tb3VyY2UgPSBudWxsO1xuICAgICAgICAgICAgb3B0aW9ucy5saXRPcHRpb25zLnJlZmxlY3Rpb25FbmNvZGluZyA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzb3VyY2Ugb2YgZW52aXJvbm1lbnQgYW1iaWVudCBpcyBhcyBmb2xsb3dzOlxuICAgICAgICBpZiAoc3RkTWF0LmFtYmllbnRTSCAmJiAhaXNQaG9uZykge1xuICAgICAgICAgICAgb3B0aW9ucy5saXRPcHRpb25zLmFtYmllbnRTb3VyY2UgPSAnYW1iaWVudFNIJztcbiAgICAgICAgICAgIG9wdGlvbnMubGl0T3B0aW9ucy5hbWJpZW50RW5jb2RpbmcgPSBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZW52QXRsYXMgPSBzdGRNYXQuZW52QXRsYXMgfHwgKHN0ZE1hdC51c2VTa3lib3ggJiYgc2NlbmUuZW52QXRsYXMgPyBzY2VuZS5lbnZBdGxhcyA6IG51bGwpO1xuICAgICAgICAgICAgaWYgKGVudkF0bGFzICYmICFpc1Bob25nKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5saXRPcHRpb25zLmFtYmllbnRTb3VyY2UgPSAnZW52QXRsYXMnO1xuICAgICAgICAgICAgICAgIG9wdGlvbnMubGl0T3B0aW9ucy5hbWJpZW50RW5jb2RpbmcgPSBlbnZBdGxhcy5lbmNvZGluZztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5saXRPcHRpb25zLmFtYmllbnRTb3VyY2UgPSAnY29uc3RhbnQnO1xuICAgICAgICAgICAgICAgIG9wdGlvbnMubGl0T3B0aW9ucy5hbWJpZW50RW5jb2RpbmcgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVE9ETzogYWRkIGEgdGVzdCBmb3IgaWYgbm9uIHNreWJveCBjdWJlbWFwcyBoYXZlIHJvdGF0aW9uICh3aGVuIHRoaXMgaXMgc3VwcG9ydGVkKSAtIGZvciBub3cgYXNzdW1lIG5vIG5vbi1za3lib3ggY3ViZW1hcCByb3RhdGlvblxuICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMuc2t5Ym94SW50ZW5zaXR5ID0gdXNpbmdTY2VuZUVudiAmJiAoc2NlbmUuc2t5Ym94SW50ZW5zaXR5ICE9PSAxIHx8IHNjZW5lLnBoeXNpY2FsVW5pdHMpO1xuICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMudXNlQ3ViZU1hcFJvdGF0aW9uID0gdXNpbmdTY2VuZUVudiAmJiBzY2VuZS5za3lib3hSb3RhdGlvbiAmJiAhc2NlbmUuc2t5Ym94Um90YXRpb24uZXF1YWxzKFF1YXQuSURFTlRJVFkpO1xuICAgIH1cblxuICAgIF91cGRhdGVMaWdodE9wdGlvbnMob3B0aW9ucywgc2NlbmUsIHN0ZE1hdCwgb2JqRGVmcywgc29ydGVkTGlnaHRzLCBzdGF0aWNMaWdodExpc3QpIHtcbiAgICAgICAgb3B0aW9ucy5saWdodE1hcCA9IGZhbHNlO1xuICAgICAgICBvcHRpb25zLmxpZ2h0TWFwQ2hhbm5lbCA9ICcnO1xuICAgICAgICBvcHRpb25zLmxpZ2h0TWFwVXYgPSAwO1xuICAgICAgICBvcHRpb25zLmxpZ2h0TWFwVHJhbnNmb3JtID0gMDtcbiAgICAgICAgb3B0aW9ucy5saXRPcHRpb25zLmxpZ2h0TWFwV2l0aG91dEFtYmllbnQgPSBmYWxzZTtcbiAgICAgICAgb3B0aW9ucy5kaXJMaWdodE1hcCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChvYmpEZWZzKSB7XG4gICAgICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMubm9TaGFkb3cgPSAob2JqRGVmcyAmIFNIQURFUkRFRl9OT1NIQURPVykgIT09IDA7XG5cbiAgICAgICAgICAgIGlmICgob2JqRGVmcyAmIFNIQURFUkRFRl9MTSkgIT09IDApIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmxpZ2h0TWFwRW5jb2RpbmcgPSBzY2VuZS5saWdodG1hcFBpeGVsRm9ybWF0ID09PSBQSVhFTEZPUk1BVF9SR0JBOCA/ICdyZ2JtJyA6ICdsaW5lYXInO1xuICAgICAgICAgICAgICAgIG9wdGlvbnMubGlnaHRNYXAgPSB0cnVlO1xuICAgICAgICAgICAgICAgIG9wdGlvbnMubGlnaHRNYXBDaGFubmVsID0gJ3JnYic7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5saWdodE1hcFV2ID0gMTtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmxpZ2h0TWFwVHJhbnNmb3JtID0gMDtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMubGlnaHRNYXBXaXRob3V0QW1iaWVudCA9ICFzdGRNYXQubGlnaHRNYXA7XG4gICAgICAgICAgICAgICAgaWYgKChvYmpEZWZzICYgU0hBREVSREVGX0RJUkxNKSAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmRpckxpZ2h0TWFwID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBpZiBsaWdodG1hcHMgY29udGFpbiBiYWtlZCBhbWJpZW50IGxpZ2h0LCBkaXNhYmxlIHJlYWwtdGltZSBhbWJpZW50IGxpZ2h0XG4gICAgICAgICAgICAgICAgaWYgKChvYmpEZWZzICYgU0hBREVSREVGX0xNQU1CSUVOVCkgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5saXRPcHRpb25zLmxpZ2h0TWFwV2l0aG91dEFtYmllbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RkTWF0LnVzZUxpZ2h0aW5nKSB7XG4gICAgICAgICAgICBjb25zdCBsaWdodHNGaWx0ZXJlZCA9IFtdO1xuICAgICAgICAgICAgY29uc3QgbWFzayA9IG9iakRlZnMgPyAob2JqRGVmcyA+PiAxNikgOiBNQVNLX0FGRkVDVF9EWU5BTUlDO1xuXG4gICAgICAgICAgICAvLyBtYXNrIHRvIHNlbGVjdCBsaWdodHMgKGR5bmFtaWMgdnMgbGlnaHRtYXBwZWQpIHdoZW4gdXNpbmcgY2x1c3RlcmVkIGxpZ2h0aW5nXG4gICAgICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMubGlnaHRNYXNrRHluYW1pYyA9ICEhKG1hc2sgJiBNQVNLX0FGRkVDVF9EWU5BTUlDKTtcblxuICAgICAgICAgICAgaWYgKHNvcnRlZExpZ2h0cykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NvbGxlY3RMaWdodHMoTElHSFRUWVBFX0RJUkVDVElPTkFMLCBzb3J0ZWRMaWdodHNbTElHSFRUWVBFX0RJUkVDVElPTkFMXSwgbGlnaHRzRmlsdGVyZWQsIG1hc2spO1xuICAgICAgICAgICAgICAgIHRoaXMuX2NvbGxlY3RMaWdodHMoTElHSFRUWVBFX09NTkksIHNvcnRlZExpZ2h0c1tMSUdIVFRZUEVfT01OSV0sIGxpZ2h0c0ZpbHRlcmVkLCBtYXNrLCBzdGF0aWNMaWdodExpc3QpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2NvbGxlY3RMaWdodHMoTElHSFRUWVBFX1NQT1QsIHNvcnRlZExpZ2h0c1tMSUdIVFRZUEVfU1BPVF0sIGxpZ2h0c0ZpbHRlcmVkLCBtYXNrLCBzdGF0aWNMaWdodExpc3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3B0aW9ucy5saXRPcHRpb25zLmxpZ2h0cyA9IGxpZ2h0c0ZpbHRlcmVkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3B0aW9ucy5saXRPcHRpb25zLmxpZ2h0cyA9IFtdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubGl0T3B0aW9ucy5saWdodHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBvcHRpb25zLmxpdE9wdGlvbnMubm9TaGFkb3cgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2NvbGxlY3RMaWdodHMobFR5cGUsIGxpZ2h0cywgbGlnaHRzRmlsdGVyZWQsIG1hc2ssIHN0YXRpY0xpZ2h0TGlzdCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpZ2h0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgbGlnaHQgPSBsaWdodHNbaV07XG4gICAgICAgICAgICBpZiAobGlnaHQuZW5hYmxlZCkge1xuICAgICAgICAgICAgICAgIGlmIChsaWdodC5tYXNrICYgbWFzaykge1xuICAgICAgICAgICAgICAgICAgICBpZiAobFR5cGUgIT09IExJR0hUVFlQRV9ESVJFQ1RJT05BTCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpZ2h0LmlzU3RhdGljKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbGlnaHRzRmlsdGVyZWQucHVzaChsaWdodCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0YXRpY0xpZ2h0TGlzdCkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGF0aWNMaWdodExpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsaWdodCA9IHN0YXRpY0xpZ2h0TGlzdFtpXTtcbiAgICAgICAgICAgICAgICBpZiAobGlnaHQuX3R5cGUgPT09IGxUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpZ2h0c0ZpbHRlcmVkLnB1c2gobGlnaHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9nZXRNYXBUcmFuc2Zvcm1JRCh4Zm9ybSwgdXYpIHtcbiAgICAgICAgaWYgKCF4Zm9ybSkgcmV0dXJuIDA7XG5cbiAgICAgICAgbGV0IHhmb3JtcyA9IHRoaXMuX21hcFhGb3Jtc1t1dl07XG4gICAgICAgIGlmICgheGZvcm1zKSB7XG4gICAgICAgICAgICB4Zm9ybXMgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX21hcFhGb3Jtc1t1dl0gPSB4Zm9ybXM7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHhmb3Jtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGFycmF5c0VxdWFsKHhmb3Jtc1tpXVswXS52YWx1ZSwgeGZvcm1bMF0udmFsdWUpICYmXG4gICAgICAgICAgICAgICAgYXJyYXlzRXF1YWwoeGZvcm1zW2ldWzFdLnZhbHVlLCB4Zm9ybVsxXS52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaSArIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geGZvcm1zLnB1c2goeGZvcm0pO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgU3RhbmRhcmRNYXRlcmlhbE9wdGlvbnNCdWlsZGVyIH07XG4iXSwibmFtZXMiOlsiYXJyYXlzRXF1YWwiLCJhIiwiYiIsImxlbmd0aCIsImkiLCJub3RXaGl0ZSIsImNvbG9yIiwiciIsImciLCJub3RCbGFjayIsIlN0YW5kYXJkTWF0ZXJpYWxPcHRpb25zQnVpbGRlciIsImNvbnN0cnVjdG9yIiwiX21hcFhGb3JtcyIsInVwZGF0ZU1pblJlZiIsIm9wdGlvbnMiLCJzY2VuZSIsInN0ZE1hdCIsIm9iakRlZnMiLCJzdGF0aWNMaWdodExpc3QiLCJwYXNzIiwic29ydGVkTGlnaHRzIiwiX3VwZGF0ZVNoYXJlZE9wdGlvbnMiLCJfdXBkYXRlTWluT3B0aW9ucyIsIl91cGRhdGVVVk9wdGlvbnMiLCJsaXRPcHRpb25zIiwiY2h1bmtzIiwidXBkYXRlUmVmIiwiX3VwZGF0ZUVudk9wdGlvbnMiLCJfdXBkYXRlTWF0ZXJpYWxPcHRpb25zIiwiU0hBREVSX0ZPUldBUkRIRFIiLCJnYW1tYSIsIkdBTU1BX1NSR0JIRFIiLCJ0b25lTWFwIiwiVE9ORU1BUF9MSU5FQVIiLCJoYXNUYW5nZW50cyIsIlNIQURFUkRFRl9UQU5HRU5UUyIsIl91cGRhdGVMaWdodE9wdGlvbnMiLCJmb3JjZVV2MSIsImFscGhhVGVzdCIsImZvcmNlRnJhZ21lbnRQcmVjaXNpb24iLCJibGVuZFR5cGUiLCJzZXBhcmF0ZUFtYmllbnQiLCJzY3JlZW5TcGFjZSIsIlNIQURFUkRFRl9TQ1JFRU5TUEFDRSIsInNraW4iLCJTSEFERVJERUZfU0tJTiIsInVzZUluc3RhbmNpbmciLCJTSEFERVJERUZfSU5TVEFOQ0lORyIsInVzZU1vcnBoUG9zaXRpb24iLCJTSEFERVJERUZfTU9SUEhfUE9TSVRJT04iLCJ1c2VNb3JwaE5vcm1hbCIsIlNIQURFUkRFRl9NT1JQSF9OT1JNQUwiLCJ1c2VNb3JwaFRleHR1cmVCYXNlZCIsIlNIQURFUkRFRl9NT1JQSF9URVhUVVJFX0JBU0VEIiwibmluZVNsaWNlZE1vZGUiLCJjbHVzdGVyZWRMaWdodGluZ0VuYWJsZWQiLCJ1c2VMaWdodGluZyIsImNsdXN0ZXJlZExpZ2h0aW5nQ29va2llc0VuYWJsZWQiLCJsaWdodGluZyIsImNvb2tpZXNFbmFibGVkIiwiY2x1c3RlcmVkTGlnaHRpbmdTaGFkb3dzRW5hYmxlZCIsInNoYWRvd3NFbmFibGVkIiwiY2x1c3RlcmVkTGlnaHRpbmdTaGFkb3dUeXBlIiwic2hhZG93VHlwZSIsImNsdXN0ZXJlZExpZ2h0aW5nQXJlYUxpZ2h0c0VuYWJsZWQiLCJhcmVhTGlnaHRzRW5hYmxlZCIsIm1pbmltYWxPcHRpb25zIiwiaGFzVXYwIiwiaGFzVXYxIiwiaGFzVmNvbG9yIiwiU0hBREVSREVGX1VWMCIsIlNIQURFUkRFRl9VVjEiLCJTSEFERVJERUZfVkNPTE9SIiwidmVydGV4Q29sb3JzIiwidW5pcXVlVGV4dHVyZU1hcCIsInAiLCJfbWF0VGV4MkQiLCJfdXBkYXRlVGV4T3B0aW9ucyIsImxpZ2h0TWFwRW5hYmxlZCIsImxpZ2h0TWFwIiwidXNlTGlnaHRNYXBWZXJ0ZXhDb2xvcnMiLCJsaWdodFZlcnRleENvbG9yIiwiZGlyTGlnaHRNYXBFbmFibGVkIiwiZGlyTGlnaHRNYXAiLCJoZWlnaHRNYXBFbmFibGVkIiwiaGVpZ2h0TWFwIiwibm9ybWFsTWFwRW5hYmxlZCIsIm5vcm1hbE1hcCIsImNsZWFyQ29hdE5vcm1hbE1hcEVuYWJsZWQiLCJjbGVhckNvYXROb3JtYWxNYXAiLCJhb01hcEVuYWJsZWQiLCJhb01hcCIsInVzZUFvVmVydGV4Q29sb3JzIiwiYW9WZXJ0ZXhDb2xvciIsImRpZmZ1c2VNYXBFbmFibGVkIiwiZGlmZnVzZU1hcCIsIm1uYW1lIiwidm5hbWUiLCJ2Y25hbWUiLCJjbmFtZSIsInRuYW1lIiwidW5hbWUiLCJpbmFtZSIsInVuZGVmaW5lZCIsImlzT3BhY2l0eSIsIkJMRU5EX05PTkUiLCJhbHBoYVRvQ292ZXJhZ2UiLCJhbGxvdyIsIm1hcElkIiwiaWQiLCJpZGVudGlmaWVyIiwiX2dldE1hcFRyYW5zZm9ybUlEIiwiZ2V0VW5pZm9ybSIsIm9wYWNpdHlUaW50Iiwib3BhY2l0eSIsImxpZ2h0cyIsImRpZmZ1c2VUaW50IiwiZGlmZnVzZVZlcnRleENvbG9yIiwiZGlmZnVzZSIsInVzZVNwZWN1bGFyIiwidXNlTWV0YWxuZXNzIiwic3BlY3VsYXJNYXAiLCJzcGhlcmVNYXAiLCJjdWJlTWFwIiwic3BlY3VsYXIiLCJzcGVjdWxhcml0eUZhY3RvciIsImVuYWJsZUdHWFNwZWN1bGFyIiwiY2xlYXJDb2F0IiwidXNlU3BlY3VsYXJDb2xvciIsInVzZU1ldGFsbmVzc1NwZWN1bGFyQ29sb3IiLCJzcGVjdWxhclRpbnQiLCJzcGVjdWxhclZlcnRleENvbG9yIiwic3BlY3VsYXJpdHlGYWN0b3JUaW50Iiwic3BlY3VsYXJpdHlGYWN0b3JNYXAiLCJlbWlzc2l2ZVRpbnRDb2xvciIsImVtaXNzaXZlTWFwIiwiZW1pc3NpdmUiLCJlbWlzc2l2ZVRpbnQiLCJlbWlzc2l2ZVRpbnRJbnRlbnNpdHkiLCJlbWlzc2l2ZUludGVuc2l0eSIsImlzUGFja2VkTm9ybWFsTWFwIiwiZm9ybWF0IiwiUElYRUxGT1JNQVRfRFhUNSIsInR5cGUiLCJURVhUVVJFVFlQRV9TV0laWkxFR0dHUiIsImFtYmllbnRUaW50IiwibWV0YWxuZXNzVGludCIsIm1ldGFsbmVzcyIsImdsb3NzVGludCIsImRpZmZ1c2VFbmNvZGluZyIsImVuY29kaW5nIiwiZGlmZnVzZURldGFpbEVuY29kaW5nIiwiZGlmZnVzZURldGFpbE1hcCIsImVtaXNzaXZlRW5jb2RpbmciLCJsaWdodE1hcEVuY29kaW5nIiwicGFja2VkTm9ybWFsIiwicmVmcmFjdGlvblRpbnQiLCJyZWZyYWN0aW9uIiwicmVmcmFjdGlvbkluZGV4VGludCIsInJlZnJhY3Rpb25JbmRleCIsInRoaWNrbmVzc1RpbnQiLCJ1c2VEeW5hbWljUmVmcmFjdGlvbiIsInRoaWNrbmVzcyIsInNwZWN1bGFyRW5jb2RpbmciLCJzaGVlbkVuY29kaW5nIiwiYW9NYXBVdiIsImFvVXZTZXQiLCJkaWZmdXNlRGV0YWlsIiwibm9ybWFsRGV0YWlsIiwiZGlmZnVzZURldGFpbE1vZGUiLCJjbGVhckNvYXRUaW50IiwiY2xlYXJDb2F0R2xvc3MiLCJjbGVhckNvYXRHbG9zc1RpbnQiLCJpcmlkZXNjZW5jZVRpbnQiLCJpcmlkZXNjZW5jZSIsInNoZWVuVGludCIsInVzZVNoZWVuIiwic2hlZW4iLCJzaGVlbkdsb3NzVGludCIsImdsb3NzSW52ZXJ0Iiwic2hlZW5HbG9zc0ludmVydCIsImNsZWFyQ29hdEdsb3NzSW52ZXJ0IiwidXNlQW1iaWVudFRpbnQiLCJjdXN0b21GcmFnbWVudFNoYWRlciIsInBpeGVsU25hcCIsInVzZUNsZWFyQ29hdE5vcm1hbE1hcCIsInVzZURpZmZ1c2VNYXAiLCJ1c2VBb01hcCIsImRldGFpbE1vZGVzIiwic2hhZGluZ01vZGVsIiwiYW1iaWVudFNIIiwiZmFzdFRibiIsInR3b1NpZGVkTGlnaHRpbmciLCJvY2NsdWRlU3BlY3VsYXIiLCJvY2NsdWRlU3BlY3VsYXJGbG9hdCIsIm9jY2x1ZGVTcGVjdWxhckludGVuc2l0eSIsInVzZU1zZGYiLCJtc2RmTWFwIiwibXNkZlRleHRBdHRyaWJ1dGUiLCJvcGFjaXR5RmFkZXNTcGVjdWxhciIsImN1YmVNYXBQcm9qZWN0aW9uIiwib2NjbHVkZURpcmVjdCIsImNvbnNlcnZlRW5lcmd5IiwiU1BFQ1VMQVJfUEhPTkciLCJ1c2VTcGVjdWxhcml0eUZhY3RvciIsImZyZXNuZWxNb2RlbCIsInVzZVJlZnJhY3Rpb24iLCJyZWZyYWN0aW9uTWFwIiwicmVmbGVjdGlvblNvdXJjZSIsInVzZUNsZWFyQ29hdCIsInVzZUlyaWRlc2NlbmNlIiwiZm9nIiwidXNlRm9nIiwidXNlR2FtbWFUb25lbWFwIiwiZ2FtbWFDb3JyZWN0aW9uIiwiR0FNTUFfTk9ORSIsInRvbmVNYXBwaW5nIiwiZml4U2VhbXMiLCJmaXhDdWJlbWFwU2VhbXMiLCJpc1Bob25nIiwidXNpbmdTY2VuZUVudiIsImVudkF0bGFzIiwicmVmbGVjdGlvbkVuY29kaW5nIiwidXNlU2t5Ym94Iiwic2t5Ym94IiwiYW1iaWVudFNvdXJjZSIsImFtYmllbnRFbmNvZGluZyIsInNreWJveEludGVuc2l0eSIsInBoeXNpY2FsVW5pdHMiLCJ1c2VDdWJlTWFwUm90YXRpb24iLCJza3lib3hSb3RhdGlvbiIsImVxdWFscyIsIlF1YXQiLCJJREVOVElUWSIsImxpZ2h0TWFwQ2hhbm5lbCIsImxpZ2h0TWFwVXYiLCJsaWdodE1hcFRyYW5zZm9ybSIsImxpZ2h0TWFwV2l0aG91dEFtYmllbnQiLCJub1NoYWRvdyIsIlNIQURFUkRFRl9OT1NIQURPVyIsIlNIQURFUkRFRl9MTSIsImxpZ2h0bWFwUGl4ZWxGb3JtYXQiLCJQSVhFTEZPUk1BVF9SR0JBOCIsIlNIQURFUkRFRl9ESVJMTSIsIlNIQURFUkRFRl9MTUFNQklFTlQiLCJsaWdodHNGaWx0ZXJlZCIsIm1hc2siLCJNQVNLX0FGRkVDVF9EWU5BTUlDIiwibGlnaHRNYXNrRHluYW1pYyIsIl9jb2xsZWN0TGlnaHRzIiwiTElHSFRUWVBFX0RJUkVDVElPTkFMIiwiTElHSFRUWVBFX09NTkkiLCJMSUdIVFRZUEVfU1BPVCIsImxUeXBlIiwibGlnaHQiLCJlbmFibGVkIiwiaXNTdGF0aWMiLCJwdXNoIiwiX3R5cGUiLCJ4Zm9ybSIsInV2IiwieGZvcm1zIiwidmFsdWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFtQkEsTUFBTUEsV0FBVyxHQUFHLENBQUNDLENBQUMsRUFBRUMsQ0FBQyxLQUFLO0FBQzFCLEVBQUEsSUFBSUQsQ0FBQyxDQUFDRSxNQUFNLEtBQUtELENBQUMsQ0FBQ0MsTUFBTSxFQUFFO0FBQ3ZCLElBQUEsT0FBTyxLQUFLLENBQUE7QUFDaEIsR0FBQTtBQUNBLEVBQUEsS0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdILENBQUMsQ0FBQ0UsTUFBTSxFQUFFLEVBQUVDLENBQUMsRUFBRTtJQUMvQixJQUFJSCxDQUFDLENBQUNHLENBQUMs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
