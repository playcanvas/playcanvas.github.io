/**
 * @license
 * PlayCanvas Engine v1.57.1 revision 256dd83c2 (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { Debug } from '../core/debug.js';
import { EventHandler } from '../core/event-handler.js';
import { KeyboardEvent } from './keyboard-event.js';

const _keyboardEvent = new KeyboardEvent();

function makeKeyboardEvent(event) {
  _keyboardEvent.key = event.keyCode;
  _keyboardEvent.element = event.target;
  _keyboardEvent.event = event;
  return _keyboardEvent;
}

function toKeyCode(s) {
  if (typeof s === 'string') {
    return s.toUpperCase().charCodeAt(0);
  }

  return s;
}

const _keyCodeToKeyIdentifier = {
  '9': 'Tab',
  '13': 'Enter',
  '16': 'Shift',
  '17': 'Control',
  '18': 'Alt',
  '27': 'Escape',
  '37': 'Left',
  '38': 'Up',
  '39': 'Right',
  '40': 'Down',
  '46': 'Delete',
  '91': 'Win'
};

class Keyboard extends EventHandler {
  constructor(element, options = {}) {
    super();
    this._element = null;
    this._keyDownHandler = this._handleKeyDown.bind(this);
    this._keyUpHandler = this._handleKeyUp.bind(this);
    this._keyPressHandler = this._handleKeyPress.bind(this);
    this._visibilityChangeHandler = this._handleVisibilityChange.bind(this);
    this._windowBlurHandler = this._handleWindowBlur.bind(this);
    this._keymap = {};
    this._lastmap = {};

    if (element) {
      this.attach(element);
    }

    this.preventDefault = options.preventDefault || false;
    this.stopPropagation = options.stopPropagation || false;
  }

  attach(element) {
    if (this._element) {
      this.detach();
    }

    this._element = element;

    this._element.addEventListener('keydown', this._keyDownHandler, false);

    this._element.addEventListener('keypress', this._keyPressHandler, false);

    this._element.addEventListener('keyup', this._keyUpHandler, false);

    document.addEventListener('visibilitychange', this._visibilityChangeHandler, false);
    window.addEventListener('blur', this._windowBlurHandler, false);
  }

  detach() {
    if (!this._element) {
      Debug.warn('Unable to detach keyboard. It is not attached to an element.');
      return;
    }

    this._element.removeEventListener('keydown', this._keyDownHandler);

    this._element.removeEventListener('keypress', this._keyPressHandler);

    this._element.removeEventListener('keyup', this._keyUpHandler);

    this._element = null;
    document.removeEventListener('visibilitychange', this._visibilityChangeHandler, false);
    window.removeEventListener('blur', this._windowBlurHandler, false);
  }

  toKeyIdentifier(keyCode) {
    keyCode = toKeyCode(keyCode);

    const id = _keyCodeToKeyIdentifier[keyCode.toString()];

    if (id) {
      return id;
    }

    let hex = keyCode.toString(16).toUpperCase();
    const length = hex.length;

    for (let count = 0; count < 4 - length; count++) {
      hex = '0' + hex;
    }

    return 'U+' + hex;
  }

  _handleKeyDown(event) {
    const code = event.keyCode || event.charCode;
    if (code === undefined) return;
    const id = this.toKeyIdentifier(code);
    this._keymap[id] = true;
    this.fire('keydown', makeKeyboardEvent(event));

    if (this.preventDefault) {
      event.preventDefault();
    }

    if (this.stopPropagation) {
      event.stopPropagation();
    }
  }

  _handleKeyUp(event) {
    const code = event.keyCode || event.charCode;
    if (code === undefined) return;
    const id = this.toKeyIdentifier(code);
    delete this._keymap[id];
    this.fire('keyup', makeKeyboardEvent(event));

    if (this.preventDefault) {
      event.preventDefault();
    }

    if (this.stopPropagation) {
      event.stopPropagation();
    }
  }

  _handleKeyPress(event) {
    this.fire('keypress', makeKeyboardEvent(event));

    if (this.preventDefault) {
      event.preventDefault();
    }

    if (this.stopPropagation) {
      event.stopPropagation();
    }
  }

  _handleVisibilityChange() {
    if (document.visibilityState === 'hidden') {
      this._handleWindowBlur();
    }
  }

  _handleWindowBlur() {
    this._keymap = {};
    this._lastmap = {};
  }

  update() {
    for (const prop in this._lastmap) {
      delete this._lastmap[prop];
    }

    for (const prop in this._keymap) {
      if (this._keymap.hasOwnProperty(prop)) {
        this._lastmap[prop] = this._keymap[prop];
      }
    }
  }

  isPressed(key) {
    const keyCode = toKeyCode(key);
    const id = this.toKeyIdentifier(keyCode);
    return !!this._keymap[id];
  }

  wasPressed(key) {
    const keyCode = toKeyCode(key);
    const id = this.toKeyIdentifier(keyCode);
    return !!this._keymap[id] && !!!this._lastmap[id];
  }

  wasReleased(key) {
    const keyCode = toKeyCode(key);
    const id = this.toKeyIdentifier(keyCode);
    return !!!this._keymap[id] && !!this._lastmap[id];
  }

}

export { Keyboard };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5Ym9hcmQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9pbnB1dC9rZXlib2FyZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEZWJ1ZyB9IGZyb20gJy4uL2NvcmUvZGVidWcuanMnO1xuaW1wb3J0IHsgRXZlbnRIYW5kbGVyIH0gZnJvbSAnLi4vY29yZS9ldmVudC1oYW5kbGVyLmpzJztcblxuaW1wb3J0IHsgS2V5Ym9hcmRFdmVudCB9IGZyb20gJy4va2V5Ym9hcmQtZXZlbnQuanMnO1xuXG4vLyBpbnRlcm5hbCBnbG9iYWwga2V5Ym9hcmQgZXZlbnRzXG5jb25zdCBfa2V5Ym9hcmRFdmVudCA9IG5ldyBLZXlib2FyZEV2ZW50KCk7XG5cbi8qKlxuICogQ29udmVydCBhIGJyb3dzZXIga2V5Ym9hcmQgZXZlbnQgdG8gYSBQbGF5Q2FudmFzIGtleWJvYXJkIGV2ZW50LlxuICpcbiAqIEBwYXJhbSB7Z2xvYmFsVGhpcy5LZXlib2FyZEV2ZW50fSBldmVudCAtIEEgYnJvd3NlciBrZXlib2FyZCBldmVudC5cbiAqIEByZXR1cm5zIHtLZXlib2FyZEV2ZW50fSBBIFBsYXlDYW52YXMga2V5Ym9hcmQgZXZlbnQuXG4gKiBAaWdub3JlXG4gKi9cbmZ1bmN0aW9uIG1ha2VLZXlib2FyZEV2ZW50KGV2ZW50KSB7XG4gICAgX2tleWJvYXJkRXZlbnQua2V5ID0gZXZlbnQua2V5Q29kZTtcbiAgICBfa2V5Ym9hcmRFdmVudC5lbGVtZW50ID0gZXZlbnQudGFyZ2V0O1xuICAgIF9rZXlib2FyZEV2ZW50LmV2ZW50ID0gZXZlbnQ7XG4gICAgcmV0dXJuIF9rZXlib2FyZEV2ZW50O1xufVxuXG4vKipcbiAqIENvbnZlcnQgYSBzdHJpbmcgb3Iga2V5Y29kZSB0byBhIGtleWNvZGUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBzIC0gRWl0aGVyIGEgY2hhcmFjdGVyIGNvZGUgb3IgdGhlIGtleSBjaGFyYWN0ZXIuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgY2hhcmFjdGVyIGNvZGUuXG4gKiBAaWdub3JlXG4gKi9cbmZ1bmN0aW9uIHRvS2V5Q29kZShzKSB7XG4gICAgaWYgKHR5cGVvZiBzID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gcy50b1VwcGVyQ2FzZSgpLmNoYXJDb2RlQXQoMCk7XG4gICAgfVxuICAgIHJldHVybiBzO1xufVxuXG5jb25zdCBfa2V5Q29kZVRvS2V5SWRlbnRpZmllciA9IHtcbiAgICAnOSc6ICdUYWInLFxuICAgICcxMyc6ICdFbnRlcicsXG4gICAgJzE2JzogJ1NoaWZ0JyxcbiAgICAnMTcnOiAnQ29udHJvbCcsXG4gICAgJzE4JzogJ0FsdCcsXG4gICAgJzI3JzogJ0VzY2FwZScsXG5cbiAgICAnMzcnOiAnTGVmdCcsXG4gICAgJzM4JzogJ1VwJyxcbiAgICAnMzknOiAnUmlnaHQnLFxuICAgICc0MCc6ICdEb3duJyxcblxuICAgICc0Nic6ICdEZWxldGUnLFxuXG4gICAgJzkxJzogJ1dpbidcbn07XG5cbi8qKlxuICogQSBLZXlib2FyZCBkZXZpY2UgYm91bmQgdG8gYW4gRWxlbWVudC4gQWxsb3dzIHlvdSB0byBkZXRlY3QgdGhlIHN0YXRlIG9mIHRoZSBrZXkgcHJlc3Nlcy4gTm90ZVxuICogdGhhdCB0aGUgS2V5Ym9hcmQgb2JqZWN0IG11c3QgYmUgYXR0YWNoZWQgdG8gYW4gRWxlbWVudCBiZWZvcmUgaXQgY2FuIGRldGVjdCBhbnkga2V5IHByZXNzZXMuXG4gKlxuICogQGF1Z21lbnRzIEV2ZW50SGFuZGxlclxuICovXG5jbGFzcyBLZXlib2FyZCBleHRlbmRzIEV2ZW50SGFuZGxlciB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IEtleWJvYXJkIGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtFbGVtZW50fFdpbmRvd30gW2VsZW1lbnRdIC0gRWxlbWVudCB0byBhdHRhY2ggS2V5Ym9hcmQgdG8uIE5vdGUgdGhhdCBlbGVtZW50cyBsaWtlXG4gICAgICogJmx0O2RpdiZndDsgY2FuJ3QgYWNjZXB0IGZvY3VzIGJ5IGRlZmF1bHQuIFRvIHVzZSBrZXlib2FyZCBldmVudHMgb24gYW4gZWxlbWVudCBsaWtlIHRoaXMgaXRcbiAgICAgKiBtdXN0IGhhdmUgYSB2YWx1ZSBvZiAndGFiaW5kZXgnIGUuZy4gdGFiaW5kZXg9XCIwXCIuIFNlZVxuICAgICAqIFtoZXJlXShodHRwOi8vd3d3LnczLm9yZy9XQUkvR0wvV0NBRzIwL1dELVdDQUcyMC1URUNIUy9TQ1IyOS5odG1sKSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gLSBPcHRpb25hbCBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnByZXZlbnREZWZhdWx0XSAtIENhbGwgcHJldmVudERlZmF1bHQoKSBpbiBrZXkgZXZlbnQgaGFuZGxlcnMuXG4gICAgICogVGhpcyBzdG9wcyB0aGUgZGVmYXVsdCBhY3Rpb24gb2YgdGhlIGV2ZW50IG9jY3VycmluZy4gZS5nLiBDdHJsK1Qgd2lsbCBub3Qgb3BlbiBhIG5ld1xuICAgICAqIGJyb3dzZXIgdGFiLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuc3RvcFByb3BhZ2F0aW9uXSAtIENhbGwgc3RvcFByb3BhZ2F0aW9uKCkgaW4ga2V5IGV2ZW50IGhhbmRsZXJzLlxuICAgICAqIFRoaXMgc3RvcHMgdGhlIGV2ZW50IGJ1YmJsaW5nIHVwIHRoZSBET00gc28gbm8gcGFyZW50IGhhbmRsZXJzIHdpbGwgYmUgbm90aWZpZWQgb2YgdGhlXG4gICAgICogZXZlbnQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBhdHRhY2gga2V5Ym9hcmQgbGlzdGVuZXJzIHRvIHRoZSB3aW5kb3dcbiAgICAgKiB2YXIga2V5Ym9hcmQgPSBuZXcgcGMuS2V5Ym9hcmQod2luZG93KTtcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcblxuICAgICAgICB0aGlzLl9rZXlEb3duSGFuZGxlciA9IHRoaXMuX2hhbmRsZUtleURvd24uYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5fa2V5VXBIYW5kbGVyID0gdGhpcy5faGFuZGxlS2V5VXAuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5fa2V5UHJlc3NIYW5kbGVyID0gdGhpcy5faGFuZGxlS2V5UHJlc3MuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5fdmlzaWJpbGl0eUNoYW5nZUhhbmRsZXIgPSB0aGlzLl9oYW5kbGVWaXNpYmlsaXR5Q2hhbmdlLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuX3dpbmRvd0JsdXJIYW5kbGVyID0gdGhpcy5faGFuZGxlV2luZG93Qmx1ci5iaW5kKHRoaXMpO1xuXG4gICAgICAgIHRoaXMuX2tleW1hcCA9IHt9O1xuICAgICAgICB0aGlzLl9sYXN0bWFwID0ge307XG5cbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuYXR0YWNoKGVsZW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wcmV2ZW50RGVmYXVsdCA9IG9wdGlvbnMucHJldmVudERlZmF1bHQgfHwgZmFsc2U7XG4gICAgICAgIHRoaXMuc3RvcFByb3BhZ2F0aW9uID0gb3B0aW9ucy5zdG9wUHJvcGFnYXRpb24gfHwgZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiBhIGtleSBpcyBwcmVzc2VkLlxuICAgICAqXG4gICAgICogQGV2ZW50IEtleWJvYXJkI2tleWRvd25cbiAgICAgKiBAcGFyYW0ge0tleWJvYXJkRXZlbnR9IGV2ZW50IC0gVGhlIEtleWJvYXJkIGV2ZW50IG9iamVjdC4gTm90ZSwgdGhpcyBldmVudCBpcyBvbmx5IHZhbGlkIGZvciB0aGUgY3VycmVudCBjYWxsYmFjay5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciBvbktleURvd24gPSBmdW5jdGlvbiAoZSkge1xuICAgICAqICAgICBpZiAoZS5rZXkgPT09IHBjLktFWV9TUEFDRSkge1xuICAgICAqICAgICAgICAgLy8gc3BhY2Uga2V5IHByZXNzZWRcbiAgICAgKiAgICAgfVxuICAgICAqICAgICBlLmV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIFVzZSBvcmlnaW5hbCBicm93c2VyIGV2ZW50IHRvIHByZXZlbnQgYnJvd3NlciBhY3Rpb24uXG4gICAgICogfTtcbiAgICAgKiBhcHAua2V5Ym9hcmQub24oXCJrZXlkb3duXCIsIG9uS2V5RG93biwgdGhpcyk7XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIGEga2V5IGlzIHJlbGVhc2VkLlxuICAgICAqXG4gICAgICogQGV2ZW50IEtleWJvYXJkI2tleXVwXG4gICAgICogQHBhcmFtIHtLZXlib2FyZEV2ZW50fSBldmVudCAtIFRoZSBLZXlib2FyZCBldmVudCBvYmplY3QuIE5vdGUsIHRoaXMgZXZlbnQgaXMgb25seSB2YWxpZCBmb3IgdGhlIGN1cnJlbnQgY2FsbGJhY2suXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB2YXIgb25LZXlVcCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICogICAgIGlmIChlLmtleSA9PT0gcGMuS0VZX1NQQUNFKSB7XG4gICAgICogICAgICAgICAvLyBzcGFjZSBrZXkgcmVsZWFzZWRcbiAgICAgKiAgICAgfVxuICAgICAqICAgICBlLmV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIFVzZSBvcmlnaW5hbCBicm93c2VyIGV2ZW50IHRvIHByZXZlbnQgYnJvd3NlciBhY3Rpb24uXG4gICAgICogfTtcbiAgICAgKiBhcHAua2V5Ym9hcmQub24oXCJrZXl1cFwiLCBvbktleVVwLCB0aGlzKTtcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEF0dGFjaCB0aGUga2V5Ym9hcmQgZXZlbnQgaGFuZGxlcnMgdG8gYW4gRWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RWxlbWVudHxXaW5kb3d9IGVsZW1lbnQgLSBUaGUgZWxlbWVudCB0byBsaXN0ZW4gZm9yIGtleWJvYXJkIGV2ZW50cyBvbi5cbiAgICAgKi9cbiAgICBhdHRhY2goZWxlbWVudCkge1xuICAgICAgICBpZiAodGhpcy5fZWxlbWVudCkge1xuICAgICAgICAgICAgLy8gcmVtb3ZlIHByZXZpb3VzIGF0dGFjaGVkIGVsZW1lbnRcbiAgICAgICAgICAgIHRoaXMuZGV0YWNoKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5fa2V5RG93bkhhbmRsZXIsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlwcmVzcycsIHRoaXMuX2tleVByZXNzSGFuZGxlciwgZmFsc2UpO1xuICAgICAgICB0aGlzLl9lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5fa2V5VXBIYW5kbGVyLCBmYWxzZSk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCB0aGlzLl92aXNpYmlsaXR5Q2hhbmdlSGFuZGxlciwgZmFsc2UpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIHRoaXMuX3dpbmRvd0JsdXJIYW5kbGVyLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGV0YWNoIHRoZSBrZXlib2FyZCBldmVudCBoYW5kbGVycyBmcm9tIHRoZSBlbGVtZW50IGl0IGlzIGF0dGFjaGVkIHRvLlxuICAgICAqL1xuICAgIGRldGFjaCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9lbGVtZW50KSB7XG4gICAgICAgICAgICBEZWJ1Zy53YXJuKCdVbmFibGUgdG8gZGV0YWNoIGtleWJvYXJkLiBJdCBpcyBub3QgYXR0YWNoZWQgdG8gYW4gZWxlbWVudC4nKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX2tleURvd25IYW5kbGVyKTtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlwcmVzcycsIHRoaXMuX2tleVByZXNzSGFuZGxlcik7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLl9rZXlVcEhhbmRsZXIpO1xuICAgICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcblxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgdGhpcy5fdmlzaWJpbGl0eUNoYW5nZUhhbmRsZXIsIGZhbHNlKTtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2JsdXInLCB0aGlzLl93aW5kb3dCbHVySGFuZGxlciwgZmFsc2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnQgYSBrZXkgY29kZSBpbnRvIGEga2V5IGlkZW50aWZpZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0ga2V5Q29kZSAtIFRoZSBrZXkgY29kZS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUga2V5IGlkZW50aWZpZXIuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB0b0tleUlkZW50aWZpZXIoa2V5Q29kZSkge1xuICAgICAgICBrZXlDb2RlID0gdG9LZXlDb2RlKGtleUNvZGUpO1xuXG4gICAgICAgIGNvbnN0IGlkID0gX2tleUNvZGVUb0tleUlkZW50aWZpZXJba2V5Q29kZS50b1N0cmluZygpXTtcbiAgICAgICAgaWYgKGlkKSB7XG4gICAgICAgICAgICByZXR1cm4gaWQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDb252ZXJ0IHRvIGhleCBhbmQgYWRkIGxlYWRpbmcgMCdzXG4gICAgICAgIGxldCBoZXggPSBrZXlDb2RlLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuICAgICAgICBjb25zdCBsZW5ndGggPSBoZXgubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBjb3VudCA9IDA7IGNvdW50IDwgKDQgLSBsZW5ndGgpOyBjb3VudCsrKSB7XG4gICAgICAgICAgICBoZXggPSAnMCcgKyBoZXg7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJ1UrJyArIGhleDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcm9jZXNzIHRoZSBicm93c2VyIGtleWRvd24gZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2dsb2JhbFRoaXMuS2V5Ym9hcmRFdmVudH0gZXZlbnQgLSBUaGUgYnJvd3NlciBrZXlib2FyZCBldmVudC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9oYW5kbGVLZXlEb3duKGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IGNvZGUgPSBldmVudC5rZXlDb2RlIHx8IGV2ZW50LmNoYXJDb2RlO1xuXG4gICAgICAgIC8vIEdvb2dsZSBDaHJvbWUgYXV0by1maWxsaW5nIG9mIGxvZ2luIGZvcm1zIGNvdWxkIHJhaXNlIGEgbWFsZm9ybWVkIGV2ZW50XG4gICAgICAgIGlmIChjb2RlID09PSB1bmRlZmluZWQpIHJldHVybjtcblxuICAgICAgICBjb25zdCBpZCA9IHRoaXMudG9LZXlJZGVudGlmaWVyKGNvZGUpO1xuXG4gICAgICAgIHRoaXMuX2tleW1hcFtpZF0gPSB0cnVlO1xuXG4gICAgICAgIHRoaXMuZmlyZSgna2V5ZG93bicsIG1ha2VLZXlib2FyZEV2ZW50KGV2ZW50KSk7XG5cbiAgICAgICAgaWYgKHRoaXMucHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByb2Nlc3MgdGhlIGJyb3dzZXIga2V5dXAgZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2dsb2JhbFRoaXMuS2V5Ym9hcmRFdmVudH0gZXZlbnQgLSBUaGUgYnJvd3NlciBrZXlib2FyZCBldmVudC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9oYW5kbGVLZXlVcChldmVudCkge1xuICAgICAgICBjb25zdCBjb2RlID0gZXZlbnQua2V5Q29kZSB8fCBldmVudC5jaGFyQ29kZTtcblxuICAgICAgICAvLyBHb29nbGUgQ2hyb21lIGF1dG8tZmlsbGluZyBvZiBsb2dpbiBmb3JtcyBjb3VsZCByYWlzZSBhIG1hbGZvcm1lZCBldmVudFxuICAgICAgICBpZiAoY29kZSA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgaWQgPSB0aGlzLnRvS2V5SWRlbnRpZmllcihjb2RlKTtcblxuICAgICAgICBkZWxldGUgdGhpcy5fa2V5bWFwW2lkXTtcblxuICAgICAgICB0aGlzLmZpcmUoJ2tleXVwJywgbWFrZUtleWJvYXJkRXZlbnQoZXZlbnQpKTtcblxuICAgICAgICBpZiAodGhpcy5wcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zdG9wUHJvcGFnYXRpb24pIHtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUHJvY2VzcyB0aGUgYnJvd3NlciBrZXlwcmVzcyBldmVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Z2xvYmFsVGhpcy5LZXlib2FyZEV2ZW50fSBldmVudCAtIFRoZSBicm93c2VyIGtleWJvYXJkIGV2ZW50LlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2hhbmRsZUtleVByZXNzKGV2ZW50KSB7XG4gICAgICAgIHRoaXMuZmlyZSgna2V5cHJlc3MnLCBtYWtlS2V5Ym9hcmRFdmVudChldmVudCkpO1xuXG4gICAgICAgIGlmICh0aGlzLnByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnN0b3BQcm9wYWdhdGlvbikge1xuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGUgdGhlIGJyb3dzZXIgdmlzaWJpbGl0eWNoYW5nZSBldmVudC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2hhbmRsZVZpc2liaWxpdHlDaGFuZ2UoKSB7XG4gICAgICAgIGlmIChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT09ICdoaWRkZW4nKSB7XG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVXaW5kb3dCbHVyKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBIYW5kbGUgdGhlIGJyb3dzZXIgYmx1ciBldmVudC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2hhbmRsZVdpbmRvd0JsdXIoKSB7XG4gICAgICAgIHRoaXMuX2tleW1hcCA9IHt9O1xuICAgICAgICB0aGlzLl9sYXN0bWFwID0ge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbGVkIG9uY2UgcGVyIGZyYW1lIHRvIHVwZGF0ZSBpbnRlcm5hbCBzdGF0ZS5cbiAgICAgKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICB1cGRhdGUoKSB7XG4gICAgICAgIC8vIGNsZWFyIGFsbCBrZXlzXG4gICAgICAgIGZvciAoY29uc3QgcHJvcCBpbiB0aGlzLl9sYXN0bWFwKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fbGFzdG1hcFtwcm9wXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoY29uc3QgcHJvcCBpbiB0aGlzLl9rZXltYXApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9rZXltYXAuaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sYXN0bWFwW3Byb3BdID0gdGhpcy5fa2V5bWFwW3Byb3BdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRydWUgaWYgdGhlIGtleSBpcyBjdXJyZW50bHkgZG93bi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBrZXkgLSBUaGUga2V5Q29kZSBvZiB0aGUga2V5IHRvIHRlc3QuIFNlZSB0aGUgS0VZXyogY29uc3RhbnRzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBrZXkgd2FzIHByZXNzZWQsIGZhbHNlIGlmIG5vdC5cbiAgICAgKi9cbiAgICBpc1ByZXNzZWQoa2V5KSB7XG4gICAgICAgIGNvbnN0IGtleUNvZGUgPSB0b0tleUNvZGUoa2V5KTtcbiAgICAgICAgY29uc3QgaWQgPSB0aGlzLnRvS2V5SWRlbnRpZmllcihrZXlDb2RlKTtcblxuICAgICAgICByZXR1cm4gISEodGhpcy5fa2V5bWFwW2lkXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBrZXkgd2FzIHByZXNzZWQgc2luY2UgdGhlIGxhc3QgdXBkYXRlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGtleSAtIFRoZSBrZXlDb2RlIG9mIHRoZSBrZXkgdG8gdGVzdC4gU2VlIHRoZSBLRVlfKiBjb25zdGFudHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGtleSB3YXMgcHJlc3NlZC5cbiAgICAgKi9cbiAgICB3YXNQcmVzc2VkKGtleSkge1xuICAgICAgICBjb25zdCBrZXlDb2RlID0gdG9LZXlDb2RlKGtleSk7XG4gICAgICAgIGNvbnN0IGlkID0gdGhpcy50b0tleUlkZW50aWZpZXIoa2V5Q29kZSk7XG5cbiAgICAgICAgcmV0dXJuICghISh0aGlzLl9rZXltYXBbaWRdKSAmJiAhISEodGhpcy5fbGFzdG1hcFtpZF0pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGtleSB3YXMgcmVsZWFzZWQgc2luY2UgdGhlIGxhc3QgdXBkYXRlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGtleSAtIFRoZSBrZXlDb2RlIG9mIHRoZSBrZXkgdG8gdGVzdC4gU2VlIHRoZSBLRVlfKiBjb25zdGFudHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIGtleSB3YXMgcHJlc3NlZC5cbiAgICAgKi9cbiAgICB3YXNSZWxlYXNlZChrZXkpIHtcbiAgICAgICAgY29uc3Qga2V5Q29kZSA9IHRvS2V5Q29kZShrZXkpO1xuICAgICAgICBjb25zdCBpZCA9IHRoaXMudG9LZXlJZGVudGlmaWVyKGtleUNvZGUpO1xuXG4gICAgICAgIHJldHVybiAoISEhKHRoaXMuX2tleW1hcFtpZF0pICYmICEhKHRoaXMuX2xhc3RtYXBbaWRdKSk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBLZXlib2FyZCB9O1xuIl0sIm5hbWVzIjpbIl9rZXlib2FyZEV2ZW50IiwiS2V5Ym9hcmRFdmVudCIsIm1ha2VLZXlib2FyZEV2ZW50IiwiZXZlbnQiLCJrZXkiLCJrZXlDb2RlIiwiZWxlbWVudCIsInRhcmdldCIsInRvS2V5Q29kZSIsInMiLCJ0b1VwcGVyQ2FzZSIsImNoYXJDb2RlQXQiLCJfa2V5Q29kZVRvS2V5SWRlbnRpZmllciIsIktleWJvYXJkIiwiRXZlbnRIYW5kbGVyIiwiY29uc3RydWN0b3IiLCJvcHRpb25zIiwiX2VsZW1lbnQiLCJfa2V5RG93bkhhbmRsZXIiLCJfaGFuZGxlS2V5RG93biIsImJpbmQiLCJfa2V5VXBIYW5kbGVyIiwiX2hhbmRsZUtleVVwIiwiX2tleVByZXNzSGFuZGxlciIsIl9oYW5kbGVLZXlQcmVzcyIsIl92aXNpYmlsaXR5Q2hhbmdlSGFuZGxlciIsIl9oYW5kbGVWaXNpYmlsaXR5Q2hhbmdlIiwiX3dpbmRvd0JsdXJIYW5kbGVyIiwiX2hhbmRsZVdpbmRvd0JsdXIiLCJfa2V5bWFwIiwiX2xhc3RtYXAiLCJhdHRhY2giLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImRldGFjaCIsImFkZEV2ZW50TGlzdGVuZXIiLCJkb2N1bWVudCIsIndpbmRvdyIsIkRlYnVnIiwid2FybiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ0b0tleUlkZW50aWZpZXIiLCJpZCIsInRvU3RyaW5nIiwiaGV4IiwibGVuZ3RoIiwiY291bnQiLCJjb2RlIiwiY2hhckNvZGUiLCJ1bmRlZmluZWQiLCJmaXJlIiwidmlzaWJpbGl0eVN0YXRlIiwidXBkYXRlIiwicHJvcCIsImhhc093blByb3BlcnR5IiwiaXNQcmVzc2VkIiwid2FzUHJlc3NlZCIsIndhc1JlbGVhc2VkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFNQSxNQUFNQSxjQUFjLEdBQUcsSUFBSUMsYUFBSixFQUF2QixDQUFBOztBQVNBLFNBQVNDLGlCQUFULENBQTJCQyxLQUEzQixFQUFrQztBQUM5QkgsRUFBQUEsY0FBYyxDQUFDSSxHQUFmLEdBQXFCRCxLQUFLLENBQUNFLE9BQTNCLENBQUE7QUFDQUwsRUFBQUEsY0FBYyxDQUFDTSxPQUFmLEdBQXlCSCxLQUFLLENBQUNJLE1BQS9CLENBQUE7RUFDQVAsY0FBYyxDQUFDRyxLQUFmLEdBQXVCQSxLQUF2QixDQUFBO0FBQ0EsRUFBQSxPQUFPSCxjQUFQLENBQUE7QUFDSCxDQUFBOztBQVNELFNBQVNRLFNBQVQsQ0FBbUJDLENBQW5CLEVBQXNCO0FBQ2xCLEVBQUEsSUFBSSxPQUFPQSxDQUFQLEtBQWEsUUFBakIsRUFBMkI7QUFDdkIsSUFBQSxPQUFPQSxDQUFDLENBQUNDLFdBQUYsR0FB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
