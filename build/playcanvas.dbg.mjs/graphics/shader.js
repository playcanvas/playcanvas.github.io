/**
 * @license
 * PlayCanvas Engine v1.57.1 revision 256dd83c2 (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { TRACEID_SHADER_ALLOC } from '../core/constants.js';
import { Debug } from '../core/debug.js';
import { Preprocessor } from '../core/preprocessor.js';

let id = 0;

class Shader {
  constructor(graphicsDevice, definition) {
    this.meshUniformBufferFormat = void 0;
    this.meshBindGroupFormat = void 0;
    this.id = id++;
    this.device = graphicsDevice;
    this.definition = definition;
    this.name = definition.name || 'Untitled';
    Debug.assert(definition.vshader, 'No vertex shader has been specified when creating a shader.');
    Debug.assert(definition.fshader, 'No fragment shader has been specified when creating a shader.');
    definition.vshader = Preprocessor.run(definition.vshader);
    definition.fshader = Preprocessor.run(definition.fshader);
    this.init();
    this.impl = graphicsDevice.createShaderImpl(this);
    Debug.trace(TRACEID_SHADER_ALLOC, `Alloc: Id ${this.id} ${this.name}`, {
      instance: this
    });
  }

  init() {
    this.ready = false;
    this.failed = false;
  }

  destroy() {
    Debug.trace(TRACEID_SHADER_ALLOC, `DeAlloc: Id ${this.id} ${this.name}`);
    this.impl.destroy(this);
  }

  loseContext() {
    this.init();
    this.impl.loseContext();
  }

  restoreContext() {
    this.impl.restoreContext(this.device, this);
  }

}

export { Shader };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
