/**
 * @license
 * PlayCanvas Engine v1.62.0 revision 818511d2b (DEBUG PROFILER)
 * Copyright 2011-2023 PlayCanvas Ltd. All rights reserved.
 */
import { math } from '../../../core/math/math.js';
import { ORIENTATION_HORIZONTAL } from '../../../scene/constants.js';
import { Component } from '../component.js';
import { ElementDragHelper } from '../element/element-drag-helper.js';
import { EntityReference } from '../../utils/entity-reference.js';

/**
 * A ScrollbarComponent enables a group of entities to behave like a draggable scrollbar.
 *
 * @property {number} orientation Whether the scrollbar moves horizontally or vertically. Can be:
 *
 * - {@link ORIENTATION_HORIZONTAL}: The scrollbar animates in the horizontal axis.
 * - {@link ORIENTATION_VERTICAL}: The scrollbar animates in the vertical axis.
 *
 * Defaults to {@link ORIENTATION_HORIZONTAL}.
 * @property {number} value The current position value of the scrollbar, in the range 0 to 1.
 * Defaults to 0.
 * @property {number} handleSize The size of the handle relative to the size of the track, in the
 * range 0 to 1. For a vertical scrollbar, a value of 1 means that the handle will take up the full
 * height of the track.
 * @property {import('../../entity.js').Entity} handleEntity The entity to be used as the scrollbar
 * handle. This entity must have a Scrollbar component.
 * @augments Component
 */
class ScrollbarComponent extends Component {
  /**
   * Create a new ScrollbarComponent.
   *
   * @param {import('./system.js').ScrollbarComponentSystem} system - The ComponentSystem that
   * created this Component.
   * @param {import('../../entity.js').Entity} entity - The Entity that this Component is
   * attached to.
   */
  constructor(system, entity) {
    super(system, entity);
    this._handleReference = new EntityReference(this, 'handleEntity', {
      'element#gain': this._onHandleElementGain,
      'element#lose': this._onHandleElementLose,
      'element#set:anchor': this._onSetHandleAlignment,
      'element#set:margin': this._onSetHandleAlignment,
      'element#set:pivot': this._onSetHandleAlignment
    });
    this._toggleLifecycleListeners('on');
  }

  /**
   * Fired whenever the scroll value changes.
   *
   * @event ScrollbarComponent#set:value
   * @param {number} value - The current scroll value.
   */

  /**
   * @param {string} onOrOff - 'on' or 'off'.
   * @private
   */
  _toggleLifecycleListeners(onOrOff) {
    this[onOrOff]('set_value', this._onSetValue, this);
    this[onOrOff]('set_handleSize', this._onSetHandleSize, this);
    this[onOrOff]('set_orientation', this._onSetOrientation, this);

    // TODO Handle scrollwheel events
  }

  _onHandleElementGain() {
    this._destroyDragHelper();
    this._handleDragHelper = new ElementDragHelper(this._handleReference.entity.element, this._getAxis());
    this._handleDragHelper.on('drag:move', this._onHandleDrag, this);
    this._updateHandlePositionAndSize();
  }
  _onHandleElementLose() {
    this._destroyDragHelper();
  }
  _onHandleDrag(position) {
    if (this._handleReference.entity && this.enabled && this.entity.enabled) {
      this.value = this._handlePositionToScrollValue(position[this._getAxis()]);
    }
  }
  _onSetValue(name, oldValue, newValue) {
    if (Math.abs(newValue - oldValue) > 1e-5) {
      this.data.value = math.clamp(newValue, 0, 1);
      this._updateHandlePositionAndSize();
      this.fire('set:value', this.data.value);
    }
  }
  _onSetHandleSize(name, oldValue, newValue) {
    if (Math.abs(newValue - oldValue) > 1e-5) {
      this.data.handleSize = math.clamp(newValue, 0, 1);
      this._updateHandlePositionAndSize();
    }
  }
  _onSetHandleAlignment() {
    this._updateHandlePositionAndSize();
  }
  _onSetOrientation(name, oldValue, newValue) {
    if (newValue !== oldValue && this._handleReference.hasComponent('element')) {
      this._handleReference.entity.element[this._getOppositeDimension()] = 0;
    }
  }
  _updateHandlePositionAndSize() {
    const handleEntity = this._handleReference.entity;
    const handleElement = handleEntity && handleEntity.element;
    if (handleEntity) {
      const position = handleEntity.getLocalPosition();
      position[this._getAxis()] = this._getHandlePosition();
      this._handleReference.entity.setLocalPosition(position);
    }
    if (handleElement) {
      handleElement[this._getDimension()] = this._getHandleLength();
    }
  }
  _handlePositionToScrollValue(handlePosition) {
    return handlePosition * this._getSign() / this._getUsableTrackLength();
  }
  _scrollValueToHandlePosition(value) {
    return value * this._getSign() * this._getUsableTrackLength();
  }
  _getUsableTrackLength() {
    return Math.max(this._getTrackLength() - this._getHandleLength(), 0.001);
  }
  _getTrackLength() {
    if (this.entity.element) {
      return this.orientation === ORIENTATION_HORIZONTAL ? this.entity.element.calculatedWidth : this.entity.element.calculatedHeight;
    }
    return 0;
  }
  _getHandleLength() {
    return this._getTrackLength() * this.handleSize;
  }
  _getHandlePosition() {
    return this._scrollValueToHandlePosition(this.value);
  }
  _getSign() {
    return this.orientation === ORIENTATION_HORIZONTAL ? 1 : -1;
  }
  _getAxis() {
    return this.orientation === ORIENTATION_HORIZONTAL ? 'x' : 'y';
  }
  _getDimension() {
    return this.orientation === ORIENTATION_HORIZONTAL ? 'width' : 'height';
  }
  _getOppositeDimension() {
    return this.orientation === ORIENTATION_HORIZONTAL ? 'height' : 'width';
  }
  _destroyDragHelper() {
    if (this._handleDragHelper) {
      this._handleDragHelper.destroy();
    }
  }
  _setHandleDraggingEnabled(enabled) {
    if (this._handleDragHelper) {
      this._handleDragHelper.enabled = enabled;
    }
  }
  onEnable() {
    this._handleReference.onParentComponentEnable();
    this._setHandleDraggingEnabled(true);
  }
  onDisable() {
    this._setHandleDraggingEnabled(false);
  }
  onRemove() {
    this._destroyDragHelper();
    this._toggleLifecycleListeners('off');
  }
}

export { ScrollbarComponent };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvZnJhbWV3b3JrL2NvbXBvbmVudHMvc2Nyb2xsYmFyL2NvbXBvbmVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtYXRoIH0gZnJvbSAnLi4vLi4vLi4vY29yZS9tYXRoL21hdGguanMnO1xuXG5pbXBvcnQgeyBPUklFTlRBVElPTl9IT1JJWk9OVEFMIH0gZnJvbSAnLi4vLi4vLi4vc2NlbmUvY29uc3RhbnRzLmpzJztcblxuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50LmpzJztcblxuaW1wb3J0IHsgRWxlbWVudERyYWdIZWxwZXIgfSBmcm9tICcuLi9lbGVtZW50L2VsZW1lbnQtZHJhZy1oZWxwZXIuanMnO1xuXG5pbXBvcnQgeyBFbnRpdHlSZWZlcmVuY2UgfSBmcm9tICcuLi8uLi91dGlscy9lbnRpdHktcmVmZXJlbmNlLmpzJztcblxuLyoqXG4gKiBBIFNjcm9sbGJhckNvbXBvbmVudCBlbmFibGVzIGEgZ3JvdXAgb2YgZW50aXRpZXMgdG8gYmVoYXZlIGxpa2UgYSBkcmFnZ2FibGUgc2Nyb2xsYmFyLlxuICpcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBvcmllbnRhdGlvbiBXaGV0aGVyIHRoZSBzY3JvbGxiYXIgbW92ZXMgaG9yaXpvbnRhbGx5IG9yIHZlcnRpY2FsbHkuIENhbiBiZTpcbiAqXG4gKiAtIHtAbGluayBPUklFTlRBVElPTl9IT1JJWk9OVEFMfTogVGhlIHNjcm9sbGJhciBhbmltYXRlcyBpbiB0aGUgaG9yaXpvbnRhbCBheGlzLlxuICogLSB7QGxpbmsgT1JJRU5UQVRJT05fVkVSVElDQUx9OiBUaGUgc2Nyb2xsYmFyIGFuaW1hdGVzIGluIHRoZSB2ZXJ0aWNhbCBheGlzLlxuICpcbiAqIERlZmF1bHRzIHRvIHtAbGluayBPUklFTlRBVElPTl9IT1JJWk9OVEFMfS5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB2YWx1ZSBUaGUgY3VycmVudCBwb3NpdGlvbiB2YWx1ZSBvZiB0aGUgc2Nyb2xsYmFyLCBpbiB0aGUgcmFuZ2UgMCB0byAxLlxuICogRGVmYXVsdHMgdG8gMC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBoYW5kbGVTaXplIFRoZSBzaXplIG9mIHRoZSBoYW5kbGUgcmVsYXRpdmUgdG8gdGhlIHNpemUgb2YgdGhlIHRyYWNrLCBpbiB0aGVcbiAqIHJhbmdlIDAgdG8gMS4gRm9yIGEgdmVydGljYWwgc2Nyb2xsYmFyLCBhIHZhbHVlIG9mIDEgbWVhbnMgdGhhdCB0aGUgaGFuZGxlIHdpbGwgdGFrZSB1cCB0aGUgZnVsbFxuICogaGVpZ2h0IG9mIHRoZSB0cmFjay5cbiAqIEBwcm9wZXJ0eSB7aW1wb3J0KCcuLi8uLi9lbnRpdHkuanMnKS5FbnRpdHl9IGhhbmRsZUVudGl0eSBUaGUgZW50aXR5IHRvIGJlIHVzZWQgYXMgdGhlIHNjcm9sbGJhclxuICogaGFuZGxlLiBUaGlzIGVudGl0eSBtdXN0IGhhdmUgYSBTY3JvbGxiYXIgY29tcG9uZW50LlxuICogQGF1Z21lbnRzIENvbXBvbmVudFxuICovXG5jbGFzcyBTY3JvbGxiYXJDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBTY3JvbGxiYXJDb21wb25lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2ltcG9ydCgnLi9zeXN0ZW0uanMnKS5TY3JvbGxiYXJDb21wb25lbnRTeXN0ZW19IHN5c3RlbSAtIFRoZSBDb21wb25lbnRTeXN0ZW0gdGhhdFxuICAgICAqIGNyZWF0ZWQgdGhpcyBDb21wb25lbnQuXG4gICAgICogQHBhcmFtIHtpbXBvcnQoJy4uLy4uL2VudGl0eS5qcycpLkVudGl0eX0gZW50aXR5IC0gVGhlIEVudGl0eSB0aGF0IHRoaXMgQ29tcG9uZW50IGlzXG4gICAgICogYXR0YWNoZWQgdG8uXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioc3lzdGVtLCBlbnRpdHkpIHtcbiAgICAgICAgc3VwZXIoc3lzdGVtLCBlbnRpdHkpO1xuXG4gICAgICAgIHRoaXMuX2hhbmRsZVJlZmVyZW5jZSA9IG5ldyBFbnRpdHlSZWZlcmVuY2UodGhpcywgJ2hhbmRsZUVudGl0eScsIHtcbiAgICAgICAgICAgICdlbGVtZW50I2dhaW4nOiB0aGlzLl9vbkhhbmRsZUVsZW1lbnRHYWluLFxuICAgICAgICAgICAgJ2VsZW1lbnQjbG9zZSc6IHRoaXMuX29uSGFuZGxlRWxlbWVudExvc2UsXG4gICAgICAgICAgICAnZWxlbWVudCNzZXQ6YW5jaG9yJzogdGhpcy5fb25TZXRIYW5kbGVBbGlnbm1lbnQsXG4gICAgICAgICAgICAnZWxlbWVudCNzZXQ6bWFyZ2luJzogdGhpcy5fb25TZXRIYW5kbGVBbGlnbm1lbnQsXG4gICAgICAgICAgICAnZWxlbWVudCNzZXQ6cGl2b3QnOiB0aGlzLl9vblNldEhhbmRsZUFsaWdubWVudFxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLl90b2dnbGVMaWZlY3ljbGVMaXN0ZW5lcnMoJ29uJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbmV2ZXIgdGhlIHNjcm9sbCB2YWx1ZSBjaGFuZ2VzLlxuICAgICAqXG4gICAgICogQGV2ZW50IFNjcm9sbGJhckNvbXBvbmVudCNzZXQ6dmFsdWVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSBUaGUgY3VycmVudCBzY3JvbGwgdmFsdWUuXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gb25Pck9mZiAtICdvbicgb3IgJ29mZicuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfdG9nZ2xlTGlmZWN5Y2xlTGlzdGVuZXJzKG9uT3JPZmYpIHtcbiAgICAgICAgdGhpc1tvbk9yT2ZmXSgnc2V0X3ZhbHVlJywgdGhpcy5fb25TZXRWYWx1ZSwgdGhpcyk7XG4gICAgICAgIHRoaXNbb25Pck9mZl0oJ3NldF9oYW5kbGVTaXplJywgdGhpcy5fb25TZXRIYW5kbGVTaXplLCB0aGlzKTtcbiAgICAgICAgdGhpc1tvbk9yT2ZmXSgnc2V0X29yaWVudGF0aW9uJywgdGhpcy5fb25TZXRPcmllbnRhdGlvbiwgdGhpcyk7XG5cbiAgICAgICAgLy8gVE9ETyBIYW5kbGUgc2Nyb2xsd2hlZWwgZXZlbnRzXG4gICAgfVxuXG4gICAgX29uSGFuZGxlRWxlbWVudEdhaW4oKSB7XG4gICAgICAgIHRoaXMuX2Rlc3Ryb3lEcmFnSGVscGVyKCk7XG4gICAgICAgIHRoaXMuX2hhbmRsZURyYWdIZWxwZXIgPSBuZXcgRWxlbWVudERyYWdIZWxwZXIodGhpcy5faGFuZGxlUmVmZXJlbmNlLmVudGl0eS5lbGVtZW50LCB0aGlzLl9nZXRBeGlzKCkpO1xuICAgICAgICB0aGlzLl9oYW5kbGVEcmFnSGVscGVyLm9uKCdkcmFnOm1vdmUnLCB0aGlzLl9vbkhhbmRsZURyYWcsIHRoaXMpO1xuXG4gICAgICAgIHRoaXMuX3VwZGF0ZUhhbmRsZVBvc2l0aW9uQW5kU2l6ZSgpO1xuICAgIH1cblxuICAgIF9vbkhhbmRsZUVsZW1lbnRMb3NlKCkge1xuICAgICAgICB0aGlzLl9kZXN0cm95RHJhZ0hlbHBlcigpO1xuICAgIH1cblxuICAgIF9vbkhhbmRsZURyYWcocG9zaXRpb24pIHtcbiAgICAgICAgaWYgKHRoaXMuX2hhbmRsZVJlZmVyZW5jZS5lbnRpdHkgJiYgdGhpcy5lbmFibGVkICYmIHRoaXMuZW50aXR5LmVuYWJsZWQpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLl9oYW5kbGVQb3NpdGlvblRvU2Nyb2xsVmFsdWUocG9zaXRpb25bdGhpcy5fZ2V0QXhpcygpXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfb25TZXRWYWx1ZShuYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgaWYgKE1hdGguYWJzKG5ld1ZhbHVlIC0gb2xkVmFsdWUpID4gMWUtNSkge1xuICAgICAgICAgICAgdGhpcy5kYXRhLnZhbHVlID0gbWF0aC5jbGFtcChuZXdWYWx1ZSwgMCwgMSk7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVIYW5kbGVQb3NpdGlvbkFuZFNpemUoKTtcbiAgICAgICAgICAgIHRoaXMuZmlyZSgnc2V0OnZhbHVlJywgdGhpcy5kYXRhLnZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9vblNldEhhbmRsZVNpemUobmFtZSwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIGlmIChNYXRoLmFicyhuZXdWYWx1ZSAtIG9sZFZhbHVlKSA+IDFlLTUpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5oYW5kbGVTaXplID0gbWF0aC5jbGFtcChuZXdWYWx1ZSwgMCwgMSk7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVIYW5kbGVQb3NpdGlvbkFuZFNpemUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9vblNldEhhbmRsZUFsaWdubWVudCgpIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlSGFuZGxlUG9zaXRpb25BbmRTaXplKCk7XG4gICAgfVxuXG4gICAgX29uU2V0T3JpZW50YXRpb24obmFtZSwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUgJiYgdGhpcy5faGFuZGxlUmVmZXJlbmNlLmhhc0NvbXBvbmVudCgnZWxlbWVudCcpKSB7XG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVSZWZlcmVuY2UuZW50aXR5LmVsZW1lbnRbdGhpcy5fZ2V0T3Bwb3NpdGVEaW1lbnNpb24oKV0gPSAwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3VwZGF0ZUhhbmRsZVBvc2l0aW9uQW5kU2l6ZSgpIHtcbiAgICAgICAgY29uc3QgaGFuZGxlRW50aXR5ID0gdGhpcy5faGFuZGxlUmVmZXJlbmNlLmVudGl0eTtcbiAgICAgICAgY29uc3QgaGFuZGxlRWxlbWVudCA9IGhhbmRsZUVudGl0eSAmJiBoYW5kbGVFbnRpdHkuZWxlbWVudDtcblxuICAgICAgICBpZiAoaGFuZGxlRW50aXR5KSB7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IGhhbmRsZUVudGl0eS5nZXRMb2NhbFBvc2l0aW9uKCk7XG4gICAgICAgICAgICBwb3NpdGlvblt0aGlzLl9nZXRBeGlzKCldID0gdGhpcy5fZ2V0SGFuZGxlUG9zaXRpb24oKTtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZVJlZmVyZW5jZS5lbnRpdHkuc2V0TG9jYWxQb3NpdGlvbihwb3NpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFuZGxlRWxlbWVudCkge1xuICAgICAgICAgICAgaGFuZGxlRWxlbWVudFt0aGlzLl9nZXREaW1lbnNpb24oKV0gPSB0aGlzLl9nZXRIYW5kbGVMZW5ndGgoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9oYW5kbGVQb3NpdGlvblRvU2Nyb2xsVmFsdWUoaGFuZGxlUG9zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZVBvc2l0aW9uICogdGhpcy5fZ2V0U2lnbigpIC8gdGhpcy5fZ2V0VXNhYmxlVHJhY2tMZW5ndGgoKTtcbiAgICB9XG5cbiAgICBfc2Nyb2xsVmFsdWVUb0hhbmRsZVBvc2l0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSAqIHRoaXMuX2dldFNpZ24oKSAqIHRoaXMuX2dldFVzYWJsZVRyYWNrTGVuZ3RoKCk7XG4gICAgfVxuXG4gICAgX2dldFVzYWJsZVRyYWNrTGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgodGhpcy5fZ2V0VHJhY2tMZW5ndGgoKSAtIHRoaXMuX2dldEhhbmRsZUxlbmd0aCgpLCAwLjAwMSk7XG4gICAgfVxuXG4gICAgX2dldFRyYWNrTGVuZ3RoKCkge1xuICAgICAgICBpZiAodGhpcy5lbnRpdHkuZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3JpZW50YXRpb24gPT09IE9SSUVOVEFUSU9OX0hPUklaT05UQUwgPyB0aGlzLmVudGl0eS5lbGVtZW50LmNhbGN1bGF0ZWRXaWR0aCA6IHRoaXMuZW50aXR5LmVsZW1lbnQuY2FsY3VsYXRlZEhlaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIF9nZXRIYW5kbGVMZW5ndGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRUcmFja0xlbmd0aCgpICogdGhpcy5oYW5kbGVTaXplO1xuICAgIH1cblxuICAgIF9nZXRIYW5kbGVQb3NpdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Njcm9sbFZhbHVlVG9IYW5kbGVQb3NpdGlvbih0aGlzLnZhbHVlKTtcbiAgICB9XG5cbiAgICBfZ2V0U2lnbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3JpZW50YXRpb24gPT09IE9SSUVOVEFUSU9OX0hPUklaT05UQUwgPyAxIDogLTE7XG4gICAgfVxuXG4gICAgX2dldEF4aXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9yaWVudGF0aW9uID09PSBPUklFTlRBVElPTl9IT1JJWk9OVEFMID8gJ3gnIDogJ3knO1xuICAgIH1cblxuICAgIF9nZXREaW1lbnNpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9yaWVudGF0aW9uID09PSBPUklFTlRBVElPTl9IT1JJWk9OVEFMID8gJ3dpZHRoJyA6ICdoZWlnaHQnO1xuICAgIH1cblxuICAgIF9nZXRPcHBvc2l0ZURpbWVuc2lvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3JpZW50YXRpb24gPT09IE9SSUVOVEFUSU9OX0hPUklaT05UQUwgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gICAgfVxuXG4gICAgX2Rlc3Ryb3lEcmFnSGVscGVyKCkge1xuICAgICAgICBpZiAodGhpcy5faGFuZGxlRHJhZ0hlbHBlcikge1xuICAgICAgICAgICAgdGhpcy5faGFuZGxlRHJhZ0hlbHBlci5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfc2V0SGFuZGxlRHJhZ2dpbmdFbmFibGVkKGVuYWJsZWQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2hhbmRsZURyYWdIZWxwZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZURyYWdIZWxwZXIuZW5hYmxlZCA9IGVuYWJsZWQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkVuYWJsZSgpIHtcbiAgICAgICAgdGhpcy5faGFuZGxlUmVmZXJlbmNlLm9uUGFyZW50Q29tcG9uZW50RW5hYmxlKCk7XG4gICAgICAgIHRoaXMuX3NldEhhbmRsZURyYWdnaW5nRW5hYmxlZCh0cnVlKTtcbiAgICB9XG5cbiAgICBvbkRpc2FibGUoKSB7XG4gICAgICAgIHRoaXMuX3NldEhhbmRsZURyYWdnaW5nRW5hYmxlZChmYWxzZSk7XG4gICAgfVxuXG4gICAgb25SZW1vdmUoKSB7XG4gICAgICAgIHRoaXMuX2Rlc3Ryb3lEcmFnSGVscGVyKCk7XG4gICAgICAgIHRoaXMuX3RvZ2dsZUxpZmVjeWNsZUxpc3RlbmVycygnb2ZmJyk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBTY3JvbGxiYXJDb21wb25lbnQgfTtcbiJdLCJuYW1lcyI6WyJTY3JvbGxiYXJDb21wb25lbnQiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInN5c3RlbSIsImVudGl0eSIsIl9oYW5kbGVSZWZlcmVuY2UiLCJFbnRpdHlSZWZlcmVuY2UiLCJfb25IYW5kbGVFbGVtZW50R2FpbiIsIl9vbkhhbmRsZUVsZW1lbnRMb3NlIiwiX29uU2V0SGFuZGxlQWxpZ25tZW50IiwiX3RvZ2dsZUxpZmVjeWNsZUxpc3RlbmVycyIsIm9uT3JPZmYiLCJfb25TZXRWYWx1ZSIsIl9vblNldEhhbmRsZVNpemUiLCJfb25TZXRPcmllbnRhdGlvbiIsIl9kZXN0cm95RHJhZ0hlbHBlciIsIl9oYW5kbGVEcmFnSGVscGVyIiwiRWxlbWVudERyYWdIZWxwZXIiLCJlbGVtZW50IiwiX2dldEF4aXMiLCJvbiIsIl9vbkhhbmRsZURyYWciLCJfdXBkYXRlSGFuZGxlUG9zaXRpb25BbmRTaXplIiwicG9zaXRpb24iLCJlbmFibGVkIiwidmFsdWUiLCJfaGFuZGxlUG9zaXRpb25Ub1Njcm9sbFZhbHVlIiwibmFtZSIsIm9sZFZhbHVlIiwibmV3VmFsdWUiLCJNYXRoIiwiYWJzIiwiZGF0YSIsIm1hdGgiLCJjbGFtcCIsImZpcmUiLCJoYW5kbGVTaXplIiwiaGFzQ29tcG9uZW50IiwiX2dldE9wcG9zaXRlRGltZW5zaW9uIiwiaGFuZGxlRW50aXR5IiwiaGFuZGxlRWxlbWVudCIsImdldExvY2FsUG9zaXRpb24iLCJfZ2V0SGFuZGxlUG9zaXRpb24iLCJzZXRMb2NhbFBvc2l0aW9uIiwiX2dldERpbWVuc2lvbiIsIl9nZXRIYW5kbGVMZW5ndGgiLCJoYW5kbGVQb3NpdGlvbiIsIl9nZXRTaWduIiwiX2dldFVzYWJsZVRyYWNrTGVuZ3RoIiwiX3Njcm9sbFZhbHVlVG9IYW5kbGVQb3NpdGlvbiIsIm1heCIsIl9nZXRUcmFja0xlbmd0aCIsIm9yaWVudGF0aW9uIiwiT1JJRU5UQVRJT05fSE9SSVpPTlRBTCIsImNhbGN1bGF0ZWRXaWR0aCIsImNhbGN1bGF0ZWRIZWlnaHQiLCJkZXN0cm95IiwiX3NldEhhbmRsZURyYWdnaW5nRW5hYmxlZCIsIm9uRW5hYmxlIiwib25QYXJlbnRDb21wb25lbnRFbmFibGUiLCJvbkRpc2FibGUiLCJvblJlbW92ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFVQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNQSxrQkFBa0IsU0FBU0MsU0FBUyxDQUFDO0FBQ3ZDO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSUMsRUFBQUEsV0FBVyxDQUFDQyxNQUFNLEVBQUVDLE1BQU0sRUFBRTtBQUN4QixJQUFBLEtBQUssQ0FBQ0QsTUFBTSxFQUFFQyxNQUFNLENBQUMsQ0FBQTtJQUVyQixJQUFJLENBQUNDLGdCQUFnQixHQUFHLElBQUlDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsY0FBYyxFQUFFO01BQzlELGNBQWMsRUFBRSxJQUFJLENBQUND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
