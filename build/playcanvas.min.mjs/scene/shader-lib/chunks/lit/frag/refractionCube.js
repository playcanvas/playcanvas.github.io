var e="\nuniform float material_refractionIndex;\n\nvec3 refract2(vec3 viewVec, vec3 normal, float IOR) {\n\t\tfloat vn = dot(viewVec, normal);\n\t\tfloat k = 1.0 - IOR * IOR * (1.0 - vn * vn);\n\t\tvec3 refrVec = IOR * viewVec - (IOR * vn + sqrt(k)) * normal;\n\t\treturn refrVec;\n}\n\nvoid addRefraction(\n\t\tvec3 worldNormal, \n\t\tvec3 viewDir, \n\t\tfloat thickness, \n\t\tfloat gloss, \n\t\tvec3 specularity, \n\t\tvec3 albedo, \n\t\tfloat transmission\n#if defined(LIT_IRIDESCENCE)\n\t\t, vec3 iridescenceFresnel,\n\t\tIridescenceArgs iridescence\n#endif \n) {\n\t\t// use same reflection code with refraction vector\n\t\tvec4 tmpRefl = dReflection;\n\t\tvec3 reflectionDir = refract2(-viewDir, worldNormal, material_refractionIndex);\n\t\tdReflection = vec4(0);\n\t\taddReflection(reflectionDir, gloss);\n\t\tdDiffuseLight = mix(dDiffuseLight, dReflection.rgb * albedo, transmission);\n\t\tdReflection = tmpRefl;\n}\n";export{e as default};
