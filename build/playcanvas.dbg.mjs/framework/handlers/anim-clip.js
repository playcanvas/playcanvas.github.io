/**
 * @license
 * PlayCanvas Engine v1.62.0 revision 818511d2b (DEBUG PROFILER)
 * Copyright 2011-2023 PlayCanvas Ltd. All rights reserved.
 */
import { Http, http } from '../../platform/net/http.js';
import { AnimCurve } from '../anim/evaluator/anim-curve.js';
import { AnimData } from '../anim/evaluator/anim-data.js';
import { AnimTrack } from '../anim/evaluator/anim-track.js';

/** @typedef {import('./handler.js').ResourceHandler} ResourceHandler */

/**
 * Resource handler used for loading {@link AnimClip} resources.
 *
 * @implements {ResourceHandler}
 * @ignore
 */
class AnimClipHandler {
  /**
   * Type of the resource the handler handles.
   *
   * @type {string}
   */

  constructor(app) {
    this.handlerType = "animclip";
    this.maxRetries = 0;
  }
  load(url, callback) {
    if (typeof url === 'string') {
      url = {
        load: url,
        original: url
      };
    }

    // we need to specify JSON for blob URLs
    const options = {
      retry: this.maxRetries > 0,
      maxRetries: this.maxRetries
    };
    if (url.load.startsWith('blob:')) {
      options.responseType = Http.ResponseType.JSON;
    }
    http.get(url.load, options, function (err, response) {
      if (err) {
        callback(`Error loading animation clip resource: ${url.original} [${err}]`);
      } else {
        callback(null, response);
      }
    });
  }
  open(url, data) {
    const name = data.name;
    const duration = data.duration;
    const inputs = data.inputs.map(function (input) {
      return new AnimData(1, input);
    });
    const outputs = data.outputs.map(function (output) {
      return new AnimData(output.components, output.data);
    });
    const curves = data.curves.map(function (curve) {
      return new AnimCurve([curve.path], curve.inputIndex, curve.outputIndex, curve.interpolation);
    });
    return new AnimTrack(name, duration, inputs, outputs, curves);
  }
  patch(asset, assets) {}
}

export { AnimClipHandler };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbS1jbGlwLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvZnJhbWV3b3JrL2hhbmRsZXJzL2FuaW0tY2xpcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBodHRwLCBIdHRwIH0gZnJvbSAnLi4vLi4vcGxhdGZvcm0vbmV0L2h0dHAuanMnO1xuXG5pbXBvcnQgeyBBbmltQ3VydmUgfSBmcm9tICcuLi9hbmltL2V2YWx1YXRvci9hbmltLWN1cnZlLmpzJztcbmltcG9ydCB7IEFuaW1EYXRhIH0gZnJvbSAnLi4vYW5pbS9ldmFsdWF0b3IvYW5pbS1kYXRhLmpzJztcbmltcG9ydCB7IEFuaW1UcmFjayB9IGZyb20gJy4uL2FuaW0vZXZhbHVhdG9yL2FuaW0tdHJhY2suanMnO1xuXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi9oYW5kbGVyLmpzJykuUmVzb3VyY2VIYW5kbGVyfSBSZXNvdXJjZUhhbmRsZXIgKi9cblxuLyoqXG4gKiBSZXNvdXJjZSBoYW5kbGVyIHVzZWQgZm9yIGxvYWRpbmcge0BsaW5rIEFuaW1DbGlwfSByZXNvdXJjZXMuXG4gKlxuICogQGltcGxlbWVudHMge1Jlc291cmNlSGFuZGxlcn1cbiAqIEBpZ25vcmVcbiAqL1xuY2xhc3MgQW5pbUNsaXBIYW5kbGVyIHtcbiAgICAvKipcbiAgICAgKiBUeXBlIG9mIHRoZSByZXNvdXJjZSB0aGUgaGFuZGxlciBoYW5kbGVzLlxuICAgICAqXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICBoYW5kbGVyVHlwZSA9IFwiYW5pbWNsaXBcIjtcblxuICAgIGNvbnN0cnVjdG9yKGFwcCkge1xuICAgICAgICB0aGlzLm1heFJldHJpZXMgPSAwO1xuICAgIH1cblxuICAgIGxvYWQodXJsLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAodHlwZW9mIHVybCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHVybCA9IHtcbiAgICAgICAgICAgICAgICBsb2FkOiB1cmwsXG4gICAgICAgICAgICAgICAgb3JpZ2luYWw6IHVybFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHdlIG5lZWQgdG8gc3BlY2lmeSBKU09OIGZvciBibG9iIFVSTHNcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHJldHJ5OiB0aGlzLm1heFJldHJpZXMgPiAwLFxuICAgICAgICAgICAgbWF4UmV0cmllczogdGhpcy5tYXhSZXRyaWVzXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHVybC5sb2FkLnN0YXJ0c1dpdGgoJ2Jsb2I6JykpIHtcbiAgICAgICAgICAgIG9wdGlvbnMucmVzcG9uc2VUeXBlID0gSHR0cC5SZXNwb25zZVR5cGUuSlNPTjtcbiAgICAgICAgfVxuXG4gICAgICAgIGh0dHAuZ2V0KHVybC5sb2FkLCBvcHRpb25zLCBmdW5jdGlvbiAoZXJyLCByZXNwb25zZSkge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGBFcnJvciBsb2FkaW5nIGFuaW1hdGlvbiBjbGlwIHJlc291cmNlOiAke3VybC5vcmlnaW5hbH0gWyR7ZXJyfV1gKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBvcGVuKHVybCwgZGF0YSkge1xuICAgICAgICBjb25zdCBuYW1lID0gZGF0YS5uYW1lO1xuICAgICAgICBjb25zdCBkdXJhdGlvbiA9IGRhdGEuZHVyYXRpb247XG4gICAgICAgIGNvbnN0IGlucHV0cyA9IGRhdGEuaW5wdXRzLm1hcChmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQW5pbURhdGEoMSwgaW5wdXQpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgb3V0cHV0cyA9IGRhdGEub3V0cHV0cy5tYXAoZnVuY3Rpb24gKG91dHB1dCkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBBbmltRGF0YShvdXRwdXQuY29tcG9uZW50cywgb3V0cHV0LmRhdGEpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgY3VydmVzID0gZGF0YS5jdXJ2ZXMubWFwKGZ1bmN0aW9uIChjdXJ2ZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBBbmltQ3VydmUoXG4gICAgICAgICAgICAgICAgW2N1cnZlLnBhdGhdLFxuICAgICAgICAgICAgICAgIGN1cnZlLmlucHV0SW5kZXgsXG4gICAgICAgICAgICAgICAgY3VydmUub3V0cHV0SW5kZXgsXG4gICAgICAgICAgICAgICAgY3VydmUuaW50ZXJwb2xhdGlvblxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBuZXcgQW5pbVRyYWNrKFxuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIGR1cmF0aW9uLFxuICAgICAgICAgICAgaW5wdXRzLFxuICAgICAgICAgICAgb3V0cHV0cyxcbiAgICAgICAgICAgIGN1cnZlc1xuICAgICAgICApO1xuICAgIH1cblxuICAgIHBhdGNoKGFzc2V0LCBhc3NldHMpIHtcbiAgICB9XG59XG5cbmV4cG9ydCB7IEFuaW1DbGlwSGFuZGxlciB9O1xuIl0sIm5hbWVzIjpbIkFuaW1DbGlwSGFuZGxlciIsImNvbnN0cnVjdG9yIiwiYXBwIiwiaGFuZGxlclR5cGUiLCJtYXhSZXRyaWVzIiwibG9hZCIsInVybCIsImNhbGxiYWNrIiwib3JpZ2luYWwiLCJvcHRpb25zIiwicmV0cnkiLCJzdGFydHNXaXRoIiwicmVzcG9uc2VUeXBlIiwiSHR0cCIsIlJlc3BvbnNlVHlwZSIsIkpTT04iLCJodHRwIiwiZ2V0IiwiZXJyIiwicmVzcG9uc2UiLCJvcGVuIiwiZGF0YSIsIm5hbWUiLCJkdXJhdGlvbiIsImlucHV0cyIsIm1hcCIsImlucHV0IiwiQW5pbURhdGEiLCJvdXRwdXRzIiwib3V0cHV0IiwiY29tcG9uZW50cyIsImN1cnZlcyIsImN1cnZlIiwiQW5pbUN1cnZlIiwicGF0aCIsImlucHV0SW5kZXgiLCJvdXRwdXRJbmRleCIsImludGVycG9sYXRpb24iLCJBbmltVHJhY2siLCJwYXRjaCIsImFzc2V0IiwiYXNzZXRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBTUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUEsZUFBZSxDQUFDO0FBQ2xCO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0VBR0lDLFdBQVcsQ0FBQ0MsR0FBRyxFQUFFO0lBQUEsSUFGakJDLENBQUFBLFdBQVcsR0FBRyxVQUFVLENBQUE7SUFHcEIsSUFBSSxDQUFDQyxVQUFVLEdBQUcsQ0FBQyxDQUFBO0FBQ3ZCLEdBQUE7QUFFQUMsRUFBQUEsSUFBSSxDQUFDQyxHQUFHLEVBQUVDLFFBQVEsRUFBRTtBQUNoQixJQUFBLElBQUksT0FBT0QsR0FBRyxLQUFLLFFBQVEsRUFBRTtBQUN6QkEsTUFBQUEsR0FBRyxHQUFHO0FBQ0ZELFFBQUFBLElBQUksRUFBRUMsR0FBRztBQUNURSxRQUFBQSxRQUFRLEVBQUVGLEdBQUFBO09BQ2IsQ0FBQTtBQUNMLEtBQUE7O0FBRUE7QUFDQSxJQUFBLE1BQU1HLE9BQU8sR0FBRztBQUNaQyxNQUFBQSxLQUFLLEVBQUUsSUFBSSxDQUFDTixVQUFVLEdBQUcsQ0FBQztNQUMxQkEsVUFBVSxFQUFFLElBQUksQ0FBQ0EsVUFBQUE7S0FDcEIsQ0FBQTtJQUVELElBQUlFLEdBQUcsQ0FBQ0QsSUFBSSxDQUFDTSxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUU7QUFDOUJGLE1BQUFBLE9BQU8sQ0FBQ0csWUFBWSxHQUFHQyxJQUFJLENBQUNDLFlBQVksQ0FBQ0MsSUFBSSxDQUFBO0FBQ2pELEtBQUE7QUFFQUMsSUFBQUEsSUFBSSxDQUFDQyxHQUFHLENBQUNYLEdBQUcsQ0FBQ0QsSUFBSSxFQUFFSSxPQUFPLEVBQUUsVUFBVVMsR0FBRyxFQUFFQyxRQUFRLEVBQUU7QUFDakQsTUFBQSxJQUFJRCxHQUFHLEVBQUU7UUFDTFgsUUFBUSxDQUFFLDBDQUF5Q0QsR0FBRyxDQUFDRSxRQUFTLENBQUlVLEVBQUFBLEVBQUFBLEdBQUksR0FBRSxDQUFDLENBQUE7QUFDL0UsT0FBQyxNQUFNO0FBQ0hYLFFBQUFBLFFBQVEsQ0FBQyxJQUFJLEVBQUVZLFFBQVEsQ0FBQyxDQUFBO0FBQzVCLE9BQUE7QUFDSixLQUFDLENBQUMsQ0FBQTtBQUNOLEdBQUE7QUFFQUMsRUFBQUEsSUFBSSxDQUFDZCxHQUFHLEVBQUVlLElBQUksRUFBRTtBQUNaLElBQUEsTUFBTUMsSUFBSSxHQUFHRCxJQUFJLENBQUNDLElBQUksQ0FBQTtBQUN0QixJQUFBLE1BQU1DLFFBQVEsR0FBR0YsSUFBSSxDQUFDRSxRQUFRLENBQUE7SUFDOUIsTUFBTUMsTUFBTSxHQUFHSCxJQUFJLENBQUNHLE1BQU0sQ0FBQ0MsR0FBRyxDQUFDLFVBQVVDLEtBQUssRUFBRTtBQUM1QyxNQUFBLE9BQU8sSUFBSUMsUUFBUSxDQUFDLENBQUMsRUFBRUQsS0FBSyxDQUFDLENBQUE7QUFDakMsS0FBQyxDQUFDLENBQUE7SUFDRixNQUFNRSxPQUFPLEdBQUdQLElBQUksQ0FBQ08sT0FBTyxDQUFDSCxHQUFHLENBQUMsVUFBVUksTUFBTSxFQUFFO01BQy9DLE9BQU8sSUFBSUYsUUFBUSxDQUFDRSxNQUFNLENBQUNDLFVBQVUsRUFBRUQsTUFBTSxDQUFDUixJQUFJLENBQUMsQ0FBQTtBQUN2RCxLQUFDLENBQUMsQ0FBQTtJQUNGLE1BQU1VLE1BQU0sR0FBR1YsSUFBSSxDQUFDVSxNQUFNLENBQUNOLEdBQUcsQ0FBQyxVQUFVTyxLQUFLLEVBQUU7TUFDNUMsT0FBTyxJQUFJQyxTQUFTLENBQ2hCLENBQUNELEtBQUssQ0FBQ0UsSUFBSSxDQUFDLEVBQ1pGLEtBQUssQ0FBQ0csVUFBVSxFQUNoQkgsS0FBSyxDQUFDSSxXQUFXLEVBQ2pCSixLQUFLLENBQUNLLGFBQWEsQ0FDdEIsQ0FBQTtBQUNMLEtBQUMsQ0FBQyxDQUFBO0FBQ0YsSUFBQSxPQUFPLElBQUlDLFNBQVMsQ0FDaEJoQixJQUFJLEVBQ0pDLFFBQVEsRUFDUkMsTUFBTSxFQUNOSSxPQUFPLEVBQ1BHLE1BQU0sQ0FDVCxDQUFBO0FBQ0wsR0FBQTtBQUVBUSxFQUFBQSxLQUFLLENBQUNDLEtBQUssRUFBRUMsTUFBTSxFQUFFLEVBQ3JCO0FBQ0o7Ozs7In0=
