var t="\n// Clustered Omni Sampling using atlas\n\n#ifdef GL2\n\n\t\t#if defined(CLUSTER_SHADOW_TYPE_PCF1)\n\n\t\tfloat getShadowOmniClusteredPCF1(SHADOWMAP_ACCEPT(shadowMap), vec4 shadowParams, vec3 omniAtlasViewport, float shadowEdgePixels, vec3 lightDir) {\n\n\t\t\t\tfloat shadowTextureResolution = shadowParams.x;\n\t\t\t\tvec2 uv = getCubemapAtlasCoordinates(omniAtlasViewport, shadowEdgePixels, shadowTextureResolution, lightDir);\n\n\t\t\t\tfloat shadowZ = length(lightDir) * shadowParams.w + shadowParams.z;\n\t\t\t\treturn textureShadow(shadowMap, vec3(uv, shadowZ));\n\t\t}\n\n\t\t#endif\n\n\t\t#if defined(CLUSTER_SHADOW_TYPE_PCF3)\n\n\t\tfloat getShadowOmniClusteredPCF3(SHADOWMAP_ACCEPT(shadowMap), vec4 shadowParams, vec3 omniAtlasViewport, float shadowEdgePixels, vec3 lightDir) {\n\n\t\t\t\tfloat shadowTextureResolution = shadowParams.x;\n\t\t\t\tvec2 uv = getCubemapAtlasCoordinates(omniAtlasViewport, shadowEdgePixels, shadowTextureResolution, lightDir);\n\n\t\t\t\tfloat shadowZ = length(lightDir) * shadowParams.w + shadowParams.z;\n\t\t\t\tvec3 shadowCoord = vec3(uv, shadowZ);\n\t\t\t\treturn getShadowPCF3x3(SHADOWMAP_PASS(shadowMap), shadowCoord, shadowParams.xyz);\n\t\t}\n\n\t\t#endif\n\n\t\t#if defined(CLUSTER_SHADOW_TYPE_PCF5)\n\n\t\tfloat getShadowOmniClusteredPCF5(SHADOWMAP_ACCEPT(shadowMap), vec4 shadowParams, vec3 omniAtlasViewport, float shadowEdgePixels, vec3 lightDir) {\n\n\t\t\t\tfloat shadowTextureResolution = shadowParams.x;\n\t\t\t\tvec2 uv = getCubemapAtlasCoordinates(omniAtlasViewport, shadowEdgePixels, shadowTextureResolution, lightDir);\n\n\t\t\t\tfloat shadowZ = length(lightDir) * shadowParams.w + shadowParams.z;\n\t\t\t\tvec3 shadowCoord = vec3(uv, shadowZ);\n\t\t\t\treturn getShadowPCF5x5(SHADOWMAP_PASS(shadowMap), shadowCoord, shadowParams.xyz);\n\t\t}\n\n\t\t#endif\n\n#else\n\n\t\t#if defined(CLUSTER_SHADOW_TYPE_PCF1)\n\n\t\tfloat getShadowOmniClusteredPCF1(sampler2D shadowMap, vec4 shadowParams, vec3 omniAtlasViewport, float shadowEdgePixels, vec3 lightDir) {\n\n\t\t\t\tfloat shadowTextureResolution = shadowParams.x;\n\t\t\t\tvec2 uv = getCubemapAtlasCoordinates(omniAtlasViewport, shadowEdgePixels, shadowTextureResolution, lightDir);\n\n\t\t\t\t// no filter shadow sampling\n\t\t\t\tfloat depth = unpackFloat(textureShadow(shadowMap, uv));\n\t\t\t\tfloat shadowZ = length(lightDir) * shadowParams.w + shadowParams.z;\n\t\t\t\treturn depth > shadowZ ? 1.0 : 0.0;\n\t\t}\n\n\t\t#endif\n\n\t\t#if defined(CLUSTER_SHADOW_TYPE_PCF3)\n\n\t\tfloat getShadowOmniClusteredPCF3(sampler2D shadowMap, vec4 shadowParams, vec3 omniAtlasViewport, float shadowEdgePixels, vec3 lightDir) {\n\n\t\t\t\tfloat shadowTextureResolution = shadowParams.x;\n\t\t\t\tvec2 uv = getCubemapAtlasCoordinates(omniAtlasViewport, shadowEdgePixels, shadowTextureResolution, lightDir);\n\n\t\t\t\t// pcf3\n\t\t\t\tfloat shadowZ = length(lightDir) * shadowParams.w + shadowParams.z;\n\t\t\t\tvec3 shadowCoord = vec3(uv, shadowZ);\n\t\t\t\treturn getShadowPCF3x3(shadowMap, shadowCoord, shadowParams.xyz);\n\t\t}\n\n\t\t#endif\n\n\t\t#if defined(CLUSTER_SHADOW_TYPE_PCF5)\n\n\t\t// we don't have PCF5 implementation for webgl1, use PCF3\n\t\tfloat getShadowOmniClusteredPCF5(sampler2D shadowMap, vec4 shadowParams, vec3 omniAtlasViewport, float shadowEdgePixels, vec3 lightDir) {\n\n\t\t\t\tfloat shadowTextureResolution = shadowParams.x;\n\t\t\t\tvec2 uv = getCubemapAtlasCoordinates(omniAtlasViewport, shadowEdgePixels, shadowTextureResolution, lightDir);\n\n\t\t\t\t// pcf3\n\t\t\t\tfloat shadowZ = length(lightDir) * shadowParams.w + shadowParams.z;\n\t\t\t\tvec3 shadowCoord = vec3(uv, shadowZ);\n\t\t\t\treturn getShadowPCF3x3(shadowMap, shadowCoord, shadowParams.xyz);\n\t\t}\n\n\t\t#endif\n\n#endif\n\n\n// Clustered Spot Sampling using atlas\n\n#ifdef GL2\n\n\t\t#if defined(CLUSTER_SHADOW_TYPE_PCF1)\n\n\t\tfloat getShadowSpotClusteredPCF1(SHADOWMAP_ACCEPT(shadowMap), vec3 shadowCoord, vec4 shadowParams) {\n\t\t\t\treturn textureShadow(shadowMap, shadowCoord);\n\t\t}\n\n\t\t#endif\n\n\t\t#if defined(CLUSTER_SHADOW_TYPE_PCF3)\n\n\t\tfloat getShadowSpotClusteredPCF3(SHADOWMAP_ACCEPT(shadowMap), vec3 shadowCoord, vec4 shadowParams) {\n\t\t\t\treturn getShadowSpotPCF3x3(SHADOWMAP_PASS(shadowMap), shadowCoord, shadowParams);\n\t\t}\n\n\t\t#endif\n\n\t\t#if defined(CLUSTER_SHADOW_TYPE_PCF5)\n\n\t\tfloat getShadowSpotClusteredPCF5(SHADOWMAP_ACCEPT(shadowMap), vec3 shadowCoord, vec4 shadowParams) {\n\t\t\t\treturn getShadowPCF5x5(SHADOWMAP_PASS(shadowMap), shadowCoord, shadowParams.xyz);\n\t\t}\n\t\t#endif\n\n#else\n\n\t\t#if defined(CLUSTER_SHADOW_TYPE_PCF1)\n\n\t\tfloat getShadowSpotClusteredPCF1(sampler2D shadowMap, vec3 shadowCoord, vec4 shadowParams) {\n\n\t\t\t\tfloat depth = unpackFloat(textureShadow(shadowMap, shadowCoord.xy));\n\n\t\t\t\treturn depth > shadowCoord.z ? 1.0 : 0.0;\n\n\t\t}\n\n\t\t#endif\n\n\t\t#if defined(CLUSTER_SHADOW_TYPE_PCF3)\n\n\t\tfloat getShadowSpotClusteredPCF3(sampler2D shadowMap, vec3 shadowCoord, vec4 shadowParams) {\n\t\t\t\treturn getShadowSpotPCF3x3(shadowMap, shadowCoord, shadowParams);\n\t\t}\n\n\t\t#endif\n\n\t\t#if defined(CLUSTER_SHADOW_TYPE_PCF5)\n\n\t\t// we don't have PCF5 implementation for webgl1, use PCF3\n\t\tfloat getShadowSpotClusteredPCF5(sampler2D shadowMap, vec3 shadowCoord, vec4 shadowParams) {\n\t\t\t\treturn getShadowSpotPCF3x3(shadowMap, shadowCoord, shadowParams);\n\t\t}\n\n\t\t#endif\n\n#endif\n";export{t as default};
