/**
 * @license
 * PlayCanvas Engine v1.57.1 revision 256dd83c2 (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { Asset } from '../../../asset/asset.js';
import { Texture } from '../../../graphics/texture.js';
import { basisTranscode } from '../../basis.js';
import { TEXHINT_ASSET, ADDRESS_CLAMP_TO_EDGE, ADDRESS_REPEAT } from '../../../graphics/constants.js';

class BasisParser {
  constructor(registry, device) {
    this.device = device;
    this.maxRetries = 0;
  }

  load(url, callback, asset) {
    const device = this.device;

    const transcode = data => {
      var _asset$file, _asset$file$variants, _asset$file$variants$;

      const basisModuleFound = basisTranscode(device, url.load, data, callback, {
        isGGGR: ((asset == null ? void 0 : (_asset$file = asset.file) == null ? void 0 : (_asset$file$variants = _asset$file.variants) == null ? void 0 : (_asset$file$variants$ = _asset$file$variants.basis) == null ? void 0 : _asset$file$variants$.opt) & 8) !== 0
      });

      if (!basisModuleFound) {
        callback(`Basis module not found. Asset '${asset.name}' basis texture variant will not be loaded.`);
      }
    };

    Asset.fetchArrayBuffer(url.load, (err, result) => {
      if (err) {
        callback(err);
      } else {
        transcode(result);
      }
    }, asset, this.maxRetries);
  }

  open(url, data, device) {
    const texture = new Texture(device, {
      name: url,
      profilerHint: TEXHINT_ASSET,
      addressU: data.cubemap ? ADDRESS_CLAMP_TO_EDGE : ADDRESS_REPEAT,
      addressV: data.cubemap ? ADDRESS_CLAMP_TO_EDGE : ADDRESS_REPEAT,
      width: data.width,
      height: data.height,
      format: data.format,
      cubemap: data.cubemap,
      levels: data.levels
    });
    texture.upload();
    return texture;
  }

}

export { BasisParser };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzaXMuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9yZXNvdXJjZXMvcGFyc2VyL3RleHR1cmUvYmFzaXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXNzZXQgfSBmcm9tICcuLi8uLi8uLi9hc3NldC9hc3NldC5qcyc7XG5pbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSAnLi4vLi4vLi4vZ3JhcGhpY3MvdGV4dHVyZS5qcyc7XG5pbXBvcnQgeyBiYXNpc1RyYW5zY29kZSB9IGZyb20gJy4uLy4uL2Jhc2lzLmpzJztcbmltcG9ydCB7IEFERFJFU1NfQ0xBTVBfVE9fRURHRSwgQUREUkVTU19SRVBFQVQsIFRFWEhJTlRfQVNTRVQgfSBmcm9tICcuLi8uLi8uLi9ncmFwaGljcy9jb25zdGFudHMuanMnO1xuXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi4vLi4vdGV4dHVyZS5qcycpLlRleHR1cmVQYXJzZXJ9IFRleHR1cmVQYXJzZXIgKi9cblxuLyoqXG4gKiBQYXJzZXIgZm9yIGJhc2lzIGZpbGVzLlxuICpcbiAqIEBpbXBsZW1lbnRzIHtUZXh0dXJlUGFyc2VyfVxuICogQGlnbm9yZVxuICovXG5jbGFzcyBCYXNpc1BhcnNlciB7XG4gICAgY29uc3RydWN0b3IocmVnaXN0cnksIGRldmljZSkge1xuICAgICAgICB0aGlzLmRldmljZSA9IGRldmljZTtcbiAgICAgICAgdGhpcy5tYXhSZXRyaWVzID0gMDtcbiAgICB9XG5cbiAgICBsb2FkKHVybCwgY2FsbGJhY2ssIGFzc2V0KSB7XG4gICAgICAgIGNvbnN0IGRldmljZSA9IHRoaXMuZGV2aWNlO1xuXG4gICAgICAgIGNvbnN0IHRyYW5zY29kZSA9IChkYXRhKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBiYXNpc01vZHVsZUZvdW5kID0gYmFzaXNUcmFuc2NvZGUoXG4gICAgICAgICAgICAgICAgZGV2aWNlLFxuICAgICAgICAgICAgICAgIHVybC5sb2FkLFxuICAgICAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgICAgICAgICAgeyBpc0dHR1I6IChhc3NldD8uZmlsZT8udmFyaWFudHM/LmJhc2lzPy5vcHQgJiA4KSAhPT0gMCB9XG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBpZiAoIWJhc2lzTW9kdWxlRm91bmQpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhgQmFzaXMgbW9kdWxlIG5vdCBmb3VuZC4gQXNzZXQgJyR7YXNzZXQubmFtZX0nIGJhc2lzIHRleHR1cmUgdmFyaWFudCB3aWxsIG5vdCBiZSBsb2FkZWQuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgQXNzZXQuZmV0Y2hBcnJheUJ1ZmZlcih1cmwubG9hZCwgKGVyciwgcmVzdWx0KSA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdHJhbnNjb2RlKHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGFzc2V0LCB0aGlzLm1heFJldHJpZXMpO1xuICAgIH1cblxuICAgIC8vIG91ciBhc3luYyB0cmFuc2NvZGUgY2FsbCBwcm92aWRlcyB0aGUgbmVhdCBzdHJ1Y3R1cmUgd2UgbmVlZCB0byBjcmVhdGUgdGhlIHRleHR1cmUgaW5zdGFuY2VcbiAgICBvcGVuKHVybCwgZGF0YSwgZGV2aWNlKSB7XG4gICAgICAgIGNvbnN0IHRleHR1cmUgPSBuZXcgVGV4dHVyZShkZXZpY2UsIHtcbiAgICAgICAgICAgIG5hbWU6IHVybCxcbiAgICAgICAgICAgIC8vICNpZiBfUFJPRklMRVJcbiAgICAgICAgICAgIHByb2ZpbGVySGludDogVEVYSElOVF9BU1NFVCxcbiAgICAgICAgICAgIC8vICNlbmRpZlxuICAgICAgICAgICAgYWRkcmVzc1U6IGRhdGEuY3ViZW1hcCA/IEFERFJFU1NfQ0xBTVBfVE9fRURHRSA6IEFERFJFU1NfUkVQRUFULFxuICAgICAgICAgICAgYWRkcmVzc1Y6IGRhdGEuY3ViZW1hcCA/IEFERFJFU1NfQ0xBTVBfVE9fRURHRSA6IEFERFJFU1NfUkVQRUFULFxuICAgICAgICAgICAgd2lkdGg6IGRhdGEud2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IGRhdGEuaGVpZ2h0LFxuICAgICAgICAgICAgZm9ybWF0OiBkYXRhLmZvcm1hdCxcbiAgICAgICAgICAgIGN1YmVtYXA6IGRhdGEuY3ViZW1hcCxcbiAgICAgICAgICAgIGxldmVsczogZGF0YS5sZXZlbHNcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGV4dHVyZS51cGxvYWQoKTtcblxuICAgICAgICByZXR1cm4gdGV4dHVyZTtcbiAgICB9XG59XG5cbmV4cG9ydCB7IEJhc2lzUGFyc2VyIH07XG4iXSwibmFtZXMiOlsiQmFzaXNQYXJzZXIiLCJjb25zdHJ1Y3RvciIsInJlZ2lzdHJ5IiwiZGV2aWNlIiwibWF4UmV0cmllcyIsImxvYWQiLCJ1cmwiLCJjYWxsYmFjayIsImFzc2V0IiwidHJhbnNjb2RlIiwiZGF0YSIsImJhc2lzTW9kdWxlRm91bmQiLCJiYXNpc1RyYW5zY29kZSIsImlzR0dHUiIsImZpbGUiLCJ2YXJpYW50cyIsImJhc2lzIiwib3B0IiwibmFtZSIsIkFzc2V0IiwiZmV0Y2hBcnJheUJ1ZmZlciIsImVyciIsInJlc3VsdCIsIm9wZW4iLCJ0ZXh0dXJlIiwiVGV4dHVyZSIsInByb2ZpbGVySGludCIsIlRFWEhJTlRfQVNTRVQiLCJhZGRyZXNzVSIsImN1YmVtYXAiLCJBRERSRVNTX0NMQU1QX1RPX0VER0UiLCJBRERSRVNTX1JFUEVBVCIsImFkZHJlc3NWIiwid2lkdGgiLCJoZWlnaHQiLCJmb3JtYXQiLCJsZXZlbHMiLCJ1cGxvYWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFhQSxNQUFNQSxXQUFOLENBQWtCO0FBQ2RDLEVBQUFBLFdBQVcsQ0FBQ0MsUUFBRCxFQUFXQyxNQUFYLEVBQW1CO0lBQzFC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
