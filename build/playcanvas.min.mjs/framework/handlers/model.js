import{path as e}from"../../core/path.js";import{Http as r,http as t}from"../../platform/net/http.js";import{getDefaultMaterial as a}from"../../scene/materials/default-material.js";import{GlbModelParser as s}from"../parsers/glb-model.js";import{JsonModelParser as i}from"../parsers/json-model.js";class o{constructor(r){this.handlerType="model",this._device=r.graphicsDevice,this._parsers=[],this._defaultMaterial=a(this._device),this.maxRetries=0,this.addParser(new i(this._device,this._defaultMaterial),(function(r,t){return".json"===e.getExtension(r)})),this.addParser(new s(this._device,this._defaultMaterial),(function(r,t){return".glb"===e.getExtension(r)}))}load(a,s){"string"==typeof a&&(a={load:a,original:a});const i={retry:this.maxRetries>0,maxRetries:this.maxRetries};(a.load.startsWith("blob:")||a.load.startsWith("data:"))&&(".glb"===e.getExtension(a.original).toLowerCase()?i.responseType=r.ResponseType.ARRAY_BUFFER:i.responseType=r.ResponseType.JSON),t.get(a.load,i,((e,r)=>{if(s)if(e)s(`Error loading model: ${a.original} [${e}]`);else{for(let e=0;e<this._parsers.length;e++){const t=this._parsers[e];if(t.decider(a.original,r))return void t.parser.parse(r,((e,r)=>{e?s(e):s(null,r)}))}s("No parsers found")}}))}open(e,r){return r}patch(e,r){if(!e.resource)return;const t=e.data,a=this;e.resource.meshInstances.forEach((function(s,i){if(t.mapping){const o=function e(t){t.resource?s.material=t.resource:(t.once("load",e),r.load(t)),t.once("remove",(function(e){s.material===e.resource&&(s.material=a._defaultMaterial)}))};if(!t.mapping[i])return void(s.material=a._defaultMaterial);const n=t.mapping[i].material,l=t.mapping[i].path;let p;if(void 0!==n)n?(p=r.get(n),p?o(p):r.once("add:"+n,o)):s.material=a._defaultMaterial;else if(l){const a=e.getAbsoluteUrl(t.mapping[i].path);p=r.getByUrl(a),p?o(p):r.once("add:url:"+a,o)}}}))}addParser(e,r){this._parsers.push({parser:e,decider:r})}}export{o as ModelHandler};
