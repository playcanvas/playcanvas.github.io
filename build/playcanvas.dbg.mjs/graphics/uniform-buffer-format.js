/**
 * @license
 * PlayCanvas Engine v1.57.1 revision 256dd83c2 (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { Debug } from '../core/debug.js';
import { math } from '../math/math.js';
import { bindGroupNames, uniformTypeToName, UNIFORMTYPE_FLOAT, UNIFORMTYPE_VEC2, UNIFORMTYPE_VEC3, UNIFORMTYPE_VEC4, UNIFORMTYPE_INT, UNIFORMTYPE_IVEC2, UNIFORMTYPE_IVEC3, UNIFORMTYPE_IVEC4, UNIFORMTYPE_BOOL, UNIFORMTYPE_BVEC2, UNIFORMTYPE_BVEC3, UNIFORMTYPE_BVEC4, UNIFORMTYPE_MAT2, UNIFORMTYPE_MAT3, UNIFORMTYPE_MAT4 } from './constants.js';

const uniformTypeToNumElements = [];
uniformTypeToNumElements[UNIFORMTYPE_FLOAT] = 1;
uniformTypeToNumElements[UNIFORMTYPE_VEC2] = 2;
uniformTypeToNumElements[UNIFORMTYPE_VEC3] = 3;
uniformTypeToNumElements[UNIFORMTYPE_VEC4] = 4;
uniformTypeToNumElements[UNIFORMTYPE_INT] = 1;
uniformTypeToNumElements[UNIFORMTYPE_IVEC2] = 2;
uniformTypeToNumElements[UNIFORMTYPE_IVEC3] = 3;
uniformTypeToNumElements[UNIFORMTYPE_IVEC4] = 4;
uniformTypeToNumElements[UNIFORMTYPE_BOOL] = 1;
uniformTypeToNumElements[UNIFORMTYPE_BVEC2] = 2;
uniformTypeToNumElements[UNIFORMTYPE_BVEC3] = 3;
uniformTypeToNumElements[UNIFORMTYPE_BVEC4] = 4;
uniformTypeToNumElements[UNIFORMTYPE_MAT2] = 8;
uniformTypeToNumElements[UNIFORMTYPE_MAT3] = 12;
uniformTypeToNumElements[UNIFORMTYPE_MAT4] = 16;

class UniformFormat {
  constructor(name, type, count = 1) {
    this.name = void 0;
    this.type = void 0;
    this.byteSize = void 0;
    this.offset = void 0;
    this.scopeId = void 0;
    this.count = void 0;
    this.name = name;
    this.type = type;
    this.count = count;
    Debug.assert(count === 1, `Uniform arrays are not currently supported - uniform ${name}`);
    const elementSize = uniformTypeToNumElements[type];
    Debug.assert(elementSize, `Unhandled uniform format ${type} used for ${name}`);
    this.byteSize = count * elementSize * 4;
    Debug.assert(this.byteSize, `Unknown byte size for uniform format ${type} used for ${name}`);
  }

  calculateOffset(offset) {
    const alignment = this.byteSize <= 8 ? this.byteSize : 16;
    offset = math.roundUp(offset, alignment);
    this.offset = offset / 4;
  }

}

class UniformBufferFormat {
  constructor(graphicsDevice, uniforms) {
    this.byteSize = 0;
    this.map = new Map();
    this.scope = graphicsDevice.scope;
    this.uniforms = uniforms;
    let offset = 0;

    for (let i = 0; i < uniforms.length; i++) {
      const uniform = uniforms[i];
      uniform.calculateOffset(offset);
      offset = uniform.offset * 4 + uniform.byteSize;
      uniform.scopeId = this.scope.resolve(uniform.name);
      this.map.set(uniform.name, uniform);
    }

    this.byteSize = math.roundUp(offset, 16);
  }

  get(name) {
    return this.map.get(name);
  }

  getShaderDeclaration(bindGroup, bindIndex) {
    const name = bindGroupNames[bindGroup];
    let code = `layout(set = ${bindGroup}, binding = ${bindIndex}, std140) uniform ub_${name} {\n`;
    this.uniforms.forEach(uniform => {
      const typeString = uniformTypeToName[uniform.type];
      Debug.assert(typeString.length > 0, `Uniform type ${uniform.type} is not handled.`);
      code += `    ${typeString} ${uniform.name};\n`;
    });
    return code + '};\n';
  }

}

export { UniformBufferFormat, UniformFormat };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5pZm9ybS1idWZmZXItZm9ybWF0LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZ3JhcGhpY3MvdW5pZm9ybS1idWZmZXItZm9ybWF0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERlYnVnIH0gZnJvbSAnLi4vY29yZS9kZWJ1Zy5qcyc7XG5pbXBvcnQgeyBtYXRoIH0gZnJvbSAnLi4vbWF0aC9tYXRoLmpzJztcbmltcG9ydCB7XG4gICAgdW5pZm9ybVR5cGVUb05hbWUsIGJpbmRHcm91cE5hbWVzLFxuICAgIFVOSUZPUk1UWVBFX0JPT0wsIFVOSUZPUk1UWVBFX0lOVCwgVU5JRk9STVRZUEVfRkxPQVQsIFVOSUZPUk1UWVBFX1ZFQzIsIFVOSUZPUk1UWVBFX1ZFQzMsXG4gICAgVU5JRk9STVRZUEVfVkVDNCwgVU5JRk9STVRZUEVfSVZFQzIsIFVOSUZPUk1UWVBFX0lWRUMzLCBVTklGT1JNVFlQRV9JVkVDNCwgVU5JRk9STVRZUEVfQlZFQzIsXG4gICAgVU5JRk9STVRZUEVfQlZFQzMsIFVOSUZPUk1UWVBFX0JWRUM0LCBVTklGT1JNVFlQRV9NQVQ0LCBVTklGT1JNVFlQRV9NQVQyLCBVTklGT1JNVFlQRV9NQVQzXG59IGZyb20gJy4vY29uc3RhbnRzLmpzJztcblxuLyoqIEB0eXBlZGVmIHtpbXBvcnQoJy4vc2NvcGUtaWQuanMnKS5TY29wZUlkfSBTY29wZUlkICovXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi91bmlmb3JtLWJ1ZmZlci5qcycpLlVuaWZvcm1CdWZmZXJ9IFVuaWZvcm1CdWZmZXIgKi9cbi8qKiBAdHlwZWRlZiB7aW1wb3J0KCcuL2dyYXBoaWNzLWRldmljZS5qcycpLkdyYXBoaWNzRGV2aWNlfSBHcmFwaGljc0RldmljZSAqL1xuXG4vLyBtYXAgb2YgVU5JRk9STVRZUEVfKioqIHRvIG51bWJlciBvZiAzMmJpdCBlbGVtZW50c1xuY29uc3QgdW5pZm9ybVR5cGVUb051bUVsZW1lbnRzID0gW107XG51bmlmb3JtVHlwZVRvTnVtRWxlbWVudHNbVU5JRk9STVRZUEVfRkxPQVRdID0gMTtcbnVuaWZvcm1UeXBlVG9OdW1FbGVtZW50c1tVTklGT1JNVFlQRV9WRUMyXSA9IDI7XG51bmlmb3JtVHlwZVRvTnVtRWxlbWVudHNbVU5JRk9STVRZUEVfVkVDM10gPSAzO1xudW5pZm9ybVR5cGVUb051bUVsZW1lbnRzW1VOSUZPUk1UWVBFX1ZFQzRdID0gNDtcbnVuaWZvcm1UeXBlVG9OdW1FbGVtZW50c1tVTklGT1JNVFlQRV9JTlRdID0gMTtcbnVuaWZvcm1UeXBlVG9OdW1FbGVtZW50c1tVTklGT1JNVFlQRV9JVkVDMl0gPSAyO1xudW5pZm9ybVR5cGVUb051bUVsZW1lbnRzW1VOSUZPUk1UWVBFX0lWRUMzXSA9IDM7XG51bmlmb3JtVHlwZVRvTnVtRWxlbWVudHNbVU5JRk9STVRZUEVfSVZFQzRdID0gNDtcbnVuaWZvcm1UeXBlVG9OdW1FbGVtZW50c1tVTklGT1JNVFlQRV9CT09MXSA9IDE7XG51bmlmb3JtVHlwZVRvTnVtRWxlbWVudHNbVU5JRk9STVRZUEVfQlZFQzJdID0gMjtcbnVuaWZvcm1UeXBlVG9OdW1FbGVtZW50c1tVTklGT1JNVFlQRV9CVkVDM10gPSAzO1xudW5pZm9ybVR5cGVUb051bUVsZW1lbnRzW1VOSUZPUk1UWVBFX0JWRUM0XSA9IDQ7XG51bmlmb3JtVHlwZVRvTnVtRWxlbWVudHNbVU5JRk9STVRZUEVfTUFUMl0gPSA4OyAgICAvLyAyIHggdmVjNFxudW5pZm9ybVR5cGVUb051bUVsZW1lbnRzW1VOSUZPUk1UWVBFX01BVDNdID0gMTI7ICAgLy8gMyB4IHZlYzRcbnVuaWZvcm1UeXBlVG9OdW1FbGVtZW50c1tVTklGT1JNVFlQRV9NQVQ0XSA9IDE2OyAgIC8vIDQgeCB2ZWM0XG5cbi8vIEhhbmRsZSBhZGRpdGlvbmEgdHlwZXM6XG4vLyAgICAgIFVOSUZPUk1UWVBFX0ZMT0FUQVJSQVkgPSAxNztcbi8vICAgICAgVU5JRk9STVRZUEVfVkVDMkFSUkFZID0gMjE7XG4vLyAgICAgIFVOSUZPUk1UWVBFX1ZFQzNBUlJBWSA9IDIyO1xuLy8gICAgICBVTklGT1JNVFlQRV9WRUM0QVJSQVkgPSAyMztcblxuLyoqXG4gKiBBIGNsYXNzIHN0b3JpbmcgZGVzY3JpcHRpb24gb2YgYW4gaW5kaXZpZHVhbCB1bmlmb3JtLCBzdG9yZWQgaW5zaWRlIGEgdW5pZm9ybSBidWZmZXIuXG4gKlxuICogQGlnbm9yZVxuICovXG5jbGFzcyBVbmlmb3JtRm9ybWF0IHtcbiAgICAvKiogQHR5cGUge3N0cmluZ30gKi9cbiAgICBuYW1lO1xuXG4gICAgLy8gVU5JRk9STVRZUEVfKioqXG4gICAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXG4gICAgdHlwZTtcblxuICAgIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuICAgIGJ5dGVTaXplO1xuXG4gICAgLyoqXG4gICAgICogSW5kZXggb2YgdGhlIHVuaWZvcm0gaW4gYW4gYXJyYXkgb2YgMzJiaXQgdmFsdWVzIChGbG9hdDMyQXJyYXkgYW5kIHNpbWlsYXIpXG4gICAgICpcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIG9mZnNldDtcblxuICAgIC8qKiBAdHlwZSB7U2NvcGVJZH0gKi9cbiAgICBzY29wZUlkO1xuXG4gICAgLyoqXG4gICAgICogQ291bnQgb2YgZWxlbWVudHMgZm9yIGFycmF5cywgb3RoZXJ3aXNlIDEuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIGNvdW50O1xuXG4gICAgY29uc3RydWN0b3IobmFtZSwgdHlwZSwgY291bnQgPSAxKSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG5cbiAgICAgICAgdGhpcy5jb3VudCA9IGNvdW50O1xuICAgICAgICBEZWJ1Zy5hc3NlcnQoY291bnQgPT09IDEsIGBVbmlmb3JtIGFycmF5cyBhcmUgbm90IGN1cnJlbnRseSBzdXBwb3J0ZWQgLSB1bmlmb3JtICR7bmFtZX1gKTtcblxuICAgICAgICBjb25zdCBlbGVtZW50U2l6ZSA9IHVuaWZvcm1UeXBlVG9OdW1FbGVtZW50c1t0eXBlXTtcbiAgICAgICAgRGVidWcuYXNzZXJ0KGVsZW1lbnRTaXplLCBgVW5oYW5kbGVkIHVuaWZvcm0gZm9ybWF0ICR7dHlwZX0gdXNlZCBmb3IgJHtuYW1lfWApO1xuXG4gICAgICAgIHRoaXMuYnl0ZVNpemUgPSBjb3VudCAqIGVsZW1lbnRTaXplICogNDtcbiAgICAgICAgRGVidWcuYXNzZXJ0KHRoaXMuYnl0ZVNpemUsIGBVbmtub3duIGJ5dGUgc2l6ZSBmb3IgdW5pZm9ybSBmb3JtYXQgJHt0eXBlfSB1c2VkIGZvciAke25hbWV9YCk7XG4gICAgfVxuXG4gICAgLy8gc3RkMTQwIHJ1bGVzOiBodHRwczovL3JlZ2lzdHJ5Lmtocm9ub3Mub3JnL09wZW5HTC9zcGVjcy9nbC9nbHNwZWM0NS5jb3JlLnBkZiNwYWdlPTE1OVxuICAgIC8vIFRPRE86IHRoaXMgc3VwcG9ydCBsaW1pdGVkIHN1YnNldCBvZiBmdW5jdGlvbmFsaXR5LCBhcnJheXMgYW5kIHN0cnVjdHMgYXJlIG5vdCBzdXBwb3J0ZWQuXG4gICAgY2FsY3VsYXRlT2Zmc2V0KG9mZnNldCkge1xuXG4gICAgICAgIC8vIE5vdGU6IHZlYzMgaGFzIHRoZSBzYW1lIGFsaWdubWVudCBhcyB2ZWM0XG4gICAgICAgIGNvbnN0IGFsaWdubWVudCA9IHRoaXMuYnl0ZVNpemUgPD0gOCA/IHRoaXMuYnl0ZVNpemUgOiAxNjtcblxuICAgICAgICAvLyBhbGlnbiB0aGUgc3RhcnQgb2Zmc2V0XG4gICAgICAgIG9mZnNldCA9IG1hdGgucm91bmRVcChvZmZzZXQsIGFsaWdubWVudCk7XG4gICAgICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0IC8gNDtcbiAgICB9XG59XG5cbi8qKlxuICogQSBkZXNjcmlwdG9yIHRoYXQgZGVmaW5lcyB0aGUgbGF5b3V0IG9mIG9mIGRhdGEgaW5zaWRlIHRoZSB7QGxpbmsgVW5pZm9ybUJ1ZmZlcn0uXG4gKlxuICogQGlnbm9yZVxuICovXG5jbGFzcyBVbmlmb3JtQnVmZmVyRm9ybWF0IHtcbiAgICAvKiogQHR5cGUge251bWJlcn0gKi9cbiAgICBieXRlU2l6ZSA9IDA7XG5cbiAgICAvKiogQHR5cGUge01hcDxzdHJpbmcsVW5pZm9ybUZvcm1hdD59ICovXG4gICAgbWFwID0gbmV3IE1hcCgpO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IFVuaWZvcm1CdWZmZXJGb3JtYXQgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0dyYXBoaWNzRGV2aWNlfSBncmFwaGljc0RldmljZSAtIFRoZSBncmFwaGljcyBkZXZpY2UuXG4gICAgICogQHBhcmFtIHtVbmlmb3JtRm9ybWF0W119IHVuaWZvcm1zIC0gQW4gYXJyYXkgb2YgdW5pZm9ybXMgdG8gYmUgc3RvcmVkIGluIHRoZSBidWZmZXJcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihncmFwaGljc0RldmljZSwgdW5pZm9ybXMpIHtcbiAgICAgICAgdGhpcy5zY29wZSA9IGdyYXBoaWNzRGV2aWNlLnNjb3BlO1xuXG4gICAgICAgIC8qKiBAdHlwZSB7VW5pZm9ybUZvcm1hdFtdfSAqL1xuICAgICAgICB0aGlzLnVuaWZvcm1zID0gdW5pZm9ybXM7XG5cbiAgICAgICAgLy8gVE9ETzogb3B0aW1pemUgdW5pZm9ybXMgb3JkZXJpbmdcblxuICAgICAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB1bmlmb3Jtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgdW5pZm9ybSA9IHVuaWZvcm1zW2ldO1xuICAgICAgICAgICAgdW5pZm9ybS5jYWxjdWxhdGVPZmZzZXQob2Zmc2V0KTtcbiAgICAgICAgICAgIG9mZnNldCA9IHVuaWZvcm0ub2Zmc2V0ICogNCArIHVuaWZvcm0uYnl0ZVNpemU7XG5cbiAgICAgICAgICAgIHVuaWZvcm0uc2NvcGVJZCA9IHRoaXMuc2NvcGUucmVzb2x2ZSh1bmlmb3JtLm5hbWUpO1xuXG4gICAgICAgICAgICB0aGlzLm1hcC5zZXQodW5pZm9ybS5uYW1lLCB1bmlmb3JtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJvdW5kIHVwIGJ1ZmZlciBzaXplXG4gICAgICAgIHRoaXMuYnl0ZVNpemUgPSBtYXRoLnJvdW5kVXAob2Zmc2V0LCAxNik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBmb3JtYXQgb2YgYSB1bmlmb3JtIHdpdGggc3BlY2lmaWVkIG5hbWUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSB1bmlmb3JtLlxuICAgICAqIEByZXR1cm5zIHtVbmlmb3JtRm9ybWF0fSAtIFRoZSBmb3JtYXQgb2YgdGhlIHVuaWZvcm0uXG4gICAgICovXG4gICAgZ2V0KG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFwLmdldChuYW1lKTtcbiAgICB9XG5cbiAgICBnZXRTaGFkZXJEZWNsYXJhdGlvbihiaW5kR3JvdXAsIGJpbmRJbmRleCkge1xuXG4gICAgICAgIGNvbnN0IG5hbWUgPSBiaW5kR3JvdXBOYW1lc1tiaW5kR3JvdXBdO1xuICAgICAgICBsZXQgY29kZSA9IGBsYXlvdXQoc2V0ID0gJHtiaW5kR3JvdXB9LCBiaW5kaW5nID0gJHtiaW5kSW5kZXh9LCBzdGQxNDApIHVuaWZvcm0gdWJfJHtuYW1lfSB7XFxuYDtcblxuICAgICAgICB0aGlzLnVuaWZvcm1zLmZvckVhY2goKHVuaWZvcm0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHR5cGVTdHJpbmcgPSB1bmlmb3JtVHlwZVRvTmFtZVt1bmlmb3JtLnR5cGVdO1xuICAgICAgICAgICAgRGVidWcuYXNzZXJ0KHR5cGVTdHJpbmcubGVuZ3RoID4gMCwgYFVuaWZvcm0gdHlwZSAke3VuaWZvcm0udHlwZX0gaXMgbm90IGhhbmRsZWQuYCk7XG4gICAgICAgICAgICBjb2RlICs9IGAgICAgJHt0eXBlU3RyaW5nfSAke3VuaWZvcm0ubmFtZX07XFxuYDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGNvZGUgKyAnfTtcXG4nO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgVW5pZm9ybUZvcm1hdCwgVW5pZm9ybUJ1ZmZlckZvcm1hdCB9O1xuIl0sIm5hbWVzIjpbInVuaWZvcm1UeXBlVG9OdW1FbGVtZW50cyIsIlVOSUZPUk1UWVBFX0ZMT0FUIiwiVU5JRk9STVRZUEVfVkVDMiIsIlVOSUZPUk1UWVBFX1ZFQzMiLCJVTklGT1JNVFlQRV9WRUM0IiwiVU5JRk9STVRZUEVfSU5UIiwiVU5JRk9STVRZUEVfSVZFQzIiLCJVTklGT1JNVFlQRV9JVkVDMyIsIlVOSUZPUk1UWVBFX0lWRUM0IiwiVU5JRk9STVRZUEVfQk9PTCIsIlVOSUZPUk1UWVBFX0JWRUMyIiwiVU5JRk9STVRZUEVfQlZFQzMiLCJVTklGT1JNVFlQRV9CVkVDNCIsIlVOSUZPUk1UWVBFX01BVDIiLCJVTklGT1JNVFlQRV9NQVQzIiwiVU5JRk9STVRZUEVfTUFUNCIsIlVuaWZvcm1Gb3JtYXQiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJ0eXBlIiwiY291bnQiLCJieXRlU2l6ZSIsIm9mZnNldCIsInNjb3BlSWQiLCJEZWJ1ZyIsImFzc2VydCIsImVsZW1lbnRTaXplIiwiY2FsY3VsYXRlT2Zmc2V0IiwiYWxpZ25tZW50IiwibWF0aCIsInJvdW5kVXAiLCJVbmlmb3JtQnVmZmVyRm9ybWF0IiwiZ3JhcGhpY3NEZXZpY2UiLCJ1bmlmb3JtcyIsIm1hcCIsIk1hcCIsInNjb3BlIiwiaSIsImxlbmd0aCIsInVuaWZvcm0iLCJyZXNvbHZlIiwic2V0IiwiZ2V0IiwiZ2V0U2hhZGVyRGVjbGFyYXRpb24iLCJiaW5kR3JvdXAiLCJiaW5kSW5kZXgiLCJiaW5kR3JvdXBOYW1lcyIsImNvZGUiLCJmb3JFYWNoIiwidHlwZVN0cmluZyIsInVuaWZvcm1UeXBlVG9OYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFjQSxNQUFNQSx3QkFBd0IsR0FBRyxFQUFqQyxDQUFBO0FBQ0FBLHdCQUF3QixDQUFDQyxpQkFBRCxDQUF4QixHQUE4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
