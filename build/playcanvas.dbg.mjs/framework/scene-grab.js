/**
 * @license
 * PlayCanvas Engine v1.57.1 revision 256dd83c2 (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { PIXELFORMAT_R8_G8_B8_A8, PIXELFORMAT_R8_G8_B8, FILTER_NEAREST, FILTER_LINEAR_MIPMAP_LINEAR, FILTER_LINEAR, ADDRESS_CLAMP_TO_EDGE, PIXELFORMAT_DEPTHSTENCIL } from '../graphics/constants.js';
import { RenderTarget } from '../graphics/render-target.js';
import { Texture } from '../graphics/texture.js';
import { DebugGraphics } from '../graphics/debug-graphics.js';
import { LAYERID_DEPTH, SHADER_DEPTH, LAYERID_WORLD } from '../scene/constants.js';
import { Layer } from '../scene/layer.js';

const _depthUniformNames = ['uSceneDepthMap', 'uDepthMap'];
const _colorUniformNames = ['uSceneColorMap', 'texture_grabPass'];

class SceneGrab {
  constructor(application) {
    this.application = application;
    this.device = application.graphicsDevice;
    this.layer = null;
    this.colorFormat = this.device.defaultFramebufferAlpha ? PIXELFORMAT_R8_G8_B8_A8 : PIXELFORMAT_R8_G8_B8;

    if (this.device.webgl2) {
      this.initWebGl2();
    } else {
      this.initWebGl1();
    }
  }

  setupUniform(device, depth, buffer) {
    const names = depth ? _depthUniformNames : _colorUniformNames;
    names.forEach(name => device.scope.resolve(name).setValue(buffer));
  }

  allocateTexture(device, source, name, format, isDepth, mipmaps) {
    return new Texture(device, {
      name,
      format,
      width: source ? source.colorBuffer.width : device.width,
      height: source ? source.colorBuffer.height : device.height,
      mipmaps,
      minFilter: isDepth ? FILTER_NEAREST : mipmaps ? FILTER_LINEAR_MIPMAP_LINEAR : FILTER_LINEAR,
      magFilter: isDepth ? FILTER_NEAREST : FILTER_LINEAR,
      addressU: ADDRESS_CLAMP_TO_EDGE,
      addressV: ADDRESS_CLAMP_TO_EDGE
    });
  }

  resizeCondition(target, source, device) {
    const width = (source == null ? void 0 : source.width) || device.width;
    const height = (source == null ? void 0 : source.height) || device.height;
    return !target || width !== target.width || height !== target.height;
  }

  allocateRenderTarget(renderTarget, sourceRenderTarget, device, format, isDepth, mipmaps, isDepthUniforms) {
    const names = isDepthUniforms ? _depthUniformNames : _colorUniformNames;
    const buffer = this.allocateTexture(device, sourceRenderTarget, names[0], format, isDepth, mipmaps);

    if (renderTarget) {
      renderTarget.destroyFrameBuffers();

      if (isDepth) {
        renderTarget._depthBuffer = buffer;
      } else {
        renderTarget._colorBuffer = buffer;
      }
    } else {
      renderTarget = new RenderTarget({
        name: 'renderTargetSceneGrab',
        colorBuffer: isDepth ? null : buffer,
        depthBuffer: isDepth ? buffer : null,
        depth: !isDepth,
        stencil: device.supportsStencil,
        autoResolve: false
      });
    }

    return renderTarget;
  }

  releaseRenderTarget(rt) {
    if (rt) {
      rt.destroyTextureBuffers();
      rt.destroy();
    }
  }

  initWebGl2() {
    const app = this.application;
    const self = this;
    this.layer = new Layer({
      enabled: false,
      name: "Depth",
      id: LAYERID_DEPTH,
      onDisable: function () {
        self.releaseRenderTarget(this.depthRenderTarget);
        this.depthRenderTarget = null;
        self.releaseRenderTarget(this.colorRenderTarget);
        this.colorRenderTarget = null;
      },
      onPreRenderOpaque: function (cameraPass) {
        const device = app.graphicsDevice;
        const camera = this.cameras[cameraPass];

        if (camera.renderSceneColorMap) {
          var _camera$renderTarget;

          if (self.resizeCondition(this.colorRenderTarget, (_camera$renderTarget = camera.renderTarget) == null ? void 0 : _camera$renderTarget.colorBuffer, device)) {
            self.releaseRenderTarget(this.colorRenderTarget);
            this.colorRenderTarget = self.allocateRenderTarget(this.colorRenderTarget, camera.renderTarget, device, this.colorFormat, false, true, false);
          }

          DebugGraphics.pushGpuMarker(device, 'GRAB-COLOR');
          device.copyRenderTarget(device.renderTarget, this.colorRenderTarget, true, false);
          device.activeTexture(device.maxCombinedTextures - 1);
          const colorBuffer = this.colorRenderTarget.colorBuffer;
          device.bindTexture(colorBuffer);
          device.gl.generateMipmap(colorBuffer.impl._glTarget);
          DebugGraphics.popGpuMarker(device);
          self.setupUniform(device, false, colorBuffer);
        }

        if (camera.renderSceneDepthMap) {
          var _camera$renderTarget2;

          if (self.resizeCondition(this.depthRenderTarget, (_camera$renderTarget2 = camera.renderTarget) == null ? void 0 : _camera$renderTarget2.depthBuffer, device)) {
            self.releaseRenderTarget(this.depthRenderTarget);
            this.depthRenderTarget = self.allocateRenderTarget(this.depthRenderTarget, camera.renderTarget, device, PIXELFORMAT_DEPTHSTENCIL, true, false, true);
          }

          DebugGraphics.pushGpuMarker(device, 'GRAB-DEPTH');
          device.copyRenderTarget(device.renderTarget, this.depthRenderTarget, false, true);
          DebugGraphics.popGpuMarker(device);
          self.setupUniform(device, true, this.depthRenderTarget.depthBuffer);
        }
      },
      onPostRenderOpaque: function (cameraPass) {}
    });
  }

  initWebGl1() {
    const app = this.application;
    const self = this;
    this.layer = new Layer({
      enabled: false,
      name: "Depth",
      id: LAYERID_DEPTH,
      shaderPass: SHADER_DEPTH,
      onEnable: function () {
        this.depthRenderTarget = new RenderTarget({
          name: 'depthRenderTarget-webgl1',
          depth: true,
          stencil: app.graphicsDevice.supportsStencil,
          autoResolve: false,
          graphicsDevice: app.graphicsDevice
        });
        this.renderTarget = this.depthRenderTarget;
      },
      onDisable: function () {
        this.depthRenderTarget.destroyTextureBuffers();
        this.renderTarget = null;
        self.releaseRenderTarget(this.colorRenderTarget);
        this.colorRenderTarget = null;
      },
      onPostCull: function (cameraPass) {
        const device = app.graphicsDevice;
        const camera = this.cameras[cameraPass];

        if (camera.renderSceneDepthMap) {
          var _camera$renderTarget3;

          if (self.resizeCondition(this.depthRenderTarget, (_camera$renderTarget3 = camera.renderTarget) == null ? void 0 : _camera$renderTarget3.depthBuffer, device)) {
            this.depthRenderTarget.destroyTextureBuffers();
            this.depthRenderTarget = self.allocateRenderTarget(this.depthRenderTarget, camera.renderTarget, device, PIXELFORMAT_R8_G8_B8_A8, false, false, true);
          }

          const visibleObjects = this.instances.visibleOpaque[cameraPass];
          const visibleList = visibleObjects.list;
          const layerComposition = app.scene.layers;
          const subLayerEnabled = layerComposition.subLayerEnabled;
          const isTransparent = layerComposition.subLayerList;
          const rt = app.scene.layers.getLayerById(LAYERID_WORLD).renderTarget;
          const cam = this.cameras[cameraPass];
          let visibleLength = 0;
          const layers = layerComposition.layerList;

          for (let i = 0; i < layers.length; i++) {
            const layer = layers[i];
            if (layer === this) break;
            if (layer.renderTarget !== rt || !layer.enabled || !subLayerEnabled[i]) continue;
            const layerCamId = layer.cameras.indexOf(cam);
            if (layerCamId < 0) continue;
            const transparent = isTransparent[i];
            let layerVisibleList = transparent ? layer.instances.visibleTransparent[layerCamId] : layer.instances.visibleOpaque[layerCamId];
            const layerVisibleListLength = layerVisibleList.length;
            layerVisibleList = layerVisibleList.list;

            for (let j = 0; j < layerVisibleListLength; j++) {
              const drawCall = layerVisibleList[j];

              if (drawCall.material && drawCall.material.depthWrite && !drawCall._noDepthDrawGl1) {
                visibleList[visibleLength] = drawCall;
                visibleLength++;
              }
            }
          }

          visibleObjects.length = visibleLength;
        }
      },
      onPreRenderOpaque: function (cameraPass) {
        const device = app.graphicsDevice;
        const camera = this.cameras[cameraPass];

        if (camera.renderSceneColorMap) {
          var _camera$renderTarget4;

          if (self.resizeCondition(this.colorRenderTarget, (_camera$renderTarget4 = camera.renderTarget) == null ? void 0 : _camera$renderTarget4.colorBuffer, device)) {
            self.releaseRenderTarget(this.colorRenderTarget);
            this.colorRenderTarget = self.allocateRenderTarget(this.colorRenderTarget, camera.renderTarget, device, this.colorFormat, false, false, false);
          }

          DebugGraphics.pushGpuMarker(device, 'GRAB-COLOR');
          const colorBuffer = this.colorRenderTarget._colorBuffer;

          if (!colorBuffer.impl._glTexture) {
            colorBuffer.impl.initialize(device, colorBuffer);
          }

          device.bindTexture(colorBuffer);
          const gl = device.gl;
          gl.copyTexImage2D(gl.TEXTURE_2D, 0, colorBuffer.impl._glFormat, 0, 0, colorBuffer.width, colorBuffer.height, 0);
          colorBuffer._needsUpload = false;
          colorBuffer._needsMipmapsUpload = false;
          DebugGraphics.popGpuMarker(device);
          self.setupUniform(device, false, colorBuffer);
        }

        if (camera.renderSceneDepthMap) {
          self.setupUniform(device, true, this.depthRenderTarget.colorBuffer);
        }
      },
      onDrawCall: function () {
        app.graphicsDevice.setColorWrite(true, true, true, true);
      },
      onPostRenderOpaque: function (cameraPass) {
        const camera = this.cameras[cameraPass];

        if (camera.renderSceneDepthMap) {
          const visibleObjects = this.instances.visibleOpaque[cameraPass];
          visibleObjects.length = 0;
        }
      }
    });
  }

  patch(layer) {
    layer.onEnable = this.layer.onEnable;
    layer.onDisable = this.layer.onDisable;
    layer.onPreRenderOpaque = this.layer.onPreRenderOpaque;
    layer.onPostRenderOpaque = this.layer.onPostRenderOpaque;
    layer.shaderPass = this.layer.shaderPass;
    layer.onPostCull = this.layer.onPostCull;
    layer.onDrawCall = this.layer.onDrawCall;
  }

}

export { SceneGrab };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NlbmUtZ3JhYi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2ZyYW1ld29yay9zY2VuZS1ncmFiLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQUREUkVTU19DTEFNUF9UT19FREdFLFxuICAgIEZJTFRFUl9ORUFSRVNULCBGSUxURVJfTElORUFSLCBGSUxURVJfTElORUFSX01JUE1BUF9MSU5FQVIsXG4gICAgUElYRUxGT1JNQVRfREVQVEhTVEVOQ0lMLCBQSVhFTEZPUk1BVF9SOF9HOF9COF9BOCwgUElYRUxGT1JNQVRfUjhfRzhfQjhcbn0gZnJvbSAnLi4vZ3JhcGhpY3MvY29uc3RhbnRzLmpzJztcblxuaW1wb3J0IHsgUmVuZGVyVGFyZ2V0IH0gZnJvbSAnLi4vZ3JhcGhpY3MvcmVuZGVyLXRhcmdldC5qcyc7XG5pbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSAnLi4vZ3JhcGhpY3MvdGV4dHVyZS5qcyc7XG5pbXBvcnQgeyBEZWJ1Z0dyYXBoaWNzIH0gZnJvbSAnLi4vZ3JhcGhpY3MvZGVidWctZ3JhcGhpY3MuanMnO1xuXG5pbXBvcnQge1xuICAgIExBWUVSSURfREVQVEgsIExBWUVSSURfV09STEQsXG4gICAgU0hBREVSX0RFUFRIXG59IGZyb20gJy4uL3NjZW5lL2NvbnN0YW50cy5qcyc7XG5cbmltcG9ydCB7IExheWVyIH0gZnJvbSAnLi4vc2NlbmUvbGF5ZXIuanMnO1xuXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi4vZ3JhcGhpY3MvZ3JhcGhpY3MtZGV2aWNlLmpzJykuR3JhcGhpY3NEZXZpY2V9IEdyYXBoaWNzRGV2aWNlICovXG4vKiogQHR5cGVkZWYge2ltcG9ydCgnLi9jb21wb25lbnRzL2NhbWVyYS9jb21wb25lbnQuanMnKS5DYW1lcmFDb21wb25lbnR9IENhbWVyYUNvbXBvbmVudCAqL1xuXG4vLyB1bmlmb3JtIG5hbWVzIChmaXJzdCBpcyBjdXJyZW50IG5hbWUsIHNlY29uZCBvbmUgaXMgZGVwcmVjYXRlZCBuYW1lIGZvciBjb21wYXRpYmlsaXR5KVxuY29uc3QgX2RlcHRoVW5pZm9ybU5hbWVzID0gWyd1U2NlbmVEZXB0aE1hcCcsICd1RGVwdGhNYXAnXTtcbmNvbnN0IF9jb2xvclVuaWZvcm1OYW1lcyA9IFsndVNjZW5lQ29sb3JNYXAnLCAndGV4dHVyZV9ncmFiUGFzcyddO1xuXG4vKipcbiAqIEludGVybmFsIGNsYXNzIGFic3RyYWN0aW5nIHRoZSBhY2Nlc3MgdG8gdGhlIGRlcHRoIGFuZCBjb2xvciB0ZXh0dXJlIG9mIHRoZSBzY2VuZS5cbiAqIGNvbG9yIGZyYW1lIGJ1ZmZlciBpcyBjb3BpZWQgdG8gYSB0ZXh0dXJlXG4gKiBGb3Igd2ViZ2wgMiBkZXZpY2VzLCB0aGUgZGVwdGggYnVmZmVyIGlzIGNvcGllZCB0byBhIHRleHR1cmVcbiAqIGZvciB3ZWJnbCAxIGRldmljZXMsIHRoZSBzY2VuZSdzIGRlcHRoIGlzIHJlbmRlcmVkIHRvIGEgc2VwYXJhdGUgUkdCQSB0ZXh0dXJlXG4gKlxuICogVE9ETzogaW1wbGVtZW50IG1pcG1hcHBlZCBjb2xvciBidWZmZXIgc3VwcG9ydCBmb3IgV2ViR0wgMSBhcyB3ZWxsLCB3aGljaCByZXF1aXJlc1xuICogdGhlIHRleHR1cmUgdG8gYmUgYSBwb3dlciBvZiB0d28sIGJ5IGZpcnN0IGRvd25zY2FsaW5nIHRoZSBjYXB0dXJlZCBmcmFtZWJ1ZmZlclxuICogdGV4dHVyZSB0byBzbWFsbGVyIHBvd2VyIG9mIDIgdGV4dHVyZSwgYW5kIHRoZW4gZ2VuZXJhdGUgbWlwbWFwcyBhbmQgdXNlIGl0IGZvciByZW5kZXJpbmdcbiAqIFRPRE86IG9yIGV2ZW4gYmV0dGVyLCBpbXBsZW1lbnQgYmx1ciBmaWx0ZXIgdG8gaGF2ZSBzbW9vdGhlciBsb3dlciBsZXZlbHNcbiAqXG4gKiBAaWdub3JlXG4gKi9cbmNsYXNzIFNjZW5lR3JhYiB7XG4gICAgY29uc3RydWN0b3IoYXBwbGljYXRpb24pIHtcbiAgICAgICAgdGhpcy5hcHBsaWNhdGlvbiA9IGFwcGxpY2F0aW9uO1xuXG4gICAgICAgIC8qKiBAdHlwZSB7R3JhcGhpY3NEZXZpY2V9ICovXG4gICAgICAgIHRoaXMuZGV2aWNlID0gYXBwbGljYXRpb24uZ3JhcGhpY3NEZXZpY2U7XG5cbiAgICAgICAgLy8gY3JlYXRlIGRlcHRoIGxheWVyXG4gICAgICAgIHRoaXMubGF5ZXIgPSBudWxsO1xuXG4gICAgICAgIC8vIGNvbG9yIGJ1ZmZlciBmb3JtYXRcbiAgICAgICAgdGhpcy5jb2xvckZvcm1hdCA9IHRoaXMuZGV2aWNlLmRlZmF1bHRGcmFtZWJ1ZmZlckFscGhhID8gUElYRUxGT1JNQVRfUjhfRzhfQjhfQTggOiBQSVhFTEZPUk1BVF9SOF9HOF9CODtcblxuICAgICAgICAvLyBjcmVhdGUgYSBkZXB0aCBsYXllciwgd2hpY2ggaXMgYSBkZWZhdWx0IGRlcHRoIGxheWVyLCBidXQgYWxzbyBhIHRlbXBsYXRlIHVzZWRcbiAgICAgICAgLy8gdG8gcGF0Y2ggYXBwbGljYXRpb24gY3JlYXRlZCBkZXB0aCBsYXllcnMgdG8gYmVoYXZlIGFzIG9uZVxuICAgICAgICBpZiAodGhpcy5kZXZpY2Uud2ViZ2wyKSB7XG4gICAgICAgICAgICB0aGlzLmluaXRXZWJHbDIoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaW5pdFdlYkdsMSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0dXBVbmlmb3JtKGRldmljZSwgZGVwdGgsIGJ1ZmZlcikge1xuXG4gICAgICAgIC8vIGFzc2lnbiBpdCB0byBzY29wZXMgdG8gZXhwb3NlIGl0IHRvIHNoYWRlcnNcbiAgICAgICAgY29uc3QgbmFtZXMgPSBkZXB0aCA/IF9kZXB0aFVuaWZvcm1OYW1lcyA6IF9jb2xvclVuaWZvcm1OYW1lcztcbiAgICAgICAgbmFtZXMuZm9yRWFjaChuYW1lID0+IGRldmljZS5zY29wZS5yZXNvbHZlKG5hbWUpLnNldFZhbHVlKGJ1ZmZlcikpO1xuICAgIH1cblxuICAgIGFsbG9jYXRlVGV4dHVyZShkZXZpY2UsIHNvdXJjZSwgbmFtZSwgZm9ybWF0LCBpc0RlcHRoLCBtaXBtYXBzKSB7XG5cbiAgICAgICAgLy8gYWxsb2NhdGUgdGV4dHVyZSB0aGF0IHdpbGwgc3RvcmUgdGhlIGRlcHRoXG4gICAgICAgIHJldHVybiBuZXcgVGV4dHVyZShkZXZpY2UsIHtcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBmb3JtYXQsXG4gICAgICAgICAgICB3aWR0aDogc291cmNlID8gc291cmNlLmNvbG9yQnVmZmVyLndpZHRoIDogZGV2aWNlLndpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiBzb3VyY2UgPyBzb3VyY2UuY29sb3JCdWZmZXIuaGVpZ2h0IDogZGV2aWNlLmhlaWdodCxcbiAgICAgICAgICAgIG1pcG1hcHMsXG4gICAgICAgICAgICBtaW5GaWx0ZXI6IGlzRGVwdGggPyBGSUxURVJfTkVBUkVTVCA6IChtaXBtYXBzID8gRklMVEVSX0xJTkVBUl9NSVBNQVBfTElORUFSIDogRklMVEVSX0xJTkVBUiksXG4gICAgICAgICAgICBtYWdGaWx0ZXI6IGlzRGVwdGggPyBGSUxURVJfTkVBUkVTVCA6IEZJTFRFUl9MSU5FQVIsXG4gICAgICAgICAgICBhZGRyZXNzVTogQUREUkVTU19DTEFNUF9UT19FREdFLFxuICAgICAgICAgICAgYWRkcmVzc1Y6IEFERFJFU1NfQ0xBTVBfVE9fRURHRVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZXNpemVDb25kaXRpb24odGFyZ2V0LCBzb3VyY2UsIGRldmljZSkge1xuICAgICAgICBjb25zdCB3aWR0aCA9IHNvdXJjZT8ud2lkdGggfHwgZGV2aWNlLndpZHRoO1xuICAgICAgICBjb25zdCBoZWlnaHQgPSBzb3VyY2U/LmhlaWdodCB8fCBkZXZpY2UuaGVpZ2h0O1xuICAgICAgICByZXR1cm4gIXRhcmdldCB8fCB3aWR0aCAhPT0gdGFyZ2V0LndpZHRoIHx8IGhlaWdodCAhPT0gdGFyZ2V0LmhlaWdodDtcbiAgICB9XG5cbiAgICBhbGxvY2F0ZVJlbmRlclRhcmdldChyZW5kZXJUYXJnZXQsIHNvdXJjZVJlbmRlclRhcmdldCwgZGV2aWNlLCBmb3JtYXQsIGlzRGVwdGgsIG1pcG1hcHMsIGlzRGVwdGhVbmlmb3Jtcykge1xuXG4gICAgICAgIC8vIHRleHR1cmUgLyB1bmlmb3JtIG5hbWVzOiBuZXcgb25lIChmaXJzdCksIGFzIHdlbGwgYXMgb2xkIG9uZSAgKHNlY29uZCkgZm9yIGNvbXBhdGliaWxpdHlcbiAgICAgICAgY29uc3QgbmFtZXMgPSBpc0RlcHRoVW5pZm9ybXMgPyBfZGVwdGhVbmlmb3JtTmFtZXMgOiBfY29sb3JVbmlmb3JtTmFtZXM7XG5cbiAgICAgICAgLy8gYWxsb2NhdGUgdGV4dHVyZSBidWZmZXJcbiAgICAgICAgY29uc3QgYnVmZmVyID0gdGhpcy5hbGxvY2F0ZVRleHR1cmUoZGV2aWNlLCBzb3VyY2VSZW5kZXJUYXJnZXQsIG5hbWVzWzBdLCBmb3JtYXQsIGlzRGVwdGgsIG1pcG1hcHMpO1xuXG4gICAgICAgIGlmIChyZW5kZXJUYXJnZXQpIHtcblxuICAgICAgICAgICAgLy8gaWYgcmVhbGxvY2F0aW5nIFJUIHNpemUsIHJlbGVhc2UgcHJldmlvdXMgZnJhbWVidWZmZXJcbiAgICAgICAgICAgIHJlbmRlclRhcmdldC5kZXN0cm95RnJhbWVCdWZmZXJzKCk7XG5cbiAgICAgICAgICAgIC8vIGFzc2lnbiBuZXcgdGV4dHVyZVxuICAgICAgICAgICAgaWYgKGlzRGVwdGgpIHtcbiAgICAgICAgICAgICAgICByZW5kZXJUYXJnZXQuX2RlcHRoQnVmZmVyID0gYnVmZmVyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZW5kZXJUYXJnZXQuX2NvbG9yQnVmZmVyID0gYnVmZmVyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAvLyBjcmVhdGUgbmV3IHJlbmRlciB0YXJnZXQgd2l0aCB0aGUgdGV4dHVyZVxuICAgICAgICAgICAgcmVuZGVyVGFyZ2V0ID0gbmV3IFJlbmRlclRhcmdldCh7XG4gICAgICAgICAgICAgICAgbmFtZTogJ3JlbmRlclRhcmdldFNjZW5lR3JhYicsXG4gICAgICAgICAgICAgICAgY29sb3JCdWZmZXI6IGlzRGVwdGggPyBudWxsIDogYnVmZmVyLFxuICAgICAgICAgICAgICAgIGRlcHRoQnVmZmVyOiBpc0RlcHRoID8gYnVmZmVyIDogbnVsbCxcbiAgICAgICAgICAgICAgICBkZXB0aDogIWlzRGVwdGgsXG4gICAgICAgICAgICAgICAgc3RlbmNpbDogZGV2aWNlLnN1cHBvcnRzU3RlbmNpbCxcbiAgICAgICAgICAgICAgICBhdXRvUmVzb2x2ZTogZmFsc2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlbmRlclRhcmdldDtcbiAgICB9XG5cbiAgICByZWxlYXNlUmVuZGVyVGFyZ2V0KHJ0KSB7XG5cbiAgICAgICAgaWYgKHJ0KSB7XG4gICAgICAgICAgICBydC5kZXN0cm95VGV4dHVyZUJ1ZmZlcnMoKTtcbiAgICAgICAgICAgIHJ0LmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGluaXRXZWJHbDIoKSB7XG5cbiAgICAgICAgY29uc3QgYXBwID0gdGhpcy5hcHBsaWNhdGlvbjtcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICAgICAgLy8gV2ViR0wgMiBkZXB0aCBsYXllciBqdXN0IGNvcGllcyBleGlzdGluZyBjb2xvciBvciBkZXB0aFxuICAgICAgICB0aGlzLmxheWVyID0gbmV3IExheWVyKHtcbiAgICAgICAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgbmFtZTogXCJEZXB0aFwiLFxuICAgICAgICAgICAgaWQ6IExBWUVSSURfREVQVEgsXG5cbiAgICAgICAgICAgIG9uRGlzYWJsZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHNlbGYucmVsZWFzZVJlbmRlclRhcmdldCh0aGlzLmRlcHRoUmVuZGVyVGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB0aGlzLmRlcHRoUmVuZGVyVGFyZ2V0ID0gbnVsbDtcblxuICAgICAgICAgICAgICAgIHNlbGYucmVsZWFzZVJlbmRlclRhcmdldCh0aGlzLmNvbG9yUmVuZGVyVGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbG9yUmVuZGVyVGFyZ2V0ID0gbnVsbDtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIG9uUHJlUmVuZGVyT3BhcXVlOiBmdW5jdGlvbiAoY2FtZXJhUGFzcykgeyAvLyByZXNpemUgZGVwdGggbWFwIGlmIG5lZWRlZFxuXG4gICAgICAgICAgICAgICAgLyoqIEB0eXBlIHtHcmFwaGljc0RldmljZX0gKi9cbiAgICAgICAgICAgICAgICBjb25zdCBkZXZpY2UgPSBhcHAuZ3JhcGhpY3NEZXZpY2U7XG5cbiAgICAgICAgICAgICAgICAvKiogQHR5cGUge0NhbWVyYUNvbXBvbmVudH0gKi9cbiAgICAgICAgICAgICAgICBjb25zdCBjYW1lcmEgPSB0aGlzLmNhbWVyYXNbY2FtZXJhUGFzc107XG5cbiAgICAgICAgICAgICAgICBpZiAoY2FtZXJhLnJlbmRlclNjZW5lQ29sb3JNYXApIHtcblxuICAgICAgICAgICAgICAgICAgICAvLyBhbGxvY2F0ZSAvIHJlc2l6ZSBleGlzdGluZyBSVCBhcyBuZWVkZWRcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYucmVzaXplQ29uZGl0aW9uKHRoaXMuY29sb3JSZW5kZXJUYXJnZXQsIGNhbWVyYS5yZW5kZXJUYXJnZXQ/LmNvbG9yQnVmZmVyLCBkZXZpY2UpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJlbGVhc2VSZW5kZXJUYXJnZXQodGhpcy5jb2xvclJlbmRlclRhcmdldCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbG9yUmVuZGVyVGFyZ2V0ID0gc2VsZi5hbGxvY2F0ZVJlbmRlclRhcmdldCh0aGlzLmNvbG9yUmVuZGVyVGFyZ2V0LCBjYW1lcmEucmVuZGVyVGFyZ2V0LCBkZXZpY2UsIHRoaXMuY29sb3JGb3JtYXQsIGZhbHNlLCB0cnVlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBjb3B5IGNvbG9yIGZyb20gdGhlIGN1cnJlbnQgcmVuZGVyIHRhcmdldFxuICAgICAgICAgICAgICAgICAgICBEZWJ1Z0dyYXBoaWNzLnB1c2hHcHVNYXJrZXIoZGV2aWNlLCAnR1JBQi1DT0xPUicpO1xuXG4gICAgICAgICAgICAgICAgICAgIGRldmljZS5jb3B5UmVuZGVyVGFyZ2V0KGRldmljZS5yZW5kZXJUYXJnZXQsIHRoaXMuY29sb3JSZW5kZXJUYXJnZXQsIHRydWUsIGZhbHNlKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBnZW5lcmF0ZSBtaXBtYXBzXG4gICAgICAgICAgICAgICAgICAgIGRldmljZS5hY3RpdmVUZXh0dXJlKGRldmljZS5tYXhDb21iaW5lZFRleHR1cmVzIC0gMSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbG9yQnVmZmVyID0gdGhpcy5jb2xvclJlbmRlclRhcmdldC5jb2xvckJ1ZmZlcjtcbiAgICAgICAgICAgICAgICAgICAgZGV2aWNlLmJpbmRUZXh0dXJlKGNvbG9yQnVmZmVyKTtcbiAgICAgICAgICAgICAgICAgICAgZGV2aWNlLmdsLmdlbmVyYXRlTWlwbWFwKGNvbG9yQnVmZmVyLmltcGwuX2dsVGFyZ2V0KTtcblxuICAgICAgICAgICAgICAgICAgICBEZWJ1Z0dyYXBoaWNzLnBvcEdwdU1hcmtlcihkZXZpY2UpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGFzc2lnbiB1bmlmcm9tXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2V0dXBVbmlmb3JtKGRldmljZSwgZmFsc2UsIGNvbG9yQnVmZmVyKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoY2FtZXJhLnJlbmRlclNjZW5lRGVwdGhNYXApIHtcblxuICAgICAgICAgICAgICAgICAgICAvLyByZWFsbG9jYXRlIFJUIGlmIG5lZWRlZFxuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5yZXNpemVDb25kaXRpb24odGhpcy5kZXB0aFJlbmRlclRhcmdldCwgY2FtZXJhLnJlbmRlclRhcmdldD8uZGVwdGhCdWZmZXIsIGRldmljZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYucmVsZWFzZVJlbmRlclRhcmdldCh0aGlzLmRlcHRoUmVuZGVyVGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVwdGhSZW5kZXJUYXJnZXQgPSBzZWxmLmFsbG9jYXRlUmVuZGVyVGFyZ2V0KHRoaXMuZGVwdGhSZW5kZXJUYXJnZXQsIGNhbWVyYS5yZW5kZXJUYXJnZXQsIGRldmljZSwgUElYRUxGT1JNQVRfREVQVEhTVEVOQ0lMLCB0cnVlLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBjb3B5IGRlcHRoXG4gICAgICAgICAgICAgICAgICAgIERlYnVnR3JhcGhpY3MucHVzaEdwdU1hcmtlcihkZXZpY2UsICdHUkFCLURFUFRIJyk7XG4gICAgICAgICAgICAgICAgICAgIGRldmljZS5jb3B5UmVuZGVyVGFyZ2V0KGRldmljZS5yZW5kZXJUYXJnZXQsIHRoaXMuZGVwdGhSZW5kZXJUYXJnZXQsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgRGVidWdHcmFwaGljcy5wb3BHcHVNYXJrZXIoZGV2aWNlKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBhc3NpZ24gdW5pZnJvbVxuICAgICAgICAgICAgICAgICAgICBzZWxmLnNldHVwVW5pZm9ybShkZXZpY2UsIHRydWUsIHRoaXMuZGVwdGhSZW5kZXJUYXJnZXQuZGVwdGhCdWZmZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIG9uUG9zdFJlbmRlck9wYXF1ZTogZnVuY3Rpb24gKGNhbWVyYVBhc3MpIHtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaW5pdFdlYkdsMSgpIHtcblxuICAgICAgICBjb25zdCBhcHAgPSB0aGlzLmFwcGxpY2F0aW9uO1xuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgICAgICAvLyBXZWJHTCAxIGRlcHRoIGxheWVyIHJlbmRlcnMgdGhlIHNhbWUgb2JqZWN0cyBhcyBpbiBXb3JsZCwgYnV0IHdpdGggUkdCQS1lbmNvZGVkIGRlcHRoIHNoYWRlciB0byBnZXQgZGVwdGhcbiAgICAgICAgdGhpcy5sYXllciA9IG5ldyBMYXllcih7XG4gICAgICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgICAgIG5hbWU6IFwiRGVwdGhcIixcbiAgICAgICAgICAgIGlkOiBMQVlFUklEX0RFUFRILFxuICAgICAgICAgICAgc2hhZGVyUGFzczogU0hBREVSX0RFUFRILFxuXG4gICAgICAgICAgICBvbkVuYWJsZTogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgLy8gY3JlYXRlIFJUIHdpdGhvdXQgdGV4dHVyZXMsIHRob3NlIHdpbGwgYmUgY3JlYXRlZCBhcyBuZWVkZWQgbGF0ZXJcbiAgICAgICAgICAgICAgICB0aGlzLmRlcHRoUmVuZGVyVGFyZ2V0ID0gbmV3IFJlbmRlclRhcmdldCh7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6ICdkZXB0aFJlbmRlclRhcmdldC13ZWJnbDEnLFxuICAgICAgICAgICAgICAgICAgICBkZXB0aDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgc3RlbmNpbDogYXBwLmdyYXBoaWNzRGV2aWNlLnN1cHBvcnRzU3RlbmNpbCxcbiAgICAgICAgICAgICAgICAgICAgYXV0b1Jlc29sdmU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBncmFwaGljc0RldmljZTogYXBwLmdyYXBoaWNzRGV2aWNlXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyBhc3NpZ24gaXQgc28gdGhlIHJlbmRlciBhY3Rpb25zIGtub3dzIHRvIHJlbmRlciB0byBpdFxuICAgICAgICAgICAgICAgIC8vIFRPRE86IGF2b2lkIHRoaXMgYXMgdGhpcyBBUEkgaXMgZGVwcmVjYXRlZFxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyVGFyZ2V0ID0gdGhpcy5kZXB0aFJlbmRlclRhcmdldDtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIG9uRGlzYWJsZTogZnVuY3Rpb24gKCkge1xuXG4gICAgICAgICAgICAgICAgLy8gb25seSByZWxlYXNlIGRlcHRoIHRleHR1cmUsIGJ1dCBub3QgdGhlIHJlbmRlciB0YXJnZXQgaXRzZWxmXG4gICAgICAgICAgICAgICAgdGhpcy5kZXB0aFJlbmRlclRhcmdldC5kZXN0cm95VGV4dHVyZUJ1ZmZlcnMoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlclRhcmdldCA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICBzZWxmLnJlbGVhc2VSZW5kZXJUYXJnZXQodGhpcy5jb2xvclJlbmRlclRhcmdldCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jb2xvclJlbmRlclRhcmdldCA9IG51bGw7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBvblBvc3RDdWxsOiBmdW5jdGlvbiAoY2FtZXJhUGFzcykge1xuXG4gICAgICAgICAgICAgICAgLyoqIEB0eXBlIHtHcmFwaGljc0RldmljZX0gKi9cbiAgICAgICAgICAgICAgICBjb25zdCBkZXZpY2UgPSBhcHAuZ3JhcGhpY3NEZXZpY2U7XG5cbiAgICAgICAgICAgICAgICAvKiogQHR5cGUge0NhbWVyYUNvbXBvbmVudH0gKi9cbiAgICAgICAgICAgICAgICBjb25zdCBjYW1lcmEgPSB0aGlzLmNhbWVyYXNbY2FtZXJhUGFzc107XG5cbiAgICAgICAgICAgICAgICBpZiAoY2FtZXJhLnJlbmRlclNjZW5lRGVwdGhNYXApIHtcblxuICAgICAgICAgICAgICAgICAgICAvLyByZWFsbG9jYXRlIFJUIGlmIG5lZWRlZFxuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5yZXNpemVDb25kaXRpb24odGhpcy5kZXB0aFJlbmRlclRhcmdldCwgY2FtZXJhLnJlbmRlclRhcmdldD8uZGVwdGhCdWZmZXIsIGRldmljZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVwdGhSZW5kZXJUYXJnZXQuZGVzdHJveVRleHR1cmVCdWZmZXJzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlcHRoUmVuZGVyVGFyZ2V0ID0gc2VsZi5hbGxvY2F0ZVJlbmRlclRhcmdldCh0aGlzLmRlcHRoUmVuZGVyVGFyZ2V0LCBjYW1lcmEucmVuZGVyVGFyZ2V0LCBkZXZpY2UsIFBJWEVMRk9STUFUX1I4X0c4X0I4X0E4LCBmYWxzZSwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ29sbGVjdCBhbGwgcmVuZGVyZWQgbWVzaCBpbnN0YW5jZXMgd2l0aCB0aGUgc2FtZSByZW5kZXIgdGFyZ2V0IGFzIFdvcmxkIGhhcywgZGVwdGhXcml0ZSA9PSB0cnVlIGFuZCBwcmlvciB0byB0aGlzIGxheWVyIHRvIHJlcGxpY2F0ZSBibGl0RnJhbWVidWZmZXIgb24gV2ViR0wyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZpc2libGVPYmplY3RzID0gdGhpcy5pbnN0YW5jZXMudmlzaWJsZU9wYXF1ZVtjYW1lcmFQYXNzXTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmlzaWJsZUxpc3QgPSB2aXNpYmxlT2JqZWN0cy5saXN0O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsYXllckNvbXBvc2l0aW9uID0gYXBwLnNjZW5lLmxheWVycztcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3ViTGF5ZXJFbmFibGVkID0gbGF5ZXJDb21wb3NpdGlvbi5zdWJMYXllckVuYWJsZWQ7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzVHJhbnNwYXJlbnQgPSBsYXllckNvbXBvc2l0aW9uLnN1YkxheWVyTGlzdDtcblxuICAgICAgICAgICAgICAgICAgICAvLyBjYW4ndCB1c2Ugc2VsZi5kZWZhdWx0TGF5ZXJXb3JsZC5yZW5kZXJUYXJnZXQgYmVjYXVzZSBwcm9qZWN0cyB0aGF0IHVzZSB0aGUgZWRpdG9yIG92ZXJyaWRlIGRlZmF1bHQgbGF5ZXJzXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJ0ID0gYXBwLnNjZW5lLmxheWVycy5nZXRMYXllckJ5SWQoTEFZRVJJRF9XT1JMRCkucmVuZGVyVGFyZ2V0O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjYW0gPSB0aGlzLmNhbWVyYXNbY2FtZXJhUGFzc107XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IHZpc2libGVMZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsYXllcnMgPSBsYXllckNvbXBvc2l0aW9uLmxheWVyTGlzdDtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYXllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxheWVyID0gbGF5ZXJzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxheWVyID09PSB0aGlzKSBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXllci5yZW5kZXJUYXJnZXQgIT09IHJ0IHx8ICFsYXllci5lbmFibGVkIHx8ICFzdWJMYXllckVuYWJsZWRbaV0pIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsYXllckNhbUlkID0gbGF5ZXIuY2FtZXJhcy5pbmRleE9mKGNhbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5ZXJDYW1JZCA8IDApIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0cmFuc3BhcmVudCA9IGlzVHJhbnNwYXJlbnRbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGF5ZXJWaXNpYmxlTGlzdCA9IHRyYW5zcGFyZW50ID8gbGF5ZXIuaW5zdGFuY2VzLnZpc2libGVUcmFuc3BhcmVudFtsYXllckNhbUlkXSA6IGxheWVyLmluc3RhbmNlcy52aXNpYmxlT3BhcXVlW2xheWVyQ2FtSWRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGF5ZXJWaXNpYmxlTGlzdExlbmd0aCA9IGxheWVyVmlzaWJsZUxpc3QubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJWaXNpYmxlTGlzdCA9IGxheWVyVmlzaWJsZUxpc3QubGlzdDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBsYXllclZpc2libGVMaXN0TGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkcmF3Q2FsbCA9IGxheWVyVmlzaWJsZUxpc3Rbal07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRyYXdDYWxsLm1hdGVyaWFsICYmIGRyYXdDYWxsLm1hdGVyaWFsLmRlcHRoV3JpdGUgJiYgIWRyYXdDYWxsLl9ub0RlcHRoRHJhd0dsMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlTGlzdFt2aXNpYmxlTGVuZ3RoXSA9IGRyYXdDYWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlTGVuZ3RoKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZpc2libGVPYmplY3RzLmxlbmd0aCA9IHZpc2libGVMZW5ndGg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgb25QcmVSZW5kZXJPcGFxdWU6IGZ1bmN0aW9uIChjYW1lcmFQYXNzKSB7XG5cbiAgICAgICAgICAgICAgICAvKiogQHR5cGUge0dyYXBoaWNzRGV2aWNlfSAqL1xuICAgICAgICAgICAgICAgIGNvbnN0IGRldmljZSA9IGFwcC5ncmFwaGljc0RldmljZTtcblxuICAgICAgICAgICAgICAgIC8qKiBAdHlwZSB7Q2FtZXJhQ29tcG9uZW50fSAqL1xuICAgICAgICAgICAgICAgIGNvbnN0IGNhbWVyYSA9IHRoaXMuY2FtZXJhc1tjYW1lcmFQYXNzXTtcblxuICAgICAgICAgICAgICAgIGlmIChjYW1lcmEucmVuZGVyU2NlbmVDb2xvck1hcCkge1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlYWxsb2NhdGUgUlQgaWYgbmVlZGVkXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLnJlc2l6ZUNvbmRpdGlvbih0aGlzLmNvbG9yUmVuZGVyVGFyZ2V0LCBjYW1lcmEucmVuZGVyVGFyZ2V0Py5jb2xvckJ1ZmZlciwgZGV2aWNlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yZWxlYXNlUmVuZGVyVGFyZ2V0KHRoaXMuY29sb3JSZW5kZXJUYXJnZXQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2xvclJlbmRlclRhcmdldCA9IHNlbGYuYWxsb2NhdGVSZW5kZXJUYXJnZXQodGhpcy5jb2xvclJlbmRlclRhcmdldCwgY2FtZXJhLnJlbmRlclRhcmdldCwgZGV2aWNlLCB0aGlzLmNvbG9yRm9ybWF0LCBmYWxzZSwgZmFsc2UsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvcHkgb3V0IHRoZSBjb2xvciBidWZmZXJcbiAgICAgICAgICAgICAgICAgICAgRGVidWdHcmFwaGljcy5wdXNoR3B1TWFya2VyKGRldmljZSwgJ0dSQUItQ09MT1InKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBpbml0aWFsaXplIHRoZSB0ZXh0dXJlXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbG9yQnVmZmVyID0gdGhpcy5jb2xvclJlbmRlclRhcmdldC5fY29sb3JCdWZmZXI7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY29sb3JCdWZmZXIuaW1wbC5fZ2xUZXh0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvckJ1ZmZlci5pbXBsLmluaXRpYWxpemUoZGV2aWNlLCBjb2xvckJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBjb3B5IGZyYW1lYnVmZmVyIHRvIGl0XG4gICAgICAgICAgICAgICAgICAgIGRldmljZS5iaW5kVGV4dHVyZShjb2xvckJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGdsID0gZGV2aWNlLmdsO1xuICAgICAgICAgICAgICAgICAgICBnbC5jb3B5VGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBjb2xvckJ1ZmZlci5pbXBsLl9nbEZvcm1hdCwgMCwgMCwgY29sb3JCdWZmZXIud2lkdGgsIGNvbG9yQnVmZmVyLmhlaWdodCwgMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gc3RvcCB0aGUgZGV2aWNlIGZyb20gdXBkYXRpbmcgdGhpcyB0ZXh0dXJlIGZ1cnRoZXJcbiAgICAgICAgICAgICAgICAgICAgY29sb3JCdWZmZXIuX25lZWRzVXBsb2FkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yQnVmZmVyLl9uZWVkc01pcG1hcHNVcGxvYWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgICAgICBEZWJ1Z0dyYXBoaWNzLnBvcEdwdU1hcmtlcihkZXZpY2UpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGFzc2lnbiB1bmlmcm9tXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuc2V0dXBVbmlmb3JtKGRldmljZSwgZmFsc2UsIGNvbG9yQnVmZmVyKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoY2FtZXJhLnJlbmRlclNjZW5lRGVwdGhNYXApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gYXNzaWduIHVuaWZyb21cbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zZXR1cFVuaWZvcm0oZGV2aWNlLCB0cnVlLCB0aGlzLmRlcHRoUmVuZGVyVGFyZ2V0LmNvbG9yQnVmZmVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBvbkRyYXdDYWxsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgYXBwLmdyYXBoaWNzRGV2aWNlLnNldENvbG9yV3JpdGUodHJ1ZSwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBvblBvc3RSZW5kZXJPcGFxdWU6IGZ1bmN0aW9uIChjYW1lcmFQYXNzKSB7XG5cbiAgICAgICAgICAgICAgICAvKiogQHR5cGUge0NhbWVyYUNvbXBvbmVudH0gKi9cbiAgICAgICAgICAgICAgICBjb25zdCBjYW1lcmEgPSB0aGlzLmNhbWVyYXNbY2FtZXJhUGFzc107XG5cbiAgICAgICAgICAgICAgICBpZiAoY2FtZXJhLnJlbmRlclNjZW5lRGVwdGhNYXApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8ganVzdCBjbGVhciB0aGUgbGlzdCBvZiB2aXNpYmxlIG9iamVjdHMgdG8gYXZvaWQga2VlcGluZyByZWZlcmVuY2VzXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZpc2libGVPYmplY3RzID0gdGhpcy5pbnN0YW5jZXMudmlzaWJsZU9wYXF1ZVtjYW1lcmFQYXNzXTtcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJsZU9iamVjdHMubGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIGZ1bmN0aW9uIHdoaWNoIHBhdGNoZXMgYSBsYXllciB0byB1c2UgZGVwdGggbGF5ZXIgc2V0IHVwIGluIHRoaXMgY2xhc3NcbiAgICBwYXRjaChsYXllcikge1xuXG4gICAgICAgIGxheWVyLm9uRW5hYmxlID0gdGhpcy5sYXllci5vbkVuYWJsZTtcbiAgICAgICAgbGF5ZXIub25EaXNhYmxlID0gdGhpcy5sYXllci5vbkRpc2FibGU7XG4gICAgICAgIGxheWVyLm9uUHJlUmVuZGVyT3BhcXVlID0gdGhpcy5sYXllci5vblByZVJlbmRlck9wYXF1ZTtcbiAgICAgICAgbGF5ZXIub25Qb3N0UmVuZGVyT3BhcXVlID0gdGhpcy5sYXllci5vblBvc3RSZW5kZXJPcGFxdWU7XG4gICAgICAgIGxheWVyLnNoYWRlclBhc3MgPSB0aGlzLmxheWVyLnNoYWRlclBhc3M7XG4gICAgICAgIGxheWVyLm9uUG9zdEN1bGwgPSB0aGlzLmxheWVyLm9uUG9zdEN1bGw7XG4gICAgICAgIGxheWVyLm9uRHJhd0NhbGwgPSB0aGlzLmxheWVyLm9uRHJhd0NhbGw7XG4gICAgfVxufVxuXG5leHBvcnQgeyBTY2VuZUdyYWIgfTtcbiJdLCJuYW1lcyI6WyJfZGVwdGhVbmlmb3JtTmFtZXMiLCJfY29sb3JVbmlmb3JtTmFtZXMiLCJTY2VuZUdyYWIiLCJjb25zdHJ1Y3RvciIsImFwcGxpY2F0aW9uIiwiZGV2aWNlIiwiZ3JhcGhpY3NEZXZpY2UiLCJsYXllciIsImNvbG9yRm9ybWF0IiwiZGVmYXVsdEZyYW1lYnVmZmVyQWxwaGEiLCJQSVhFTEZPUk1BVF9SOF9HOF9COF9BOCIsIlBJWEVMRk9STUFUX1I4X0c4X0I4Iiwid2ViZ2wyIiwiaW5pdFdlYkdsMiIsImluaXRXZWJHbDEiLCJzZXR1cFVuaWZvcm0iLCJkZXB0aCIsImJ1ZmZlciIsIm5hbWVzIiwiZm9yRWFjaCIsIm5hbWUiLCJzY29wZSIsInJlc29sdmUiLCJzZXRWYWx1ZSIsImFsbG9jYXRlVGV4dHVyZSIsInNvdXJjZSIsImZvcm1hdCIsImlzRGVwdGgiLCJtaXBtYXBzIiwiVGV4dHVyZSIsIndpZHRoIiwiY29sb3JCdWZmZXIiLCJoZWlnaHQiLCJtaW5GaWx0ZXIiLCJGSUxURVJfTkVBUkVTVCIsIkZJTFRFUl9MSU5FQVJfTUlQTUFQX0xJTkVBUiIsIkZJTFRFUl9MSU5FQVIiLCJtYWdGaWx0ZXIiLCJhZGRyZXNzVSIsIkFERFJFU1NfQ0xBTVBfVE9fRURHRSIsImFkZHJlc3NWIiwicmVzaXplQ29uZGl0aW9uIiwidGFyZ2V0IiwiYWxsb2NhdGVSZW5kZXJUYXJnZXQiLCJyZW5kZXJUYXJnZXQiLCJzb3VyY2VSZW5kZXJUYXJnZXQiLCJpc0RlcHRoVW5pZm9ybXMiLCJkZXN0cm95RnJhbWVCdWZmZXJzIiwiX2RlcHRoQnVmZmVyIiwiX2NvbG9yQnVmZmVyIiwiUmVuZGVyVGFyZ2V0IiwiZGVwdGhCdWZmZXIiLCJzdGVuY2lsIiwic3VwcG9ydHNTdGVuY2lsIiwiYXV0b1Jlc29sdmUiLCJyZWxlYXNlUmVuZGVyVGFyZ2V0IiwicnQiLCJkZXN0cm95VGV4dHVyZUJ1ZmZlcnMiLCJkZXN0cm95IiwiYXBwIiwic2VsZiIsIkxheWVyIiwiZW5hYmxlZCIsImlkIiwiTEFZRVJJRF9ERVBUSCIsIm9uRGlzYWJsZSIsImRlcHRoUmVuZGVyVGFyZ2V0IiwiY29sb3JSZW5kZXJUYXJnZXQiLCJvblByZVJlbmRlck9wYXF1ZSIsImNhbWVyYVBhc3MiLCJjYW1lcmEiLCJjYW1lcmFzIiwicmVuZGVyU2NlbmVDb2xvck1hcCIsIkRlYnVnR3JhcGhpY3MiLCJwdXNoR3B1TWFya2VyIiwiY29weVJlbmRlclRhcmdldCIsImFjdGl2ZVRleHR1cmUiLCJtYXhDb21iaW5lZFRleHR1cmVzIiwiYmluZFRleHR1cmUiLCJnbCIsImdlbmVyYXRlTWlwbWFwIiwiaW1wbCIsIl9nbFRhcmdldCIsInBvcEdwdU1hcmtlciIsInJlbmRlclNjZW5lRGVwdGhNYXAiLCJQSVhFTEZPUk1BVF9ERVBUSFNURU5DSUwiLCJvblBvc3RSZW5kZXJPcGFxdWUiLCJzaGFkZXJQYXNzIiwiU0hBREVSX0RFUFRIIiwib25FbmFibGUiLCJvblBvc3RDdWxsIiwidmlzaWJsZU9iamVjdHMiLCJpbnN0YW5jZXMiLCJ2aXNpYmxlT3BhcXVlIiwidmlzaWJsZUxpc3QiLCJsaXN0IiwibGF5ZXJDb21wb3NpdGlvbiIsInNjZW5lIiwibGF5ZXJzIiwic3ViTGF5ZXJFbmFibGVkIiwiaXNUcmFuc3BhcmVudCIsInN1YkxheWVyTGlzdCIsImdldExheWVyQnlJZCIsIkxBWUVSSURfV09STEQiLCJjYW0iLCJ2aXNpYmxlTGVuZ3RoIiwibGF5ZXJMaXN0IiwiaSIsImxlbmd0aCIsImxheWVyQ2FtSWQiLCJpbmRleE9mIiwidHJhbnNwYXJlbnQiLCJsYXllclZpc2libGVMaXN0IiwidmlzaWJsZVRyYW5zcGFyZW50IiwibGF5ZXJWaXNpYmxlTGlzdExlbmd0aCIsImoiLCJkcmF3Q2FsbCIsIm1hdGVyaWFsIiwiZGVwdGhXcml0ZSIsIl9ub0RlcHRoRHJhd0dsMSIsIl9nbFRleHR1cmUiLCJpbml0aWFsaXplIiwiY29weVRleEltYWdlMkQiLCJURVhUVVJFXzJEIiwiX2dsRm9ybWF0IiwiX25lZWRzVXBsb2FkIiwiX25lZWRzTWlwbWFwc1VwbG9hZCIsIm9uRHJhd0NhbGwiLCJzZXRDb2xvcldyaXRlIiwicGF0Y2giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQXFCQSxNQUFNQSxrQkFBa0IsR0FBRyxDQUFDLGdCQUFELEVBQW1CLFdBQW5CLENBQTNCLENBQUE7QUFDQSxNQUFNQyxrQkFBa0IsR0FBRyxDQUFDLGdCQUFELEVBQW1CLGtCQUFuQixDQUEzQixDQUFBOztBQWVBLE1BQU1DLFNBQU4sQ0FBZ0I7RUFDWkMsV0FBVyxDQUFDQyxXQUFELEVBQWM7SUFDckIsSUFBS0EsQ0FBQUEsV0FBTCxHQUFtQkEsV0FBbkIsQ0FBQTtBQUdBLElBQUEsSUFBQSxDQUFLQyxNQUFMLEdBQWNELFdBQVcsQ0FBQ0UsY0FBMUIsQ0FBQTtJQUdBLElBQUtDLENBQUFBLEtBQUwsR0FBYSxJQUFiLENBQUE7SUFHQSxJQUFLQyxDQUFBQSxXQUFMLEdBQW1CLElBQUtILENBQUFBLE1BQUwsQ0FBWUksdUJBQVosR0FBc0NDLHVCQUF0QyxHQUFnRUMsb0JB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
