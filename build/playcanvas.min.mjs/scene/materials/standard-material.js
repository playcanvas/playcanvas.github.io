import"../../core/tracing.js";import{Color as e}from"../../core/math/color.js";import{math as t}from"../../core/math/math.js";import{Vec2 as a}from"../../core/math/vec2.js";import{ShaderProcessorOptions as s}from"../../platform/graphics/shader-processor-options.js";import{CUBEPROJ_BOX as i,SPECULAR_PHONG as r,SHADER_DEPTH as n,SHADER_PICK as o,SPECOCC_AO as h,SPECULAR_BLINN as l,FRESNEL_SCHLICK as c,CUBEPROJ_NONE as m,DETAILMODE_MUL as u}from"../constants.js";import{ShaderPass as p}from"../shader-pass.js";import{EnvLighting as d}from"../graphics/env-lighting.js";import{getProgramLibrary as _}from"../shader-lib/get-program-library.js";import{_matTex2D as f,standard as M}from"../shader-lib/programs/standard.js";import{Material as y}from"./material.js";import{StandardMaterialOptionsBuilder as g}from"./standard-material-options-builder.js";import{standardMaterialTextureParameters as P,standardMaterialCubemapParameters as v}from"./standard-material-parameters.js";const b={},x={};let S=new Set;class A extends y{constructor(){super(),this._dirtyShader=!0,this._assetReferences={},this._activeParams=new Set,this._activeLightingParams=new Set,this.shaderOptBuilder=new g,this.reset()}reset(){Object.keys(b).forEach((e=>{this[`_${e}`]=b[e].value()})),this._chunks={},this._uniformCache={}}set shader(e){}get shader(){return null}set chunks(e){this._dirtyShader=!0,this._chunks=e}get chunks(){return this._dirtyShader=!0,this._chunks}copy(e){super.copy(e),Object.keys(b).forEach((t=>{this[t]=e[t]}));for(const t in e._chunks)e._chunks.hasOwnProperty(t)&&(this._chunks[t]=e._chunks[t]);return this}_setParameter(e,t){S.add(e),this.setParameter(e,t)}_setParameters(e){e.forEach((e=>{this._setParameter(e.name,e.value)}))}_processParameters(e){const t=this[e];t.forEach((e=>{S.has(e)||delete this.parameters[e]})),this[e]=S,S=t,S.clear()}_updateMap(e){const t=e+"Map",a=this[t];if(a){this._setParameter("texture_"+t,a);const e=t+"Transform",s=this.getUniform(e);s&&this._setParameters(s)}}_allocUniform(e,t){let a=this._uniformCache[e];return a||(a=t(),this._uniformCache[e]=a),a}getUniform(e,t,a){return x[e](this,t,a)}updateUniforms(e,t){const a=a=>this.getUniform(a,e,t);if(this._setParameter("material_ambient",a("ambient")),this.diffuseMap&&!this.diffuseTint||this._setParameter("material_diffuse",a("diffuse")),this.useMetalness)if((!this.metalnessMap||this.metalness<1)&&this._setParameter("material_metalness",this.metalness),this.specularMap&&!this.specularTint||this._setParameter("material_specular",a("specular")),this.specularityFactorMap&&!this.specularityFactorTint||this._setParameter("material_specularityFactor",this.specularityFactor),this.sheenMap&&!this.sheenTint||this._setParameter("material_sheen",a("sheen")),this.sheenGlossMap&&!this.sheenGlossTint||this._setParameter("material_sheenGloss",this.sheenGloss),this.refractionIndex!==1/1.5){const e=1/this.refractionIndex,t=(e-1)/(e+1);this._setParameter("material_f0",t*t)}else this._setParameter("material_f0",.04);else this.specularMap&&!this.specularTint||this._setParameter("material_specular",a("specular"));this.enableGGXSpecular&&this._setParameter("material_anisotropy",this.anisotropy),this.clearCoat>0&&(this._setParameter("material_clearCoat",this.clearCoat),this._setParameter("material_clearCoatGloss",this.clearCoatGloss),this._setParameter("material_clearCoatBumpiness",this.clearCoatBumpiness)),this._setParameter("material_gloss",a("gloss")),this.emissiveMap&&!this.emissiveTint||this._setParameter("material_emissive",a("emissive")),1!==this.emissiveIntensity&&this._setParameter("material_emissiveIntensity",this.emissiveIntensity),this.refraction>0&&(this._setParameter("material_refraction",this.refraction),this._setParameter("material_refractionIndex",this.refractionIndex)),this.useDynamicRefraction&&(this._setParameter("material_thickness",this.thickness),this._setParameter("material_attenuation",a("attenuation")),this._setParameter("material_invAttenuationDistance",0===this.attenuationDistance?0:1/this.attenuationDistance)),this.useIridescence&&(this._setParameter("material_iridescence",this.iridescence),this._setParameter("material_iridescenceRefractionIndex",this.iridescenceRefractionIndex),this._setParameter("material_iridescenceThicknessMin",this.iridescenceThicknessMin),this._setParameter("material_iridescenceThicknessMax",this.iridescenceThicknessMax)),this._setParameter("material_opacity",this.opacity),!1===this.opacityFadesSpecular&&this._setParameter("material_alphaFade",this.alphaFade),this.occludeSpecular&&this._setParameter("material_occludeSpecularIntensity",this.occludeSpecularIntensity),this.cubeMapProjection===i&&this._setParameter(a("cubeMapProjectionBox"));for(const e in f)this._updateMap(e);this.ambientSH&&this._setParameter("ambientSH[0]",this.ambientSH),this.normalMap&&this._setParameter("material_bumpiness",this.bumpiness),this.normalMap&&this.normalDetailMap&&this._setParameter("material_normalDetailMapBumpiness",this.normalDetailMapBumpiness),this.heightMap&&this._setParameter("material_heightMapFactor",a("heightMapFactor"));const s=this.shadingModel===r;this.envAtlas&&this.cubeMap&&!s?(this._setParameter("texture_envAtlas",this.envAtlas),this._setParameter("texture_cubeMap",this.cubeMap)):this.envAtlas&&!s?this._setParameter("texture_envAtlas",this.envAtlas):this.cubeMap?this._setParameter("texture_cubeMap",this.cubeMap):this.sphereMap&&this._setParameter("texture_sphereMap",this.sphereMap),this._setParameter("material_reflectivity",this.reflectivity),this._processParameters("_activeParams"),this._dirtyShader&&this.clearVariants()}updateEnvUniforms(e,t){const a=this.shadingModel===r;!(this.envAtlas&&!a||this.cubeMap||this.sphereMap)&&this.useSkybox&&(t.envAtlas&&t.skybox&&!a?(this._setParameter("texture_envAtlas",t.envAtlas),this._setParameter("texture_cubeMap",t.skybox)):t.envAtlas&&!a?this._setParameter("texture_envAtlas",t.envAtlas):t.skybox&&this._setParameter("texture_cubeMap",t.skybox)),this._processParameters("_activeLightingParams")}getShaderVariant(e,t,a,i,r,h,l,c,m){this.updateEnvUniforms(e,t);const u=r===n||r===o||p.isShadow(r);let d=u?M.optionsContextMin:M.optionsContext;u?this.shaderOptBuilder.updateMinRef(d,t,this,a,i,r,h):this.shaderOptBuilder.updateRef(d,t,this,a,i,r,h),this.onUpdateShader&&(d=this.onUpdateShader(d));const f=new s(l,c,m),y=_(e);y.register("standard",M);const g=y.getProgram("standard",d,f);return this._dirtyShader=!1,g}destroy(){for(const e in this._assetReferences)this._assetReferences[e]._unbind();this._assetReferences=null,super.destroy()}}A.TEXTURE_PARAMETERS=P,A.CUBEMAP_PARAMETERS=v;const T=(e,t)=>{x[e]=t},F=(e,t,a,s)=>{Object.defineProperty(A.prototype,e,{get:s||function(){return this[`_${e}`]},set:a}),b[e]={value:t}},C=e=>{const t=`_${e.name}`,a=e.dirtyShaderFunc||(()=>!0);F(e.name,(()=>e.defaultValue),(function(e){const s=this[t];s!==e&&(this._dirtyShader=this._dirtyShader||a(s,e),this[t]=e)}),e.getterFunc)},k=e=>{const t=`_${e.name}`,a=e.dirtyShaderFunc||(()=>!0);F(e.name,(()=>e.defaultValue.clone()),(function(e){const s=this[t];s.equals(e)||(this._dirtyShader=this._dirtyShader||a(s,e),this[t]=s.copy(e))}),e.getterFunc)},w=e=>e.defaultValue&&e.defaultValue.clone?k(e):C(e);function j(e,s="rgb",i=!0,r=0){f[e]=s.length||-1,w({name:`${e}Map`,defaultValue:null,dirtyShaderFunc:(e,t)=>!!e!=!!t||e&&(e.type!==t.type||e.fixCubemapSeams!==t.fixCubemapSeams||e.format!==t.format)}),w({name:`${e}MapTiling`,defaultValue:new a(1,1)}),w({name:`${e}MapOffset`,defaultValue:new a(0,0)}),w({name:`${e}MapRotation`,defaultValue:0}),w({name:`${e}MapUv`,defaultValue:r}),s&&(w({name:`${e}MapChannel`,defaultValue:s}),i&&(w({name:`${e}VertexColor`,defaultValue:!1}),w({name:`${e}VertexColorChannel`,defaultValue:s})));const n=`${e}MapTiling`,o=`${e}MapOffset`,h=`${e}MapRotation`,l=`${e}MapTransform`;T(l,((e,a,s)=>{const i=e[n],r=e[o],c=e[h];if(1===i.x&&1===i.y&&0===r.x&&0===r.y&&0===c)return null;const m=e._allocUniform(l,(()=>[{name:`texture_${l}0`,value:new Float32Array(3)},{name:`texture_${l}1`,value:new Float32Array(3)}])),u=Math.cos(c*t.DEG_TO_RAD),p=Math.sin(c*t.DEG_TO_RAD),d=m[0].value;d[0]=u*i.x,d[1]=-p*i.y,d[2]=r.x;const _=m[1].value;return _[0]=p*i.x,_[1]=u*i.y,_[2]=1-i.y-r.y,m}))}function G(e,t){w({name:e,defaultValue:t,getterFunc:function(){return this._dirtyShader=!0,this[`_${e}`]}}),T(e,((t,a,s)=>{const i=t._allocUniform(e,(()=>new Float32Array(3))),r=t[e];return t.useGammaTonemap&&s.gammaCorrection?(i[0]=Math.pow(r.r,2.2),i[1]=Math.pow(r.g,2.2),i[2]=Math.pow(r.b,2.2)):(i[0]=r.r,i[1]=r.g,i[2]=r.b),i}))}function I(e,t,a){w({name:e,defaultValue:t,dirtyShaderFunc:(e,t)=>(0===e||1===e)!=(0===t||1===t)}),T(e,a)}function R(e,t){w({name:e,defaultValue:null,dirtyShaderFunc:(e,t)=>!!e==!!t}),T(e,t)}function V(e,t){w({name:e,defaultValue:t})}!function(){G("ambient",new e(.7,.7,.7)),G("diffuse",new e(1,1,1)),G("specular",new e(0,0,0)),G("emissive",new e(0,0,0)),G("sheen",new e(1,1,1)),G("attenuation",new e(1,1,1)),I("emissiveIntensity",1),I("specularityFactor",1),I("sheenGloss",0),I("gloss",.25,((e,t,a)=>e.shadingModel===r?Math.pow(2,11*e.gloss):e.gloss)),I("heightMapFactor",1,((e,t,a)=>.025*e.heightMapFactor)),I("opacity",1),I("alphaFade",1),I("alphaTest",0),I("bumpiness",1),I("normalDetailMapBumpiness",1),I("reflectivity",1),I("occludeSpecularIntensity",1),I("refraction",0),I("refractionIndex",1/1.5),I("thickness",0),I("attenuationDistance",0),I("metalness",1),I("anisotropy",0),I("clearCoat",0),I("clearCoatGloss",1),I("clearCoatBumpiness",1),I("aoUvSet",0,null),I("iridescence",0),I("iridescenceRefractionIndex",1/1.5),I("iridescenceThicknessMin",0),I("iridescenceThicknessMax",0),R("ambientSH"),R("cubeMapProjectionBox",((e,t,a)=>{const s=e._allocUniform("cubeMapProjectionBox",(()=>[{name:"envBoxMin",value:new Float32Array(3)},{name:"envBoxMax",value:new Float32Array(3)}])),i=e.cubeMapProjectionBox.getMin(),r=s[0].value;r[0]=i.x,r[1]=i.y,r[2]=i.z;const n=e.cubeMapProjectionBox.getMax(),o=s[1].value;return o[0]=n.x,o[1]=n.y,o[2]=n.z,s})),V("ambientTint",!1),V("diffuseTint",!1),V("specularTint",!1),V("specularityFactorTint",!1),V("emissiveTint",!1),V("fastTbn",!1),V("useMetalness",!1),V("useMetalnessSpecularColor",!1),V("useSheen",!1),V("enableGGXSpecular",!1),V("occludeDirect",!1),V("normalizeNormalMap",!0),V("conserveEnergy",!0),V("opacityFadesSpecular",!0),V("occludeSpecular",h),V("shadingModel",l),V("fresnelModel",c),V("useDynamicRefraction",!1),V("cubeMapProjection",m),V("customFragmentShader",null),V("forceFragmentPrecision",null),V("useFog",!0),V("useLighting",!0),V("useGammaTonemap",!0),V("useSkybox",!0),V("forceUv1",!1),V("pixelSnap",!1),V("twoSidedLighting",!1),V("nineSlicedMode",void 0),V("msdfTextAttribute",!1),V("useIridescence",!1),V("glossInvert",!1),V("sheenGlossInvert",!1),V("clearCoatGlossInvert",!1),j("diffuse"),j("specular"),j("emissive"),j("thickness","g"),j("specularityFactor","g"),j("normal",""),j("metalness","g"),j("gloss","g"),j("opacity","a"),j("refraction","g"),j("height","g",!1),j("ao","g"),j("light","rgb",!0,1),j("msdf",""),j("diffuseDetail","rgb",!1),j("normalDetail",""),j("clearCoat","g"),j("clearCoatGloss","g"),j("clearCoatNormal",""),j("sheen","rgb"),j("sheenGloss","g"),j("iridescence","g"),j("iridescenceThickness","g"),V("diffuseDetailMode",u),R("cubeMap"),R("sphereMap"),R("envAtlas");const t=[null,null,null,null,null,null];F("prefilteredCubemaps",(()=>t.slice()),(function(e){const t=this._prefilteredCubemaps;e=e||[];let a=!1,s=!0;for(let i=0;i<6;++i){const r=e[i]||null;t[i]!==r&&(t[i]=r,a=!0),s=s&&!!t[i]}a&&(s?this.envAtlas=d.generatePrefilteredAtlas(t,{target:this.envAtlas}):this.envAtlas&&(this.envAtlas.destroy(),this.envAtlas=null),this._dirtyShader=!0)}),(function(){return this._prefilteredCubemaps}))}();export{A as StandardMaterial};
