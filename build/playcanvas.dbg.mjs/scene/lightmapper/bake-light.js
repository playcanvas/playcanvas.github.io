/**
 * @license
 * PlayCanvas Engine v1.57.1 revision 256dd83c2 (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { BoundingBox } from '../../shape/bounding-box.js';
import { BoundingSphere } from '../../shape/bounding-sphere.js';
import { LIGHTTYPE_DIRECTIONAL } from '../constants.js';

const tempSphere = new BoundingSphere();

class BakeLight {
  constructor(scene, light) {
    this.scene = scene;
    this.light = light;
    this.store();
    light.numCascades = 1;

    if (light.type !== LIGHTTYPE_DIRECTIONAL) {
      light._node.getWorldTransform();

      light.getBoundingSphere(tempSphere);
      this.lightBounds = new BoundingBox();
      this.lightBounds.center.copy(tempSphere.center);
      this.lightBounds.halfExtents.set(tempSphere.radius, tempSphere.radius, tempSphere.radius);
    }
  }

  store() {
    this.mask = this.light.mask;
    this.shadowUpdateMode = this.light.shadowUpdateMode;
    this.enabled = this.light.enabled;
    this.intensity = this.light.intensity;
    this.rotation = this.light._node.getLocalRotation().clone();
    this.numCascades = this.light.numCascades;
  }

  restore() {
    const light = this.light;
    light.mask = this.mask;
    light.shadowUpdateMode = this.shadowUpdateMode;
    light.enabled = this.enabled;
    light.intensity = this.intensity;

    light._node.setLocalRotation(this.rotation);

    light.numCascades = this.numCascades;
  }

  startBake() {
    this.light.enabled = true;

    this.light._destroyShadowMap();
  }

  endBake(shadowMapCache) {
    const light = this.light;
    light.enabled = false;

    if (light.shadowMap) {
      if (light.shadowMap.cached) shadowMapCache.add(light, light.shadowMap);
      light.shadowMap = null;
    }
  }

}

export { BakeLight };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFrZS1saWdodC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3NjZW5lL2xpZ2h0bWFwcGVyL2Jha2UtbGlnaHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQm91bmRpbmdCb3ggfSBmcm9tICcuLi8uLi9zaGFwZS9ib3VuZGluZy1ib3guanMnO1xuaW1wb3J0IHsgQm91bmRpbmdTcGhlcmUgfSBmcm9tICcuLi8uLi9zaGFwZS9ib3VuZGluZy1zcGhlcmUuanMnO1xuaW1wb3J0IHsgTElHSFRUWVBFX0RJUkVDVElPTkFMIH0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcblxuY29uc3QgdGVtcFNwaGVyZSA9IG5ldyBCb3VuZGluZ1NwaGVyZSgpO1xuXG4vLyBoZWxwZXIgY2xhc3MgdG8gc3RvcmUgYWxsIGxpZ2h0cyBpbmNsdWRpbmcgdGhlaXIgb3JpZ2luYWwgc3RhdGVcbmNsYXNzIEJha2VMaWdodCB7XG4gICAgY29uc3RydWN0b3Ioc2NlbmUsIGxpZ2h0KSB7XG5cbiAgICAgICAgdGhpcy5zY2VuZSA9IHNjZW5lO1xuXG4gICAgICAgIC8vIGxpZ2h0IG9mIHR5cGUgTGlnaHRcbiAgICAgICAgdGhpcy5saWdodCA9IGxpZ2h0O1xuXG4gICAgICAgIC8vIG9yaWdpbmFsIGxpZ2h0IHByb3BlcnRpZXNcbiAgICAgICAgdGhpcy5zdG9yZSgpO1xuXG4gICAgICAgIC8vIGRvbid0IHVzZSBjYXNjYWRlc1xuICAgICAgICBsaWdodC5udW1DYXNjYWRlcyA9IDE7XG5cbiAgICAgICAgLy8gYm91bmRzIGZvciBub24tZGlyZWN0aW9uYWwgbGlnaHRcbiAgICAgICAgaWYgKGxpZ2h0LnR5cGUgIT09IExJR0hUVFlQRV9ESVJFQ1RJT05BTCkge1xuXG4gICAgICAgICAgICAvLyB3b3JsZCBzcGhlcmVcbiAgICAgICAgICAgIGxpZ2h0Ll9ub2RlLmdldFdvcmxkVHJhbnNmb3JtKCk7XG4gICAgICAgICAgICBsaWdodC5nZXRCb3VuZGluZ1NwaGVyZSh0ZW1wU3BoZXJlKTtcblxuICAgICAgICAgICAgLy8gd29ybGQgYWFiYlxuICAgICAgICAgICAgdGhpcy5saWdodEJvdW5kcyA9IG5ldyBCb3VuZGluZ0JveCgpO1xuICAgICAgICAgICAgdGhpcy5saWdodEJvdW5kcy5jZW50ZXIuY29weSh0ZW1wU3BoZXJlLmNlbnRlcik7XG4gICAgICAgICAgICB0aGlzLmxpZ2h0Qm91bmRzLmhhbGZFeHRlbnRzLnNldCh0ZW1wU3BoZXJlLnJhZGl1cywgdGVtcFNwaGVyZS5yYWRpdXMsIHRlbXBTcGhlcmUucmFkaXVzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0b3JlKCkge1xuICAgICAgICB0aGlzLm1hc2sgPSB0aGlzLmxpZ2h0Lm1hc2s7XG4gICAgICAgIHRoaXMuc2hhZG93VXBkYXRlTW9kZSA9IHRoaXMubGlnaHQuc2hhZG93VXBkYXRlTW9kZTtcbiAgICAgICAgdGhpcy5lbmFibGVkID0gdGhpcy5saWdodC5lbmFibGVkO1xuICAgICAgICB0aGlzLmludGVuc2l0eSA9IHRoaXMubGlnaHQuaW50ZW5zaXR5O1xuICAgICAgICB0aGlzLnJvdGF0aW9uID0gdGhpcy5saWdodC5fbm9kZS5nZXRMb2NhbFJvdGF0aW9uKCkuY2xvbmUoKTtcbiAgICAgICAgdGhpcy5udW1DYXNjYWRlcyA9IHRoaXMubGlnaHQubnVtQ2FzY2FkZXM7XG4gICAgfVxuXG4gICAgcmVzdG9yZSgpIHtcbiAgICAgICAgY29uc3QgbGlnaHQgPSB0aGlzLmxpZ2h0O1xuICAgICAgICBsaWdodC5tYXNrID0gdGhpcy5tYXNrO1xuICAgICAgICBsaWdodC5zaGFkb3dVcGRhdGVNb2RlID0gdGhpcy5zaGFkb3dVcGRhdGVNb2RlO1xuICAgICAgICBsaWdodC5lbmFibGVkID0gdGhpcy5lbmFibGVkO1xuICAgICAgICBsaWdodC5pbnRlbnNpdHkgPSB0aGlzLmludGVuc2l0eTtcbiAgICAgICAgbGlnaHQuX25vZGUuc2V0TG9jYWxSb3RhdGlvbih0aGlzLnJvdGF0aW9uKTtcbiAgICAgICAgbGlnaHQubnVtQ2FzY2FkZXMgPSB0aGlzLm51bUNhc2NhZGVzO1xuICAgIH1cblxuICAgIHN0YXJ0QmFrZSgpIHtcbiAgICAgICAgdGhpcy5saWdodC5lbmFibGVkID0gdHJ1ZTtcblxuICAgICAgICAvLyBkZXN0cm95IHNoYWRvdyBtYXAgdGhlIGxpZ2h0IG1pZ2h0IGhhdmVcbiAgICAgICAgdGhpcy5saWdodC5fZGVzdHJveVNoYWRvd01hcCgpO1xuICAgIH1cblxuICAgIGVuZEJha2Uoc2hhZG93TWFwQ2FjaGUpIHtcbiAgICAgICAgY29uc3QgbGlnaHQgPSB0aGlzLmxpZ2h0O1xuICAgICAgICBsaWdodC5lbmFibGVkID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGxpZ2h0LnNoYWRvd01hcCkge1xuICAgICAgICAgICAgLy8gcmV0dXJuIHNoYWRvdyBtYXAgdG8gdGhlIGNhY2hlXG4gICAgICAgICAgICBpZiAobGlnaHQuc2hhZG93TWFwLmNhY2hlZClcbiAgICAgICAgICAgICAgICBzaGFkb3dNYXBDYWNoZS5hZGQobGlnaHQsIGxpZ2h0LnNoYWRvd01hcCk7XG5cbiAgICAgICAgICAgIGxpZ2h0LnNoYWRvd01hcCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCB7IEJha2VMaWdodCB9O1xuIl0sIm5hbWVzIjpbInRlbXBTcGhlcmUiLCJCb3VuZGluZ1NwaGVyZSIsIkJha2VMaWdodCIsImNvbnN0cnVjdG9yIiwic2NlbmUiLCJsaWdodCIsInN0b3JlIiwibnVtQ2FzY2FkZXMiLCJ0eXBlIiwiTElHSFRUWVBFX0RJUkVDVElPTkFMIiwiX25vZGUiLCJnZXRXb3JsZFRyYW5zZm9ybSIsImdldEJvdW5kaW5nU3BoZXJlIiwibGlnaHRCb3VuZHMiLCJCb3VuZGluZ0JveCIsImNlbnRlciIsImNvcHkiLCJoYWxmRXh0ZW50cyIsInNldCIsInJhZGl1cyIsIm1hc2siLCJzaGFkb3dVcGRhdGVNb2RlIiwiZW5hYmxlZCIsImludGVuc2l0eSIsInJvdGF0aW9uIiwiZ2V0TG9jYWxSb3RhdGlvbiIsImNsb25lIiwicmVzdG9yZSIsInNldExvY2FsUm90YXRpb24iLCJzdGFydEJha2UiLCJfZGVzdHJveVNoYWRvd01hcCIsImVuZEJha2UiLCJzaGFkb3dNYXBDYWNoZSIsInNoYWRvd01hcCIsImNhY2hlZCIsImFkZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBSUEsTUFBTUEsVUFBVSxHQUFHLElBQUlDLGNBQUosRUFBbkIsQ0FBQTs7QUFHQSxNQUFNQyxTQUFOLENBQWdCO0FBQ1pDLEVBQUFBLFdBQVcsQ0FBQ0MsS0FBRCxFQUFRQyxLQUFSLEVBQWU7SUFFdEIsSUFBS0QsQ0FBQUEsS0FBTCxHQUFhQSxLQUFiLENBQUE7SUFHQSxJQUFLQyxDQUFBQSxLQUFMLEdBQWFBLEtBQWIsQ0FBQTtBQUdBLElBQUEsSUFBQSxDQUFLQyxLQUFMLEVBQUEsQ0FBQTtJQUdBRCxLQUFLLENBQUNFLFdBQU4sR0FBb0IsQ0FBcEIsQ0FBQTs7QUFHQSxJQUFBLElBQUlGLEtBQUssQ0FBQ0csSUFBTixLQUFlQyxxQkFBbkIsRUFBMEM7TUFHdENKLEtBQUssQ0FBQ0ssS0FBTixDQUFZQyxpQkFBWixFQUFBLENBQUE7O01BQ0FOLEtBQUssQ0FBQ08saUJBQU4sQ0FBd0JaLFVBQXhCLENBQUEsQ0FBQTtBQUdBLE1BQUEsSUFBQSxDQUFLYSxXQUFMLEdBQW1CLElBQUlDLFdBQUosRUFBbkIsQ0FBQTtNQUNBLElBQUtELENBQUFBLFdBQUwsQ0FBaUJFLE1BQWpCLENBQXdCQyxJQUF4QixDQUE2QmhCLFVBQVUsQ0FBQ2UsTUFBeEMsQ0FBQSxDQUFBO0FBQ0EsTUFBQSxJQUFBLENBQUtGLFdBQUwsQ0FBaUJJLFdBQWpCLENBQTZCQyxHQUE3QixDQUFpQ2xCLFVBQVUsQ0FBQ21CLE1BQTVDLEVBQW9EbkIsVUFBVSxDQUFDbUIsTUFBL0QsRUFBdUVuQixVQUFVLENBQUNtQixNQUFsRixDQUFBLENBQUE7QUFDSCxLQUFBO0FBQ0osR0FBQTs7QUFFRGIsRUFBQUEsS0FBSyxHQUFHO0FBQ0osSUFBQSxJQUFBLENBQUtjLElBQUwsR0FBWSxJQUFLZixDQUFBQSxLQUFMLENBQVdlLElBQXZCLENBQUE7QUFDQSxJQUFBLElBQUEsQ0FBS0MsZ0JBQUwsR0FBd0IsSUFBS2hCLENBQUFBLEtBQUwsQ0FBV2dCLGdCQUFuQyxDQUFBO0FBQ0EsSUFBQSxJQUFBLENBQUtDLE9BQUwsR0FBZSxJQUFLakIsQ0FBQUEsS0FBTCxDQUFXaUIsT0FBMUIsQ0FBQTtBQUNBLElBQUEsSUFBQSxDQUFLQyxTQUFMLEdBQWlCLElBQUtsQixDQUFBQSxLQUFMLENBQVdrQixTQUE1QixDQUFBO0lBQ0EsSUFBS0MsQ0FBQUEsUUFBTCxHQUFnQixJQUFBLENBQUtuQixLQUFMLENBQVdLLEtBQVgsQ0FBaUJlLGdCQUFqQixFQUFvQ0MsQ0FBQUEsS0FBcEMsRUFBaEIsQ0FBQTtBQUNBLElBQUEsSUFBQSxDQUFLbkIsV0FBTCxHQUFtQixJQUFLRixDQUFBQSxLQUFMLENBQVdFLFdBQTlCLENBQUE7QUFDSCxHQUFBOztBQUVEb0IsRUFBQUEsT0FBTyxHQUFHO0lBQ04sTUFBTXRCLEtBQUssR0FBRyxJQUFBLENBQUtBLEtBQW5CLENBQUE7QUFDQUEsSUFBQUEsS0FBSyxDQUFDZSxJQUFOLEdBQWEsSUFBQSxDQUFLQSxJQUFsQixDQUFBO0FBQ0FmLElBQUFBLEtBQUssQ0FBQ2dCLGdCQUFOLEdBQXlCLElBQUEsQ0FBS0EsZ0JBQTlCLENBQUE7QUFDQWhCLElBQUFBLEtBQUssQ0FBQ2lCLE9BQU4sR0FBZ0IsSUFBQSxDQUFLQSxPQUFyQixDQUFBO0FBQ0FqQixJQUFBQSxLQUFLLENBQUNrQixTQUFOLEdBQWtCLElBQUEsQ0FBS0EsU0FBdkIsQ0FBQTs7QUFDQWxCLElBQUFBLEtBQUssQ0FBQ0ssS0FBTixDQUFZa0IsZ0JBQVosQ0FBNkIsS0FBS0osUUFBbEMsQ0FBQSxDQUFBOztBQUNBbkIsSUFBQUEsS0FBSyxDQUFDRSxXQUFOLEdBQW9CLElBQUEsQ0FBS0EsV0FBekIsQ0FBQTtBQUNILEdBQUE7O0FBRURzQixFQUFBQSxTQUFTLEdBQUc7QUFDUixJQUFBLElBQUEsQ0FBS3hCLEtBQUwsQ0FBV2lCLE9BQVgsR0FBcUIsSUFBckIsQ0FBQTs7SUFHQSxJQUFLakIsQ0FBQUEsS0FBTCxDQUFXeUIsaUJBQVgsRUFBQSxDQUFBO0FBQ0gsR0FBQTs7RUFFREMsT0FBTyxDQUFDQyxjQUFELEVBQWlCO0lBQ3BCLE1BQU0zQixLQUFLLEdBQUcsSUFBQSxDQUFLQSxLQUFuQixDQUFBO0lBQ0FBLEtBQUssQ0FBQ2lCLE9BQU4sR0FBZ0IsS0FBaEIsQ0FBQTs7SUFFQSxJQUFJakIsS0FBSyxDQUFDNEIsU0FBVixFQUFxQjtBQUVqQixNQUFBLElBQUk1QixLQUFLLENBQUM0QixTQUFOLENBQWdCQyxNQUFwQixFQUNJRixjQUFjLENBQUNHLEdBQWYsQ0FBbUI5QixLQUFuQixFQUEwQkEsS0FBSyxDQUFDNEIsU0FBaEMsQ0FBQSxDQUFBO01BRUo1QixLQUFLLENBQUM0QixTQUFOLEdBQWtCLElBQWxCLENBQUE7QUFDSCxLQUFBO0FBQ0osR0FBQTs7QUFqRVc7Ozs7In0=
