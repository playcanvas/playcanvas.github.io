var t="\nvoid addLightMap(\n\t\tvec3 lightmap, \n\t\tvec3 dir, \n\t\tvec3 worldNormal, \n\t\tvec3 viewDir, \n\t\tvec3 reflectionDir, \n\t\tfloat gloss, \n\t\tvec3 specularity, \n\t\tvec3 vertexNormal, \n\t\tmat3 tbn\n#if defined(LIT_IRIDESCENCE)\n\t\tvec3 iridescenceFresnel, \n\t\tIridescenceArgs iridescence\n#endif\n) {\n\t\tif (dot(dir, dir) < 0.0001) {\n\t\t\t\tdDiffuseLight += lightmap;\n\t\t} else {\n\t\t\t\tfloat vlight = saturate(dot(dir, -vertexNormal));\n\t\t\t\tfloat flight = saturate(dot(dir, -worldNormal));\n\t\t\t\tfloat nlight = (flight / max(vlight, 0.01)) * 0.5;\n\n\t\t\t\tdDiffuseLight += lightmap * nlight * 2.0;\n\n\t\t\t\tvec3 halfDir = normalize(-dir + viewDir);\n\t\t\t\tvec3 specularLight = lightmap * getLightSpecular(halfDir, reflectionDir, worldNormal, viewDir, dir, gloss, tbn);\n\n#ifdef LIT_SPECULAR_FRESNEL\n\t\t\t\tspecularLight *= \n\t\t\t\t\t\tgetFresnel(dot(viewDir, halfDir), \n\t\t\t\t\t\tgloss, \n\t\t\t\t\t\tspecularity\n\t\t\t\t#if defined(LIT_IRIDESCENCE)\n\t\t\t\t\t\t, iridescenceFresnel,\n\t\t\t\t\t\tiridescence\n\t\t\t\t#endif\n\t\t\t\t\t\t);\n#endif\n\n\t\t\t\tdSpecularLight += specularLight;\n\t\t}\n}\n";export{t as default};
