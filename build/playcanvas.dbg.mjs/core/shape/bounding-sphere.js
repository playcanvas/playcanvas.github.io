/**
 * @license
 * PlayCanvas Engine v1.62.0 revision 818511d2b (DEBUG PROFILER)
 * Copyright 2011-2023 PlayCanvas Ltd. All rights reserved.
 */
import { Debug } from '../debug.js';
import { Vec3 } from '../math/vec3.js';

const tmpVecA = new Vec3();
const tmpVecB = new Vec3();

/**
 * A bounding sphere is a volume for facilitating fast intersection testing.
 */
class BoundingSphere {
  /**
   * Center of sphere.
   *
   * @type {Vec3}
   */

  /**
   * The radius of the bounding sphere.
   *
   * @type {number}
   */

  /**
   * Creates a new BoundingSphere instance.
   *
   * @param {Vec3} [center] - The world space coordinate marking the center of the sphere. The
   * constructor takes a reference of this parameter.
   * @param {number} [radius] - The radius of the bounding sphere. Defaults to 0.5.
   * @example
   * // Create a new bounding sphere centered on the origin with a radius of 0.5
   * var sphere = new pc.BoundingSphere();
   */
  constructor(center = new Vec3(), radius = 0.5) {
    this.center = void 0;
    this.radius = void 0;
    Debug.assert(!Object.isFrozen(center), 'The constructor of \'BoundingSphere\' does not accept a constant (frozen) object as a \'center\' parameter');
    this.center = center;
    this.radius = radius;
  }
  containsPoint(point) {
    const lenSq = tmpVecA.sub2(point, this.center).lengthSq();
    const r = this.radius;
    return lenSq < r * r;
  }

  /**
   * Test if a ray intersects with the sphere.
   *
   * @param {import('./ray.js').Ray} ray - Ray to test against (direction must be normalized).
   * @param {Vec3} [point] - If there is an intersection, the intersection point will be copied
   * into here.
   * @returns {boolean} True if there is an intersection.
   */
  intersectsRay(ray, point) {
    const m = tmpVecA.copy(ray.origin).sub(this.center);
    const b = m.dot(tmpVecB.copy(ray.direction).normalize());
    const c = m.dot(m) - this.radius * this.radius;

    // exit if ray's origin outside of sphere (c > 0) and ray pointing away from s (b > 0)
    if (c > 0 && b > 0) return false;
    const discr = b * b - c;
    // a negative discriminant corresponds to ray missing sphere
    if (discr < 0) return false;

    // ray intersects sphere, compute smallest t value of intersection
    const t = Math.abs(-b - Math.sqrt(discr));

    // if t is negative, ray started inside sphere so clamp t to zero
    if (point) point.copy(ray.direction).mulScalar(t).add(ray.origin);
    return true;
  }

  /**
   * Test if a Bounding Sphere is overlapping, enveloping, or inside this Bounding Sphere.
   *
   * @param {BoundingSphere} sphere - Bounding Sphere to test.
   * @returns {boolean} True if the Bounding Sphere is overlapping, enveloping, or inside this Bounding Sphere and false otherwise.
   */
  intersectsBoundingSphere(sphere) {
    tmpVecA.sub2(sphere.center, this.center);
    const totalRadius = sphere.radius + this.radius;
    if (tmpVecA.lengthSq() <= totalRadius * totalRadius) {
      return true;
    }
    return false;
  }
}

export { BoundingSphere };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm91bmRpbmctc3BoZXJlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29yZS9zaGFwZS9ib3VuZGluZy1zcGhlcmUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGVidWcgfSBmcm9tICcuLi9kZWJ1Zy5qcyc7XG5pbXBvcnQgeyBWZWMzIH0gZnJvbSAnLi4vbWF0aC92ZWMzLmpzJztcblxuY29uc3QgdG1wVmVjQSA9IG5ldyBWZWMzKCk7XG5jb25zdCB0bXBWZWNCID0gbmV3IFZlYzMoKTtcblxuLyoqXG4gKiBBIGJvdW5kaW5nIHNwaGVyZSBpcyBhIHZvbHVtZSBmb3IgZmFjaWxpdGF0aW5nIGZhc3QgaW50ZXJzZWN0aW9uIHRlc3RpbmcuXG4gKi9cbmNsYXNzIEJvdW5kaW5nU3BoZXJlIHtcbiAgICAvKipcbiAgICAgKiBDZW50ZXIgb2Ygc3BoZXJlLlxuICAgICAqXG4gICAgICogQHR5cGUge1ZlYzN9XG4gICAgICovXG4gICAgY2VudGVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHJhZGl1cyBvZiB0aGUgYm91bmRpbmcgc3BoZXJlLlxuICAgICAqXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICByYWRpdXM7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IEJvdW5kaW5nU3BoZXJlIGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtWZWMzfSBbY2VudGVyXSAtIFRoZSB3b3JsZCBzcGFjZSBjb29yZGluYXRlIG1hcmtpbmcgdGhlIGNlbnRlciBvZiB0aGUgc3BoZXJlLiBUaGVcbiAgICAgKiBjb25zdHJ1Y3RvciB0YWtlcyBhIHJlZmVyZW5jZSBvZiB0aGlzIHBhcmFtZXRlci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3JhZGl1c10gLSBUaGUgcmFkaXVzIG9mIHRoZSBib3VuZGluZyBzcGhlcmUuIERlZmF1bHRzIHRvIDAuNS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIENyZWF0ZSBhIG5ldyBib3VuZGluZyBzcGhlcmUgY2VudGVyZWQgb24gdGhlIG9yaWdpbiB3aXRoIGEgcmFkaXVzIG9mIDAuNVxuICAgICAqIHZhciBzcGhlcmUgPSBuZXcgcGMuQm91bmRpbmdTcGhlcmUoKTtcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihjZW50ZXIgPSBuZXcgVmVjMygpLCByYWRpdXMgPSAwLjUpIHtcbiAgICAgICAgRGVidWcuYXNzZXJ0KCFPYmplY3QuaXNGcm96ZW4oY2VudGVyKSwgJ1RoZSBjb25zdHJ1Y3RvciBvZiBcXCdCb3VuZGluZ1NwaGVyZVxcJyBkb2VzIG5vdCBhY2NlcHQgYSBjb25zdGFudCAoZnJvemVuKSBvYmplY3QgYXMgYSBcXCdjZW50ZXJcXCcgcGFyYW1ldGVyJyk7XG5cbiAgICAgICAgdGhpcy5jZW50ZXIgPSBjZW50ZXI7XG4gICAgICAgIHRoaXMucmFkaXVzID0gcmFkaXVzO1xuICAgIH1cblxuICAgIGNvbnRhaW5zUG9pbnQocG9pbnQpIHtcbiAgICAgICAgY29uc3QgbGVuU3EgPSB0bXBWZWNBLnN1YjIocG9pbnQsIHRoaXMuY2VudGVyKS5sZW5ndGhTcSgpO1xuICAgICAgICBjb25zdCByID0gdGhpcy5yYWRpdXM7XG4gICAgICAgIHJldHVybiBsZW5TcSA8IHIgKiByO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRlc3QgaWYgYSByYXkgaW50ZXJzZWN0cyB3aXRoIHRoZSBzcGhlcmUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2ltcG9ydCgnLi9yYXkuanMnKS5SYXl9IHJheSAtIFJheSB0byB0ZXN0IGFnYWluc3QgKGRpcmVjdGlvbiBtdXN0IGJlIG5vcm1hbGl6ZWQpLlxuICAgICAqIEBwYXJhbSB7VmVjM30gW3BvaW50XSAtIElmIHRoZXJlIGlzIGFuIGludGVyc2VjdGlvbiwgdGhlIGludGVyc2VjdGlvbiBwb2ludCB3aWxsIGJlIGNvcGllZFxuICAgICAqIGludG8gaGVyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGVyZSBpcyBhbiBpbnRlcnNlY3Rpb24uXG4gICAgICovXG4gICAgaW50ZXJzZWN0c1JheShyYXksIHBvaW50KSB7XG4gICAgICAgIGNvbnN0IG0gPSB0bXBWZWNBLmNvcHkocmF5Lm9yaWdpbikuc3ViKHRoaXMuY2VudGVyKTtcbiAgICAgICAgY29uc3QgYiA9IG0uZG90KHRtcFZlY0IuY29weShyYXkuZGlyZWN0aW9uKS5ub3JtYWxpemUoKSk7XG4gICAgICAgIGNvbnN0IGMgPSBtLmRvdChtKSAtIHRoaXMucmFkaXVzICogdGhpcy5yYWRpdXM7XG5cbiAgICAgICAgLy8gZXhpdCBpZiByYXkncyBvcmlnaW4gb3V0c2lkZSBvZiBzcGhlcmUgKGMgPiAwKSBhbmQgcmF5IHBvaW50aW5nIGF3YXkgZnJvbSBzIChiID4gMClcbiAgICAgICAgaWYgKGMgPiAwICYmIGIgPiAwKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIGNvbnN0IGRpc2NyID0gYiAqIGIgLSBjO1xuICAgICAgICAvLyBhIG5lZ2F0aXZlIGRpc2NyaW1pbmFudCBjb3JyZXNwb25kcyB0byByYXkgbWlzc2luZyBzcGhlcmVcbiAgICAgICAgaWYgKGRpc2NyIDwgMClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICAvLyByYXkgaW50ZXJzZWN0cyBzcGhlcmUsIGNvbXB1dGUgc21hbGxlc3QgdCB2YWx1ZSBvZiBpbnRlcnNlY3Rpb25cbiAgICAgICAgY29uc3QgdCA9IE1hdGguYWJzKC1iIC0gTWF0aC5zcXJ0KGRpc2NyKSk7XG5cbiAgICAgICAgLy8gaWYgdCBpcyBuZWdhdGl2ZSwgcmF5IHN0YXJ0ZWQgaW5zaWRlIHNwaGVyZSBzbyBjbGFtcCB0IHRvIHplcm9cbiAgICAgICAgaWYgKHBvaW50KVxuICAgICAgICAgICAgcG9pbnQuY29weShyYXkuZGlyZWN0aW9uKS5tdWxTY2FsYXIodCkuYWRkKHJheS5vcmlnaW4pO1xuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRlc3QgaWYgYSBCb3VuZGluZyBTcGhlcmUgaXMgb3ZlcmxhcHBpbmcsIGVudmVsb3BpbmcsIG9yIGluc2lkZSB0aGlzIEJvdW5kaW5nIFNwaGVyZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Qm91bmRpbmdTcGhlcmV9IHNwaGVyZSAtIEJvdW5kaW5nIFNwaGVyZSB0byB0ZXN0LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBCb3VuZGluZyBTcGhlcmUgaXMgb3ZlcmxhcHBpbmcsIGVudmVsb3BpbmcsIG9yIGluc2lkZSB0aGlzIEJvdW5kaW5nIFNwaGVyZSBhbmQgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAqL1xuICAgIGludGVyc2VjdHNCb3VuZGluZ1NwaGVyZShzcGhlcmUpIHtcbiAgICAgICAgdG1wVmVjQS5zdWIyKHNwaGVyZS5jZW50ZXIsIHRoaXMuY2VudGVyKTtcbiAgICAgICAgY29uc3QgdG90YWxSYWRpdXMgPSBzcGhlcmUucmFkaXVzICsgdGhpcy5yYWRpdXM7XG4gICAgICAgIGlmICh0bXBWZWNBLmxlbmd0aFNxKCkgPD0gdG90YWxSYWRpdXMgKiB0b3RhbFJhZGl1cykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuXG5leHBvcnQgeyBCb3VuZGluZ1NwaGVyZSB9O1xuIl0sIm5hbWVzIjpbInRtcFZlY0EiLCJWZWMzIiwidG1wVmVjQiIsIkJvdW5kaW5nU3BoZXJlIiwiY29uc3RydWN0b3IiLCJjZW50ZXIiLCJyYWRpdXMiLCJEZWJ1ZyIsImFzc2VydCIsIk9iamVjdCIsImlzRnJvemVuIiwiY29udGFpbnNQb2ludCIsInBvaW50IiwibGVuU3EiLCJzdWIyIiwibGVuZ3RoU3EiLCJyIiwiaW50ZXJzZWN0c1JheSIsInJheSIsIm0iLCJjb3B5Iiwib3JpZ2luIiwic3ViIiwiYiIsImRvdCIsImRpcmVjdGlvbiIsIm5vcm1hbGl6ZSIsImMiLCJkaXNjciIsInQiLCJNYXRoIiwiYWJzIiwic3FydCIsIm11bFNjYWxhciIsImFkZCIsImludGVyc2VjdHNCb3VuZGluZ1NwaGVyZSIsInNwaGVyZSIsInRvdGFsUmFkaXVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUdBLE1BQU1BLE9BQU8sR0FBRyxJQUFJQyxJQUFJLEVBQUUsQ0FBQTtBQUMxQixNQUFNQyxPQUFPLEdBQUcsSUFBSUQsSUFBSSxFQUFFLENBQUE7O0FBRTFCO0FBQ0E7QUFDQTtBQUNBLE1BQU1FLGNBQWMsQ0FBQztBQUNqQjtBQUNKO0FBQ0E7QUFDQTtBQUNBOztBQUdJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBR0k7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDSUMsV0FBVyxDQUFDQyxNQUFNLEdBQUcsSUFBSUosSUFBSSxFQUFFLEVBQUVLLE1BQU0sR0FBRyxHQUFHLEVBQUU7QUFBQSxJQUFBLElBQUEsQ0FuQi9DRCxNQUFNLEdBQUEsS0FBQSxDQUFBLENBQUE7QUFBQSxJQUFBLElBQUEsQ0FPTkMsTUFBTSxHQUFBLEtBQUEsQ0FBQSxDQUFBO0FBYUZDLElBQUFBLEtBQUssQ0FBQ0MsTUFBTSxDQUFDLENBQUNDLE1BQU0sQ0FBQ0MsUUFBUSxDQUFDTCxNQUFNLENBQUMsRUFBRSw0R0FBNEcsQ0FBQyxDQUFBO0lBRXBKLElBQUksQ0FBQ0EsTUFBTSxHQUFHQSxNQUFNLENBQUE7SUFDcEIsSUFBSSxDQUFDQyxNQUFNLEdBQUdBLE1BQU0sQ0FBQTtBQUN4QixHQUFBO0VBRUFLLGFBQWEsQ0FBQ0MsS0FBSyxFQUFFO0FBQ2pCLElBQUEsTUFBTUMsS0FBSyxHQUFHYixPQUFPLENBQUNjLElBQUksQ0FBQ0YsS0FBSyxFQUFFLElBQUksQ0FBQ1AsTUFBTSxDQUFDLENBQUNVLFFBQVEsRUFBRSxDQUFBO0FBQ3pELElBQUEsTUFBTUMsQ0FBQyxHQUFHLElBQUksQ0FBQ1YsTUFBTSxDQUFBO0FBQ3JCLElBQUEsT0FBT08sS0FBSyxHQUFHRyxDQUFDLEdBQUdBLENBQUMsQ0FBQTtBQUN4QixHQUFBOztBQUVBO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDSUMsRUFBQUEsYUFBYSxDQUFDQyxHQUFHLEVBQUVOLEtBQUssRUFBRTtBQUN0QixJQUFBLE1BQU1PLENBQUMsR0FBR25CLE9BQU8sQ0FBQ29CLElBQUksQ0FBQ0YsR0FBRyxDQUFDRyxNQUFNLENBQUMsQ0FBQ0MsR0FBRyxDQUFDLElBQUksQ0FBQ2pCLE1BQU0sQ0FBQyxDQUFBO0FBQ25ELElBQUEsTUFBTWtCLENBQUMsR0FBR0osQ0FBQyxDQUFDSyxHQUFHLENBQUN0QixPQUFPLENBQUNrQixJQUFJLENBQUNGLEdBQUcsQ0FBQ08sU0FBUyxDQUFDLENBQUNDLFNBQVMsRUFBRSxDQUFDLENBQUE7QUFDeEQsSUFBQSxNQUFNQyxDQUFDLEdBQUdSLENBQUMsQ0FBQ0ssR0FBRyxDQUFDTCxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUNiLE1BQU0sR0FBRyxJQUFJLENBQUNBLE1BQU0sQ0FBQTs7QUFFOUM7SUFDQSxJQUFJcUIsQ0FBQyxHQUFHLENBQUMsSUFBSUosQ0FBQyxHQUFHLENBQUMsRUFDZCxPQUFPLEtBQUssQ0FBQTtBQUVoQixJQUFBLE1BQU1LLEtBQUssR0FBR0wsQ0FBQyxHQUFHQSxDQUFDLEdBQUdJLENBQUMsQ0FBQTtBQUN2QjtBQUNBLElBQUEsSUFBSUMsS0FBSyxHQUFHLENBQUMsRUFDVCxPQUFPLEtBQUssQ0FBQTs7QUFFaEI7QUFDQSxJQUFBLE1BQU1DLENBQUMsR0FBR0MsSUFBSSxDQUFDQyxHQUFHLENBQUMsQ0FBQ1IsQ0FBQyxHQUFHTyxJQUFJLENBQUNFLElBQUksQ0FBQ0osS0FBSyxDQUFDLENBQUMsQ0FBQTs7QUFFekM7SUFDQSxJQUFJaEIsS0FBSyxFQUNMQSxLQUFLLENBQUNRLElBQUksQ0FBQ0YsR0FBRyxDQUFDTyxTQUFTLENBQUMsQ0FBQ1EsU0FBUyxDQUFDSixDQUFDLENBQUMsQ0FBQ0ssR0FBRyxDQUFDaEIsR0FBRyxDQUFDRyxNQUFNLENBQUMsQ0FBQTtBQUUxRCxJQUFBLE9BQU8sSUFBSSxDQUFBO0FBQ2YsR0FBQTs7QUFFQTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDSWMsd0JBQXdCLENBQUNDLE1BQU0sRUFBRTtJQUM3QnBDLE9BQU8sQ0FBQ2MsSUFBSSxDQUFDc0IsTUFBTSxDQUFDL0IsTUFBTSxFQUFFLElBQUksQ0FBQ0EsTUFBTSxDQUFDLENBQUE7SUFDeEMsTUFBTWdDLFdBQVcsR0FBR0QsTUFBTSxDQUFDOUIsTUFBTSxHQUFHLElBQUksQ0FBQ0EsTUFBTSxDQUFBO0lBQy9DLElBQUlOLE9BQU8sQ0FBQ2UsUUFBUSxFQUFFLElBQUlzQixXQUFXLEdBQUdBLFdBQVcsRUFBRTtBQUNqRCxNQUFBLE9BQU8sSUFBSSxDQUFBO0FBQ2YsS0FBQTtBQUVBLElBQUEsT0FBTyxLQUFLLENBQUE7QUFDaEIsR0FBQTtBQUNKOzs7OyJ9
