import{Color as t}from"../core/math/color.js";import{Mat4 as e}from"../core/math/mat4.js";import{Vec3 as r}from"../core/math/vec3.js";import{Vec4 as i}from"../core/math/vec4.js";import{math as s}from"../core/math/math.js";import{Frustum as o}from"../core/shape/frustum.js";import{ASPECT_AUTO as a,LAYERID_WORLD as h,LAYERID_DEPTH as l,LAYERID_SKYBOX as c,LAYERID_UI as n,LAYERID_IMMEDIATE as _,PROJECTION_PERSPECTIVE as p}from"./constants.js";const u=new r,f=new r,v=new r,g=new e,M=[new r,new r,new r,new r,new r,new r,new r,new r];class y{constructor(){this._aspectRatio=16/9,this._aspectRatioMode=a,this._calculateProjection=null,this._calculateTransform=null,this._clearColor=new t(.75,.75,.75,1),this._clearColorBuffer=!0,this._clearDepth=1,this._clearDepthBuffer=!0,this._clearStencil=0,this._clearStencilBuffer=!0,this._cullingMask=4294967295,this._cullFaces=!0,this._farClip=1e3,this._flipFaces=!1,this._fov=45,this._frustumCulling=!0,this._horizontalFov=!1,this._layers=[h,l,c,n,_],this._layersSet=new Set(this._layers),this._nearClip=.1,this._node=null,this._orthoHeight=10,this._projection=p,this._rect=new i(0,0,1,1),this._renderTarget=null,this._scissorRect=new i(0,0,1,1),this._scissorRectClear=!1,this._aperture=16,this._shutter=.001,this._sensitivity=1e3,this._projMat=new e,this._projMatDirty=!0,this._projMatSkybox=new e,this._viewMat=new e,this._viewMatDirty=!0,this._viewProjMat=new e,this._viewProjMatDirty=!0,this.frustum=new o,this._xr=null,this._xrProperties={horizontalFov:this._horizontalFov,fov:this._fov,aspectRatio:this._aspectRatio,farClip:this._farClip,nearClip:this._nearClip}}get fullSizeClearRect(){const t=this._scissorRectClear?this.scissorRect:this._rect;return 0===t.x&&0===t.y&&1===t.z&&1===t.w}set aspectRatio(t){this._aspectRatio!==t&&(this._aspectRatio=t,this._projMatDirty=!0)}get aspectRatio(){var t;return null!=(t=this.xr)&&t.active?this._xrProperties.aspectRatio:this._aspectRatio}set aspectRatioMode(t){this._aspectRatioMode!==t&&(this._aspectRatioMode=t,this._projMatDirty=!0)}get aspectRatioMode(){return this._aspectRatioMode}set calculateProjection(t){this._calculateProjection=t,this._projMatDirty=!0}get calculateProjection(){return this._calculateProjection}set calculateTransform(t){this._calculateTransform=t}get calculateTransform(){return this._calculateTransform}set clearColor(t){this._clearColor.copy(t)}get clearColor(){return this._clearColor}set clearColorBuffer(t){this._clearColorBuffer=t}get clearColorBuffer(){return this._clearColorBuffer}set clearDepth(t){this._clearDepth=t}get clearDepth(){return this._clearDepth}set clearDepthBuffer(t){this._clearDepthBuffer=t}get clearDepthBuffer(){return this._clearDepthBuffer}set clearStencil(t){this._clearStencil=t}get clearStencil(){return this._clearStencil}set clearStencilBuffer(t){this._clearStencilBuffer=t}get clearStencilBuffer(){return this._clearStencilBuffer}set cullingMask(t){this._cullingMask=t}get cullingMask(){return this._cullingMask}set cullFaces(t){this._cullFaces=t}get cullFaces(){return this._cullFaces}set farClip(t){this._farClip!==t&&(this._farClip=t,this._projMatDirty=!0)}get farClip(){var t;return null!=(t=this.xr)&&t.active?this._xrProperties.farClip:this._farClip}set flipFaces(t){this._flipFaces=t}get flipFaces(){return this._flipFaces}set fov(t){this._fov!==t&&(this._fov=t,this._projMatDirty=!0)}get fov(){var t;return null!=(t=this.xr)&&t.active?this._xrProperties.fov:this._fov}set frustumCulling(t){this._frustumCulling=t}get frustumCulling(){return this._frustumCulling}set horizontalFov(t){this._horizontalFov!==t&&(this._horizontalFov=t,this._projMatDirty=!0)}get horizontalFov(){var t;return null!=(t=this.xr)&&t.active?this._xrProperties.horizontalFov:this._horizontalFov}set layers(t){this._layers=t.slice(0),this._layersSet=new Set(this._layers)}get layers(){return this._layers}get layersSet(){return this._layersSet}set nearClip(t){this._nearClip!==t&&(this._nearClip=t,this._projMatDirty=!0)}get nearClip(){var t;return null!=(t=this.xr)&&t.active?this._xrProperties.nearClip:this._nearClip}set node(t){this._node=t}get node(){return this._node}set orthoHeight(t){this._orthoHeight!==t&&(this._orthoHeight=t,this._projMatDirty=!0)}get orthoHeight(){return this._orthoHeight}set projection(t){this._projection!==t&&(this._projection=t,this._projMatDirty=!0)}get projection(){return this._projection}get projectionMatrix(){return this._evaluateProjectionMatrix(),this._projMat}set rect(t){this._rect.copy(t)}get rect(){return this._rect}set renderTarget(t){this._renderTarget=t}get renderTarget(){return this._renderTarget}set scissorRect(t){this._scissorRect.copy(t)}get scissorRect(){return this._scissorRect}get viewMatrix(){if(this._viewMatDirty){const t=this._node.getWorldTransform();this._viewMat.copy(t).invert(),this._viewMatDirty=!1}return this._viewMat}set aperture(t){this._aperture=t}get aperture(){return this._aperture}set sensitivity(t){this._sensitivity=t}get sensitivity(){return this._sensitivity}set shutter(t){this._shutter=t}get shutter(){return this._shutter}set xr(t){this._xr!==t&&(this._xr=t,this._projMatDirty=!0)}get xr(){return this._xr}clone(){return(new y).copy(this)}copy(t){return this._aspectRatio=t._aspectRatio,this._farClip=t._farClip,this._fov=t._fov,this._horizontalFov=t._horizontalFov,this._nearClip=t._nearClip,this._xrProperties.aspectRatio=t._xrProperties.aspectRatio,this._xrProperties.farClip=t._xrProperties.farClip,this._xrProperties.fov=t._xrProperties.fov,this._xrProperties.horizontalFov=t._xrProperties.horizontalFov,this._xrProperties.nearClip=t._xrProperties.nearClip,this.aspectRatioMode=t.aspectRatioMode,this.calculateProjection=t.calculateProjection,this.calculateTransform=t.calculateTransform,this.clearColor=t.clearColor,this.clearColorBuffer=t.clearColorBuffer,this.clearDepth=t.clearDepth,this.clearDepthBuffer=t.clearDepthBuffer,this.clearStencil=t.clearStencil,this.clearStencilBuffer=t.clearStencilBuffer,this.cullFaces=t.cullFaces,this.cullingMask=t.cullingMask,this.flipFaces=t.flipFaces,this.frustumCulling=t.frustumCulling,this.layers=t.layers,this.orthoHeight=t.orthoHeight,this.projection=t.projection,this.rect=t.rect,this.renderTarget=t.renderTarget,this.scissorRect=t.scissorRect,this.aperture=t.aperture,this.shutter=t.shutter,this.sensitivity=t.sensitivity,this._projMatDirty=!0,this}_updateViewProjMat(){(this._projMatDirty||this._viewMatDirty||this._viewProjMatDirty)&&(this._viewProjMat.mul2(this.projectionMatrix,this.viewMatrix),this._viewProjMatDirty=!1)}worldToScreen(t,e,i,s=new r){this._updateViewProjMat(),this._viewProjMat.transformPoint(t,s);const o=this._viewProjMat.data,a=t.x*o[3]+t.y*o[7]+t.z*o[11]+1*o[15];return s.x=.5*(s.x/a+1)*e,s.y=.5*(1-s.y/a)*i,s}screenToWorld(t,i,s,o,a,h=new r){const l=this.farClip-this.nearClip;if(u.set(t/o,(a-i)/a,s/l),u.mulScalar(2),u.sub(r.ONE),this._projection===p){e._getPerspectiveHalfSize(f,this.fov,this.aspectRatio,this.nearClip,this.horizontalFov),f.x*=u.x,f.y*=u.y;const t=this._node.getWorldTransform();f.z=-this.nearClip,t.transformPoint(f,v);const r=this._node.getPosition();h.sub2(v,r),h.normalize(),h.mulScalar(s),h.add(r)}else this._updateViewProjMat(),g.copy(this._viewProjMat).invert(),g.transformPoint(u,h);return h}_evaluateProjectionMatrix(){if(this._projMatDirty){if(this._projection===p)this._projMat.setPerspective(this.fov,this.aspectRatio,this.nearClip,this.farClip,this.horizontalFov),this._projMatSkybox.copy(this._projMat);else{const t=this._orthoHeight,e=t*this.aspectRatio;this._projMat.setOrtho(-e,e,-t,t,this.nearClip,this.farClip),this._projMatSkybox.setPerspective(this.fov,this.aspectRatio,this.nearClip,this.farClip)}this._projMatDirty=!1}}getProjectionMatrixSkybox(){return this._evaluateProjectionMatrix(),this._projMatSkybox}getExposure(){const t=Math.log2(this._aperture*this._aperture/this._shutter*100/this._sensitivity);return 1/(1.2*Math.pow(2,t))}getScreenSize(t){if(this._projection===p){const e=this._node.getPosition().distance(t.center);if(e<t.radius)return 1;const r=Math.asin(t.radius/e),i=Math.tan(r),o=Math.tan(this.fov/2*s.DEG_TO_RAD);return Math.min(i/o,1)}return s.clamp(t.radius/this._orthoHeight,0,1)}getFrustumCorners(t=this.nearClip,e=this.farClip){const r=this.fov*Math.PI/180;let i=this._projection===p?Math.tan(r/2)*t:this._orthoHeight,s=i*this.aspectRatio;const o=M;return o[0].x=s,o[0].y=-i,o[0].z=-t,o[1].x=s,o[1].y=i,o[1].z=-t,o[2].x=-s,o[2].y=i,o[2].z=-t,o[3].x=-s,o[3].y=-i,o[3].z=-t,this._projection===p&&(i=Math.tan(r/2)*e,s=i*this.aspectRatio),o[4].x=s,o[4].y=-i,o[4].z=-e,o[5].x=s,o[5].y=i,o[5].z=-e,o[6].x=-s,o[6].y=i,o[6].z=-e,o[7].x=-s,o[7].y=-i,o[7].z=-e,o}setXrProperties(t){Object.assign(this._xrProperties,t),this._projMatDirty=!0}}export{y as Camera};
