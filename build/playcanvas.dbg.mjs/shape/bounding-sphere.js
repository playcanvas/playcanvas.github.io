/**
 * @license
 * PlayCanvas Engine v1.57.1 revision 256dd83c2 (DEBUG PROFILER)
 * Copyright 2011-2022 PlayCanvas Ltd. All rights reserved.
 */
import { Debug } from '../core/debug.js';
import { Vec3 } from '../math/vec3.js';

const tmpVecA = new Vec3();
const tmpVecB = new Vec3();

class BoundingSphere {
  constructor(center = new Vec3(), radius = 0.5) {
    Debug.assert(!Object.isFrozen(center), 'The constructor of \'BoundingSphere\' does not accept a constant (frozen) object as a \'center\' parameter');
    this.center = center;
    this.radius = radius;
  }

  containsPoint(point) {
    const lenSq = tmpVecA.sub2(point, this.center).lengthSq();
    const r = this.radius;
    return lenSq < r * r;
  }

  intersectsRay(ray, point) {
    const m = tmpVecA.copy(ray.origin).sub(this.center);
    const b = m.dot(tmpVecB.copy(ray.direction).normalize());
    const c = m.dot(m) - this.radius * this.radius;
    if (c > 0 && b > 0) return false;
    const discr = b * b - c;
    if (discr < 0) return false;
    const t = Math.abs(-b - Math.sqrt(discr));
    if (point) point.copy(ray.direction).mulScalar(t).add(ray.origin);
    return true;
  }

  intersectsBoundingSphere(sphere) {
    tmpVecA.sub2(sphere.center, this.center);
    const totalRadius = sphere.radius + this.radius;

    if (tmpVecA.lengthSq() <= totalRadius * totalRadius) {
      return true;
    }

    return false;
  }

}

export { BoundingSphere };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm91bmRpbmctc3BoZXJlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2hhcGUvYm91bmRpbmctc3BoZXJlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERlYnVnIH0gZnJvbSAnLi4vY29yZS9kZWJ1Zy5qcyc7XG5pbXBvcnQgeyBWZWMzIH0gZnJvbSAnLi4vbWF0aC92ZWMzLmpzJztcblxuLyoqIEB0eXBlZGVmIHtpbXBvcnQoJy4vcmF5LmpzJykuUmF5fSBSYXkgKi9cblxuY29uc3QgdG1wVmVjQSA9IG5ldyBWZWMzKCk7XG5jb25zdCB0bXBWZWNCID0gbmV3IFZlYzMoKTtcblxuLyoqXG4gKiBBIGJvdW5kaW5nIHNwaGVyZSBpcyBhIHZvbHVtZSBmb3IgZmFjaWxpdGF0aW5nIGZhc3QgaW50ZXJzZWN0aW9uIHRlc3RpbmcuXG4gKi9cbmNsYXNzIEJvdW5kaW5nU3BoZXJlIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IEJvdW5kaW5nU3BoZXJlIGluc3RhbmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtWZWMzfSBbY2VudGVyXSAtIFRoZSB3b3JsZCBzcGFjZSBjb29yZGluYXRlIG1hcmtpbmcgdGhlIGNlbnRlciBvZiB0aGUgc3BoZXJlLiBUaGVcbiAgICAgKiBjb25zdHJ1Y3RvciB0YWtlcyBhIHJlZmVyZW5jZSBvZiB0aGlzIHBhcmFtZXRlci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3JhZGl1c10gLSBUaGUgcmFkaXVzIG9mIHRoZSBib3VuZGluZyBzcGhlcmUuIERlZmF1bHRzIHRvIDAuNS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIENyZWF0ZSBhIG5ldyBib3VuZGluZyBzcGhlcmUgY2VudGVyZWQgb24gdGhlIG9yaWdpbiB3aXRoIGEgcmFkaXVzIG9mIDAuNVxuICAgICAqIHZhciBzcGhlcmUgPSBuZXcgcGMuQm91bmRpbmdTcGhlcmUoKTtcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihjZW50ZXIgPSBuZXcgVmVjMygpLCByYWRpdXMgPSAwLjUpIHtcbiAgICAgICAgRGVidWcuYXNzZXJ0KCFPYmplY3QuaXNGcm96ZW4oY2VudGVyKSwgJ1RoZSBjb25zdHJ1Y3RvciBvZiBcXCdCb3VuZGluZ1NwaGVyZVxcJyBkb2VzIG5vdCBhY2NlcHQgYSBjb25zdGFudCAoZnJvemVuKSBvYmplY3QgYXMgYSBcXCdjZW50ZXJcXCcgcGFyYW1ldGVyJyk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENlbnRlciBvZiBzcGhlcmUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEB0eXBlIHtWZWMzfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5jZW50ZXIgPSBjZW50ZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcmFkaXVzIG9mIHRoZSBib3VuZGluZyBzcGhlcmUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnJhZGl1cyA9IHJhZGl1cztcbiAgICB9XG5cbiAgICBjb250YWluc1BvaW50KHBvaW50KSB7XG4gICAgICAgIGNvbnN0IGxlblNxID0gdG1wVmVjQS5zdWIyKHBvaW50LCB0aGlzLmNlbnRlcikubGVuZ3RoU3EoKTtcbiAgICAgICAgY29uc3QgciA9IHRoaXMucmFkaXVzO1xuICAgICAgICByZXR1cm4gbGVuU3EgPCByICogcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUZXN0IGlmIGEgcmF5IGludGVyc2VjdHMgd2l0aCB0aGUgc3BoZXJlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtSYXl9IHJheSAtIFJheSB0byB0ZXN0IGFnYWluc3QgKGRpcmVjdGlvbiBtdXN0IGJlIG5vcm1hbGl6ZWQpLlxuICAgICAqIEBwYXJhbSB7VmVjM30gW3BvaW50XSAtIElmIHRoZXJlIGlzIGFuIGludGVyc2VjdGlvbiwgdGhlIGludGVyc2VjdGlvbiBwb2ludCB3aWxsIGJlIGNvcGllZFxuICAgICAqIGludG8gaGVyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGVyZSBpcyBhbiBpbnRlcnNlY3Rpb24uXG4gICAgICovXG4gICAgaW50ZXJzZWN0c1JheShyYXksIHBvaW50KSB7XG4gICAgICAgIGNvbnN0IG0gPSB0bXBWZWNBLmNvcHkocmF5Lm9yaWdpbikuc3ViKHRoaXMuY2VudGVyKTtcbiAgICAgICAgY29uc3QgYiA9IG0uZG90KHRtcFZlY0IuY29weShyYXkuZGlyZWN0aW9uKS5ub3JtYWxpemUoKSk7XG4gICAgICAgIGNvbnN0IGMgPSBtLmRvdChtKSAtIHRoaXMucmFkaXVzICogdGhpcy5yYWRpdXM7XG5cbiAgICAgICAgLy8gZXhpdCBpZiByYXkncyBvcmlnaW4gb3V0c2lkZSBvZiBzcGhlcmUgKGMgPiAwKSBhbmQgcmF5IHBvaW50aW5nIGF3YXkgZnJvbSBzIChiID4gMClcbiAgICAgICAgaWYgKGMgPiAwICYmIGIgPiAwKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIGNvbnN0IGRpc2NyID0gYiAqIGIgLSBjO1xuICAgICAgICAvLyBhIG5lZ2F0aXZlIGRpc2NyaW1pbmFudCBjb3JyZXNwb25kcyB0byByYXkgbWlzc2luZyBzcGhlcmVcbiAgICAgICAgaWYgKGRpc2NyIDwgMClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICAvLyByYXkgaW50ZXJzZWN0cyBzcGhlcmUsIGNvbXB1dGUgc21hbGxlc3QgdCB2YWx1ZSBvZiBpbnRlcnNlY3Rpb25cbiAgICAgICAgY29uc3QgdCA9IE1hdGguYWJzKC1iIC0gTWF0aC5zcXJ0KGRpc2NyKSk7XG5cbiAgICAgICAgLy8gaWYgdCBpcyBuZWdhdGl2ZSwgcmF5IHN0YXJ0ZWQgaW5zaWRlIHNwaGVyZSBzbyBjbGFtcCB0IHRvIHplcm9cbiAgICAgICAgaWYgKHBvaW50KVxuICAgICAgICAgICAgcG9pbnQuY29weShyYXkuZGlyZWN0aW9uKS5tdWxTY2FsYXIodCkuYWRkKHJheS5vcmlnaW4pO1xuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRlc3QgaWYgYSBCb3VuZGluZyBTcGhlcmUgaXMgb3ZlcmxhcHBpbmcsIGVudmVsb3BpbmcsIG9yIGluc2lkZSB0aGlzIEJvdW5kaW5nIFNwaGVyZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7Qm91bmRpbmdTcGhlcmV9IHNwaGVyZSAtIEJvdW5kaW5nIFNwaGVyZSB0byB0ZXN0LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBCb3VuZGluZyBTcGhlcmUgaXMgb3ZlcmxhcHBpbmcsIGVudmVsb3BpbmcsIG9yIGluc2lkZSB0aGlzIEJvdW5kaW5nIFNwaGVyZSBhbmQgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgICAqL1xuICAgIGludGVyc2VjdHNCb3VuZGluZ1NwaGVyZShzcGhlcmUpIHtcbiAgICAgICAgdG1wVmVjQS5zdWIyKHNwaGVyZS5jZW50ZXIsIHRoaXMuY2VudGVyKTtcbiAgICAgICAgY29uc3QgdG90YWxSYWRpdXMgPSBzcGhlcmUucmFkaXVzICsgdGhpcy5yYWRpdXM7XG4gICAgICAgIGlmICh0bXBWZWNBLmxlbmd0aFNxKCkgPD0gdG90YWxSYWRpdXMgKiB0b3RhbFJhZGl1cykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuXG5leHBvcnQgeyBCb3VuZGluZ1NwaGVyZSB9O1xuIl0sIm5hbWVzIjpbInRtcFZlY0EiLCJWZWMzIiwidG1wVmVjQiIsIkJvdW5kaW5nU3BoZXJlIiwiY29uc3RydWN0b3IiLCJjZW50ZXIiLCJyYWRpdXMiLCJEZWJ1ZyIsImFzc2VydCIsIk9iamVjdCIsImlzRnJvemVuIiwiY29udGFpbnNQb2ludCIsInBvaW50IiwibGVuU3EiLCJzdWIyIiwibGVuZ3RoU3EiLCJyIiwiaW50ZXJzZWN0c1JheSIsInJheSIsIm0iLCJjb3B5Iiwib3JpZ2luIiwic3ViIiwiYiIsImRvdCIsImRpcmVjdGlvbiIsIm5vcm1hbGl6ZSIsImMiLCJkaXNjciIsInQiLCJNYXRoIiwiYWJzIiwic3FydCIsIm11bFNjYWxhciIsImFkZCIsImludGVyc2VjdHNCb3VuZGluZ1NwaGVyZSIsInNwaGVyZSIsInRvdGFsUmFkaXVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUtBLE1BQU1BLE9BQU8sR0FBRyxJQUFJQyxJQUFKLEVBQWhCLENBQUE7QUFDQSxNQUFNQyxPQUFPLEdBQUcsSUFBSUQsSUFBSixFQUFoQixDQUFBOztBQUtBLE1BQU1FLGNBQU4sQ0FBcUI7RUFXakJDLFdBQVcsQ0FBQ0MsTUFBTSxHQUFHLElBQUlKLElBQUosRUFBVixFQUFzQkssTUFBTSxHQUFHLEdBQS9CLEVBQW9DO0lBQzNDQyxLQUFLLENBQUNDLE1BQU4sQ0FBYSxDQUFDQyxNQUFNLENBQUNDLFFBQVAsQ0FBZ0JMLE1BQWhCLENBQWQsRUFBdUMsNEdBQXZDLENBQUEsQ0FBQTtJQU9BLElBQUtBLENBQUFBLE1BQUwsR0FBY0EsTUFBZCxDQUFBO0lBTUEsSUFBS0MsQ0FBQUEsTUFBTCxHQUFjQSxNQUFkLENBQUE7QUFDSCxHQUFBOztFQUVESyxhQUFhLENBQUNDLEtBQUQsRUFBUTtBQUNqQixJQUFBLE1BQU1DLEtBQUssR0FBR2IsT0FBTyxDQUFDYyxJQUFSLENBQWFGLEtBQWIsRUFBb0IsSUFBS1AsQ0FBQUEsTUFBekIsQ0FBaUNVLENBQUFBLFFBQWpDLEVBQWQsQ0FBQTtJQUNBLE1BQU1DLENBQUMsR0FBRyxJQUFBLENBQUtWLE1BQWYsQ0FBQTtBQUNBLElBQUEsT0FBT08sS0FBSyxHQUFHRyxDQUFDLEdBQUdBLENBQW5CLENBQUE7QUFDSCxHQUFBOztBQVVEQyxFQUFBQSxhQUFhLENBQUNDLEdBQUQsRUFBTU4sS0FBTixFQUFhO0FBQ3RCLElBQUEsTUFBTU8sQ0FBQyxHQUFHbkIsT0FBTyxDQUFDb0IsSUFBUixDQUFhRixHQUFHLENBQUNHLE1BQWpCLENBQXlCQyxDQUFBQSxHQUF6QixDQUE2QixJQUFBLENBQUtqQixNQUFsQyxDQUFWLENBQUE7QUFDQSxJQUFBLE1BQU1rQixDQUFDLEdBQUdKLENBQUMsQ0FBQ0ssR0FBRixDQUFNdEIsT0FBTyxDQUFDa0IsSUFBUixDQUFhRixHQUFHLENBQUNPLFNBQWpCLENBQTRCQyxDQUFBQSxTQUE1QixFQUFOLENBQVYsQ0FBQTtBQUNBLElBQUEsTUFBTUMsQ0FBQyxHQUFHUixDQUFDLENBQUNLLEdBQUYsQ0FBTUwsQ0FBTixDQUFBLEdBQVcsSUFBS2IsQ0FBQUEsTUFBTCxHQUFjLElBQUEsQ0FBS0EsTUFBeEMsQ0FBQTtJQUdBLElBQUlxQixDQUFDLEdBQUcsQ0FBSixJQUFTSixDQUFDLEdBQUcsQ0FBakIsRUFDSSxPQUFPLEtBQVAsQ0FBQTtBQUVKLElBQUEsTUFBTUssS0FBSyxHQUFHTCxDQUFDLEdBQUdBLENBQUosR0FBUUksQ0FBdEIsQ0FBQTtBQUVBLElBQUEsSUFBSUMsS0FBSyxHQUFHLENBQVosRUFDSSxPQUFPLEtBQVAsQ0FBQTtBQUdKLElBQUEsTUFBTUMsQ0FBQyxHQUFHQyxJQUFJLENBQUNDLEdBQUwsQ0FBUyxDQUFDUixDQUFELEdBQUtPLElBQUksQ0FBQ0UsSUFBTCxDQUFVSixLQUFWLENBQWQsQ0FBVixDQUFBO0FBR0EsSUFBQSxJQUFJaEIsS0FBSixFQUNJQSxLQUFLLENBQUNRLElBQU4sQ0FBV0YsR0FBRyxDQUFDTyxTQUFmLENBQTBCUSxDQUFBQSxTQUExQixDQUFvQ0osQ0FBcEMsQ0FBQSxDQUF1Q0ssR0FBdkMsQ0FBMkNoQixHQUFHLENBQUNHLE1BQS9DLENBQUEsQ0FBQTtBQUVKLElBQUEsT0FBTyxJQUFQLENBQUE7QUFDSCxHQUFBOztFQVFEYyx3QkFBd0IsQ0FBQ0MsTUFBRCxFQUFTO0lBQzdCcEMsT0FBTyxDQUFDYyxJQUFSLENBQWFzQixNQUFNLENBQUMvQixNQUFwQixFQUE0QixLQUFLQSxNQUFqQyxDQUFBLENBQUE7QUFDQSxJQUFBLE1BQU1nQyxXQUFXLEdBQUdELE1BQU0sQ0FBQzlCLE1BQVAsR0FBZ0IsS0FBS0EsTUFBekMsQ0FBQTs7QUFDQSxJQUFBLElBQUlOLE9BQU8sQ0FBQ2UsUUFBUixNQUFzQnNCLFdBQVcsR0FBR0EsV0FBeEMsRUFBcUQ7QUFDakQsTUFBQSxPQUFPLElBQVAsQ0FBQTtBQUNILEtBQUE7O0FBRUQsSUFBQSxPQUFPLEtBQVAsQ0FBQTtBQUNILEdBQUE7O0FBaEZnQjs7OzsifQ==
