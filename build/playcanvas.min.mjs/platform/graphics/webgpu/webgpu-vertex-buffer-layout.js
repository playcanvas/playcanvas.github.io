import{semanticToLocation as t,TYPE_INT8 as e,TYPE_UINT8 as n,TYPE_INT16 as s,TYPE_UINT16 as r,TYPE_INT32 as i,TYPE_UINT32 as o,TYPE_FLOAT32 as a}from"../constants.js";const c=[];c[e]="sint8",c[n]="uint8",c[s]="sint16",c[r]="uint16",c[i]="sint32",c[o]="uint32",c[a]="float32";class l{constructor(){this.cache=new Map}get(t,e=null){const n=this.getKey(t,e);let s=this.cache.get(n);return s||(s=this.create(t,e),this.cache.set(n,s)),s}getKey(t,e=null){return`VB[${null==t?void 0:t.renderingHashString}, ${null==e?void 0:e.renderingHashString}]`}create(e,n){const s=[],r=e=>{const n=e.interleaved,r=e.instancing?"instance":"vertex";let i=[];const o=e.elements.length;for(let a=0;a<o;a++){const l=e.elements[a],u=t[l.name];i.push({shaderLocation:u,offset:n?l.offset:0,format:`${c[l.dataType]}${l.numComponents>1?"x"+l.numComponents:""}`}),n&&a!==o-1||(s.push({attributes:i,arrayStride:l.stride,stepMode:r}),i=[])}};return e&&r(e),n&&r(n),s}}export{l as WebgpuVertexBufferLayout};
