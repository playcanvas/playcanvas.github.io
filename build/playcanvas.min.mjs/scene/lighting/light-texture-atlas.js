import{Vec2 as s}from"../../core/math/vec2.js";import{Vec4 as t}from"../../core/math/vec4.js";import{RenderTarget as e}from"../../platform/graphics/render-target.js";import{SHADOW_PCF3 as o,LIGHTTYPE_SPOT as i,LIGHTTYPE_OMNI as a}from"../constants.js";import{CookieRenderer as l}from"../renderer/cookie-renderer.js";import{ShadowMap as h}from"../renderer/shadow-map.js";const r=[],c=[],d=new t,n=new t;class w{constructor(s){this.size=Math.floor(1024*s.w),this.used=!1,this.lightId=-1,this.rect=s}}class A{constructor(e){this.device=e,this.version=1,this.shadowAtlasResolution=2048,this.shadowAtlas=null,this.shadowEdgePixels=3,this.cookieAtlasResolution=2048,this.cookieAtlas=null,this.cookieRenderTarget=null,this.slots=[],this.atlasSplit=[],this.cubeSlotsOffsets=[new s(0,0),new s(0,1),new s(1,0),new s(1,1),new s(2,0),new s(2,1)],this.scissorVec=new t,this.allocateShadowAtlas(1),this.allocateCookieAtlas(1),this.allocateUniforms()}destroy(){this.destroyShadowAtlas(),this.destroyCookieAtlas()}destroyShadowAtlas(){this.shadowAtlas&&(this.shadowAtlas.destroy(),this.shadowAtlas=null)}destroyCookieAtlas(){this.cookieAtlas&&(this.cookieAtlas.destroy(),this.cookieAtlas=null),this.cookieRenderTarget&&(this.cookieRenderTarget.destroy(),this.cookieRenderTarget=null)}allocateShadowAtlas(s){if(!this.shadowAtlas||this.shadowAtlas.texture.width!==s){this.version++,this.destroyShadowAtlas(),this.shadowAtlas=h.createAtlas(this.device,s,o),this.shadowAtlas.cached=!0;const t=4/this.shadowAtlasResolution;this.scissorVec.set(t,t,-2*t,-2*t)}}allocateCookieAtlas(s){this.cookieAtlas&&this.cookieAtlas.width===s||(this.version++,this.destroyCookieAtlas(),this.cookieAtlas=l.createTexture(this.device,s),this.cookieRenderTarget=new e({colorBuffer:this.cookieAtlas,depth:!1,flipY:!0}))}allocateUniforms(){this._shadowAtlasTextureId=this.device.scope.resolve("shadowAtlasTexture"),this._shadowAtlasParamsId=this.device.scope.resolve("shadowAtlasParams"),this._shadowAtlasParams=new Float32Array(2),this._cookieAtlasTextureId=this.device.scope.resolve("cookieAtlasTexture")}updateUniforms(){const s=this.shadowAtlas.renderTargets[0],t=(this.device.isWebGPU||this.device.webgl2)&&!0?s.depthBuffer:s.colorBuffer;this._shadowAtlasTextureId.setValue(t),this._shadowAtlasParams[0]=this.shadowAtlasResolution,this._shadowAtlasParams[1]=this.shadowEdgePixels,this._shadowAtlasParamsId.setValue(this._shadowAtlasParams),this._cookieAtlasTextureId.setValue(this.cookieAtlas)}subdivide(s,e){let o=e.atlasSplit;if(!o){const t=Math.ceil(Math.sqrt(s));o=c,o[0]=t,o.length=1}if(i=o,a=this.atlasSplit,i.length!==a.length||!i.every(((s,t)=>s===a[t]))){this.version++,this.slots.length=0,this.atlasSplit.length=0,this.atlasSplit.push(...o);const s=this.atlasSplit[0];if(s>1){const e=1/s;for(let o=0;o<s;o++)for(let i=0;i<s;i++){const a=new t(o*e,i*e,e,e),l=this.atlasSplit[1+o*s+i];if(l>1)for(let s=0;s<l;s++)for(let o=0;o<l;o++){const i=e/l,h=new t(a.x+s*i,a.y+o*i,i,i);this.slots.push(new w(h))}else this.slots.push(new w(a))}}else this.slots.push(new w(new t(0,0,1,1)));this.slots.sort(((s,t)=>t.size-s.size))}var i,a}collectLights(s,t,e){const o=e.cookiesEnabled,i=e.shadowsEnabled;let a=!1,l=!1;const h=r;h.length=0;const c=s=>{for(let t=0;t<s.length;t++){const e=s[t];if(e.visibleThisFrame){const s=i&&e.castShadows,t=o&&!!e.cookie;a||(a=s),l||(l=t),(s||t)&&h.push(e)}}};return(o||i)&&(c(s),c(t)),h.sort(((s,t)=>t.maxScreenSize-s.maxScreenSize)),a&&this.allocateShadowAtlas(this.shadowAtlasResolution),l&&this.allocateCookieAtlas(this.cookieAtlasResolution),(a||l)&&this.subdivide(h.length,e),h}setupSlot(s,t){s.atlasViewport.copy(t);const e=s.numShadowFaces;for(let o=0;o<e;o++)if(s.castShadows||s._cookie){if(d.copy(t),n.copy(t),s._type===i&&d.add(this.scissorVec),s._type===a){const s=d.z/3,t=this.cubeSlotsOffsets[o];d.x+=s*t.x,d.y+=s*t.y,d.z=s,d.w=s,n.copy(d)}if(s.castShadows){const t=s.getRenderData(null,o);t.shadowViewport.copy(d),t.shadowScissor.copy(n)}}}assignSlot(s,t,e){s.atlasViewportAllocated=!0;const o=this.slots[t];o.lightId=s.id,o.used=!0,e&&(s.atlasSlotUpdated=!0,s.atlasVersion=this.version,s.atlasSlotIndex=t)}update(s,t,e){this.shadowAtlasResolution=e.shadowAtlasResolution,this.cookieAtlasResolution=e.cookieAtlasResolution;const o=this.collectLights(s,t,e);if(o.length>0){const s=this.slots;for(let t=0;t<s.length;t++)s[t].used=!1;const t=Math.min(o.length,s.length);for(let e=0;e<t;e++){const t=o[e];t.castShadows&&(t._shadowMap=this.shadowAtlas);const i=s[t.atlasSlotIndex];if(t.atlasVersion===this.version&&t.id===(null==i?void 0:i.lightId)){const o=s[t.atlasSlotIndex];o.size!==s[e].size||o.used||this.assignSlot(t,t.atlasSlotIndex,!1)}}let e=0;for(let i=0;i<t;i++){for(;e<s.length&&s[e].used;)e++;const t=o[i];t.atlasViewportAllocated||this.assignSlot(t,e,!0);const a=s[t.atlasSlotIndex];this.setupSlot(t,a.rect)}}this.updateUniforms()}}export{A as LightTextureAtlas};
