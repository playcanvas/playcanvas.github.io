var t="\nfloat getFalloffWindow(float lightRadius, vec3 lightDir) {\n\t\tfloat sqrDist = dot(lightDir, lightDir);\n\t\tfloat invRadius = 1.0 / lightRadius;\n\t\treturn square( saturate( 1.0 - square( sqrDist * square(invRadius) ) ) );\n}\n\nfloat getFalloffInvSquared(float lightRadius, vec3 lightDir) {\n\t\tfloat sqrDist = dot(lightDir, lightDir);\n\t\tfloat falloff = 1.0 / (sqrDist + 1.0);\n\t\tfloat invRadius = 1.0 / lightRadius;\n\n\t\tfalloff *= 16.0;\n\t\tfalloff *= square( saturate( 1.0 - square( sqrDist * square(invRadius) ) ) );\n\n\t\treturn falloff;\n}\n";export{t as default};
