var t="\nuniform float material_refractionIndex;\nuniform float material_invAttenuationDistance;\nuniform vec3 material_attenuation;\n\nvoid addRefraction(\n\t\tvec3 worldNormal, \n\t\tvec3 viewDir, \n\t\tfloat thickness, \n\t\tfloat gloss, \n\t\tvec3 specularity, \n\t\tvec3 albedo, \n\t\tfloat transmission\n#if defined(LIT_IRIDESCENCE)\n\t\t, vec3 iridescenceFresnel,\n\t\tIridescenceArgs iridescence\n#endif\n) {\n\n\t\t// Extract scale from the model transform\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length(vec3(matrix_model[0].xyz));\n\t\tmodelScale.y = length(vec3(matrix_model[1].xyz));\n\t\tmodelScale.z = length(vec3(matrix_model[2].xyz));\n\n\t\t// Calculate the refraction vector, scaled by the thickness and scale of the object\n\t\tvec3 refractionVector = normalize(refract(-viewDir, worldNormal, material_refractionIndex)) * thickness * modelScale;\n\n\t\t// The refraction point is the entry point + vector to exit point\n\t\tvec4 pointOfRefraction = vec4(vPositionW + refractionVector, 1.0);\n\n\t\t// Project to texture space so we can sample it\n\t\tvec4 projectionPoint = matrix_viewProjection * pointOfRefraction;\n\n\t\t// use built-in getGrabScreenPos function to convert screen position to grab texture uv coords\n\t\tvec2 uv = getGrabScreenPos(projectionPoint);\n\n\t\t#ifdef SUPPORTS_TEXLOD\n\t\t\t\t// Use IOR and roughness to select mip\n\t\t\t\tfloat iorToRoughness = (1.0 - gloss) * clamp((1.0 / material_refractionIndex) * 2.0 - 2.0, 0.0, 1.0);\n\t\t\t\tfloat refractionLod = log2(uScreenSize.x) * iorToRoughness;\n\t\t\t\tvec3 refraction = texture2DLodEXT(uSceneColorMap, uv, refractionLod).rgb;\n\t\t#else\n\t\t\t\tvec3 refraction = texture2D(uSceneColorMap, uv).rgb;\n\t\t#endif\n\n\t\t// Transmittance is our final refraction color\n\t\tvec3 transmittance;\n\t\tif (material_invAttenuationDistance != 0.0)\n\t\t{\n\t\t\t\tvec3 attenuation = -log(material_attenuation) * material_invAttenuationDistance;\n\t\t\t\ttransmittance = exp(-attenuation * length(refractionVector));\n\t\t}\n\t\telse\n\t\t{\n\t\t\t\ttransmittance = refraction;\n\t\t}\n\n\t\t// Apply fresnel effect on refraction\n\t\tvec3 fresnel = vec3(1.0) - \n\t\t\t\tgetFresnel(\n\t\t\t\t\t\tdot(viewDir, worldNormal), \n\t\t\t\t\t\tgloss, \n\t\t\t\t\t\tspecularity\n\t\t\t\t#if defined(LIT_IRIDESCENCE)\n\t\t\t\t\t\t, iridescenceFresnel,\n\t\t\t\t\t\tiridescence\n\t\t\t\t#endif\n\t\t\t\t);\n\t\tdDiffuseLight = mix(dDiffuseLight, refraction * transmittance * fresnel, transmission);\n}\n";export{t as default};
